if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self),n.osmtogeojson=e()}}(function(){return function e(n,t,r){function o(i,s){if(!t[i]){if(!n[i]){var u="function"==typeof require&&require;if(!s&&u)return u(i,!0);if(a)return a(i,!0);var l=new Error("Cannot find module '"+i+"'");throw l.code="MODULE_NOT_FOUND",l}var c=t[i]={exports:{}};n[i][0].call(c.exports,function(e){var t=n[i][1][e];return o(t?t:e)},c,c.exports,e,n,t,r)}return t[i].exports}for(var a="function"==typeof require&&require,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,n){var t=e("./lodash.custom.js"),r=e("geojson-rewind"),o=e("./polygon_features.json"),a={};a=function(e,n){function a(e){function n(e){var n=t.clone(e);n.lat=e.center.lat,n.lon=e.center.lon,n.__is_center_placeholder=!0,i.push(n)}function r(e){function n(e,n,t){var o={type:"node",id:"_"+r.type+"/"+r.id+"bounds"+t,lat:e,lon:n};r.nodes.push(o.id),i.push(o)}var r=t.clone(e);r.nodes=[],n(r.bounds.minlat,r.bounds.minlon,1),n(r.bounds.maxlat,r.bounds.minlon,2),n(r.bounds.maxlat,r.bounds.maxlon,3),n(r.bounds.minlat,r.bounds.maxlon,4),r.nodes.push(r.nodes[0]),r.__is_bounds_placeholder=!0,u.push(r)}function o(e){function n(e,n,t){var r={type:"node",id:t,lat:e,lon:n,__is_uninteresting:!0};i.push(r)}t.isArray(e.nodes)||(e.nodes=e.geometry.map(function(e){return null!==e?"_anonymous@"+e.lat+"/"+e.lon:"_anonymous@unknown_location"})),e.geometry.forEach(function(t,r){t&&n(t.lat,t.lon,e.nodes[r])})}function a(e){function n(e,n,t){var r={type:"node",id:t,lat:e,lon:n};i.push(r)}function t(e,n){function t(e,n){var t={type:"node",id:"_anonymous@"+e+"/"+n,lat:e,lon:n,__is_uninteresting:!0};r.nodes.push(t.id),i.push(t)}if(!u.some(function(e){return"way"==e.type&&e.id==n})){var r={type:"way",id:n,nodes:[]};e.forEach(function(e){e?t(e.lat,e.lon):r.nodes.push(void 0)}),u.push(r)}}e.members.forEach(function(e){"node"==e.type?e.lat&&n(e.lat,e.lon,e.ref):"way"==e.type&&e.geometry&&t(e.geometry,e.ref)})}for(var i=new Array,u=new Array,l=new Array,c=0;c<e.elements.length;c++)switch(e.elements[c].type){case"node":var f=e.elements[c];i.push(f);break;case"way":var p=t.clone(e.elements[c]);p.nodes=t.clone(p.nodes),u.push(p),p.center&&n(p),p.geometry?o(p):p.bounds&&r(p);break;case"relation":var d=t.clone(e.elements[c]);d.members=t.clone(d.members),l.push(d);var g=d.members&&d.members.some(function(e){return"node"==e.type&&e.lat||"way"==e.type&&e.geometry&&e.geometry.length>0});d.center&&n(d),g?a(d):d.bounds&&r(d)}return s(i,u,l)}function i(e){function n(e,n,t){e.hasAttribute(t)&&(n[t]=e.getAttribute(t))}function r(e,r){var o=t.clone(e);n(r,o,"lat"),n(r,o,"lon"),o.__is_center_placeholder=!0,u.push(o)}function o(e,n){function r(e,n,t){var r={type:"node",id:"_"+o.type+"/"+o.id+"bounds"+t,lat:e,lon:n};o.nodes.push(r.id),u.push(r)}var o=t.clone(e);o.nodes=[],r(n.getAttribute("minlat"),n.getAttribute("minlon"),1),r(n.getAttribute("maxlat"),n.getAttribute("minlon"),2),r(n.getAttribute("maxlat"),n.getAttribute("maxlon"),3),r(n.getAttribute("minlat"),n.getAttribute("maxlon"),4),o.nodes.push(o.nodes[0]),o.__is_bounds_placeholder=!0,l.push(o)}function a(e,n){function r(e,n,t){var r={type:"node",id:t,lat:e,lon:n,__is_uninteresting:!0};return u.push(r),r.id}t.isArray(e.nodes)||(e.nodes=[],t.each(n,function(n){e.nodes.push("_anonymous@"+n.getAttribute("lat")+"/"+n.getAttribute("lon"))})),t.each(n,function(n,t){n.getAttribute("lat")&&r(n.getAttribute("lat"),n.getAttribute("lon"),e.nodes[t])})}function i(e,n){function r(e,n,t){var r={type:"node",id:t,lat:e,lon:n};u.push(r)}function o(e,n){function r(e,n){var t={type:"node",id:"_anonymous@"+e+"/"+n,lat:e,lon:n,__is_uninteresting:!0};o.nodes.push(t.id),u.push(t)}if(!l.some(function(e){return"way"==e.type&&e.id==n})){var o={type:"way",id:n,nodes:[]};t.each(e,function(e){e.getAttribute("lat")?r(e.getAttribute("lat"),e.getAttribute("lon")):o.nodes.push(void 0)}),l.push(o)}}t.each(n,function(n,t){"node"==e.members[t].type?n.getAttribute("lat")&&r(n.getAttribute("lat"),n.getAttribute("lon"),e.members[t].ref):"way"==e.members[t].type&&n.getElementsByTagName("nd").length>0&&o(n.getElementsByTagName("nd"),e.members[t].ref)})}var u=new Array,l=new Array,c=new Array;t.each(e.getElementsByTagName("node"),function(e){var r={};t.each(e.getElementsByTagName("tag"),function(e){r[e.getAttribute("k")]=e.getAttribute("v")});var o={type:"node"};n(e,o,"id"),n(e,o,"lat"),n(e,o,"lon"),n(e,o,"version"),n(e,o,"timestamp"),n(e,o,"changeset"),n(e,o,"uid"),n(e,o,"user"),t.isEmpty(r)||(o.tags=r),u.push(o)});var f,p;return t.each(e.getElementsByTagName("way"),function(e){var i={},s=[];t.each(e.getElementsByTagName("tag"),function(e){i[e.getAttribute("k")]=e.getAttribute("v")});var u=!1;t.each(e.getElementsByTagName("nd"),function(e,n){var t;(t=e.getAttribute("ref"))&&(s[n]=t),!u&&e.getAttribute("lat")&&(u=!0)});var c={type:"way"};n(e,c,"id"),n(e,c,"version"),n(e,c,"timestamp"),n(e,c,"changeset"),n(e,c,"uid"),n(e,c,"user"),s.length>0&&(c.nodes=s),t.isEmpty(i)||(c.tags=i),(f=e.getElementsByTagName("center")[0])&&r(c,f),u?a(c,e.getElementsByTagName("nd")):(p=e.getElementsByTagName("bounds")[0])&&o(c,p),l.push(c)}),t.each(e.getElementsByTagName("relation"),function(e){var a={},s=[];t.each(e.getElementsByTagName("tag"),function(e){a[e.getAttribute("k")]=e.getAttribute("v")});var u=!1;t.each(e.getElementsByTagName("member"),function(e,t){s[t]={},n(e,s[t],"ref"),n(e,s[t],"role"),n(e,s[t],"type"),(!u&&"node"==s[t].type&&e.getAttribute("lat")||"way"==s[t].type&&e.getElementsByTagName("nd").length>0)&&(u=!0)});var l={type:"relation"};n(e,l,"id"),n(e,l,"version"),n(e,l,"timestamp"),n(e,l,"changeset"),n(e,l,"uid"),n(e,l,"user"),s.length>0&&(l.members=s),t.isEmpty(a)||(l.tags=a),(f=e.getElementsByTagName("center")[0])&&r(l,f),u?i(l,e.getElementsByTagName("member")):(p=e.getElementsByTagName("bounds")[0])&&o(l,p),c.push(l)}),s(u,l,c)}function s(e,o,a){function i(e,t){if("object"!=typeof t&&(t={}),"function"==typeof n.uninterestingTags)return!n.uninterestingTags(e,t);for(var r in e)if(n.uninterestingTags[r]!==!0&&t[r]!==!0&&t[r]!==e[r])return!0;return!1}function s(e){var n={timestamp:e.timestamp,version:e.version,changeset:e.changeset,user:e.user,uid:e.uid};for(k in n)void 0===n[k]&&delete n[k];return n}function l(e,r){function o(t){for(var r,o,a,i,s,u,c=function(e){return e[0]},f=function(e){return e[e.length-1]},p=[];t.length;)for(r=t.pop().nodes.slice(),p.push(r);t.length&&c(r)!==f(r);){for(o=c(r),a=f(r),i=0;i<t.length;i++){if(u=t[i].nodes,a===c(u)){s=r.push,u=u.slice(1);break}if(a===f(u)){s=r.push,u=u.slice(0,-1).reverse();break}if(o==f(u)){s=r.unshift,u=u.slice(0,-1);break}if(o==c(u)){s=r.unshift,u=u.slice(1).reverse();break}u=s=null}if(!u){n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"contains unclosed ring geometry");break}t.splice(i,1),s.apply(r,u)}return p}function a(e){var n,t,r=function(e,n){for(var t=0;t<n.length;t++)if(a(n[t],e))return!0;return!1},o=function(e){return e.map(function(e){return[+e.lat,+e.lon]})},a=function(e,n){for(var t=e[0],r=e[1],o=!1,a=0,i=n.length-1;a<n.length;i=a++){var s=n[a][0],u=n[a][1],l=n[i][0],c=n[i][1],f=u>r!=c>r&&(l-s)*(r-u)/(c-u)+s>t;f&&(o=!o)}return o};for(e=o(e),n=0;n<c.length;n++)if(t=o(c[n]),r(t,e))return n}var i,u=!1,l=T?"way":"relation";i=r.members.filter(function(e){return"way"===e.type}),i=i.map(function(t){var r=g[t.ref];return void 0===r?(n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"tainted by a missing way",t.type+"/"+t.ref),void(u=!0)):{id:t.ref,role:t.role||"outer",way:r,nodes:r.nodes.filter(function(r){return void 0!==r?!0:(u=!0,n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"tainted by a way",t.type+"/"+t.ref,"with a missing node"),!1)})}}),i=t.compact(i);var c,f;c=o(i.filter(function(e){return"outer"===e.role})),f=o(i.filter(function(e){return"inner"===e.role}));var p;p=c.map(function(e){return[e]});for(var d=0;d<f.length;d++){var y=a(f[d]);void 0!==y?p[y].push(f[d]):n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"contains an inner ring with no containing outer")}var m=[];if(m=t.compact(p.map(function(r){var o=t.compact(r.map(function(r){return r.length<4?void(n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"contains a ring with less than four nodes")):t.compact(r.map(function(e){return[+e.lon,+e.lat]}))}));return 0==o.length?void(n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"contains an empty ring cluster")):o})),0==m.length)return n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"contains no coordinates"),!1;var b="MultiPolygon";1===m.length&&(b="Polygon",m=m[0]);var v={type:"Feature",id:e.type+"/"+e.id,properties:{type:e.type,id:e.id,tags:e.tags||{},relations:h[e.type][e.id]||[],meta:s(e)},geometry:{type:b,coordinates:m}};return u&&(n.verbose&&console.warn("Multipolygon",l+"/"+e.id,"is tainted"),v.properties.tainted=!0),v}for(var c=new Object,f=0;f<e.length;f++)void 0!==e[f].lat?c[e[f].id]=e[f]:n.verbose&&console.warn("Node",e[f].type+"/"+e[f].id,"ignored because it has no coordinates");for(var p=new Object,f=0;f<e.length;f++)"undefined"!=typeof e[f].tags&&i(e[f].tags)&&(p[e[f].id]=!0);for(var f=0;f<a.length;f++)if(t.isArray(a[f].members))for(var d=0;d<a[f].members.length;d++)"node"==a[f].members[d].type&&(p[a[f].members[d].ref]=!0);else n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"ignored because it has no members");for(var g=new Object,y=new Object,f=0;f<o.length;f++)if(t.isArray(o[f].nodes)){g[o[f].id]=o[f];for(var d=0;d<o[f].nodes.length;d++)y[o[f].nodes[d]]=!0,o[f].nodes[d]=c[o[f].nodes[d]]}else n.verbose&&console.warn("Way",o[f].type+"/"+o[f].id,"ignored because it has no nodes");for(var m=new Array,f=0;f<e.length;f++)y[e[f].id]&&!p[e[f].id]||e[f].__is_uninteresting||m.push(e[f]);for(var b=new Array,f=0;f<a.length;f++)t.isArray(a[f].members)?b[a[f].id]=a[f]:n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"ignored because it has no members");for(var h={node:{},way:{},relation:{}},f=0;f<a.length;f++)if(t.isArray(a[f].members))for(var d=0;d<a[f].members.length;d++){var v;switch(a[f].members[d].type){case"node":v=c[a[f].members[d].ref];break;case"way":v=g[a[f].members[d].ref];break;case"relation":v=b[a[f].members[d].ref]}if(v){var w=a[f].members[d].type,_=a[f].members[d].ref;"undefined"==typeof h[w][_]&&(h[w][_]=[]),h[w][_].push({role:a[f].members[d].role,rel:a[f].id,reltags:a[f].tags})}else n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"member",a[f].members[d].type+"/"+a[f].members[d].id,"ignored because it has an invalid type")}else n.verbose&&console.warn("Relation",a[f].type+"/"+a[f].id,"ignored because it has no members");var x,A={type:"FeatureCollection",features:new Array};for(f=0;f<m.length;f++)if("undefined"!=typeof m[f].lon&&"undefined"!=typeof m[f].lat){var j={type:"Feature",id:m[f].type+"/"+m[f].id,properties:{type:m[f].type,id:m[f].id,tags:m[f].tags||{},relations:h.node[m[f].id]||[],meta:s(m[f])},geometry:{type:"Point",coordinates:[+m[f].lon,+m[f].lat]}};m[f].__is_center_placeholder&&(j.properties.geometry="center"),A.features.push(j)}else n.verbose&&console.warn("POI",m[f].type+"/"+m[f].id,"ignored because it lacks coordinates");for(var E={type:"FeatureCollection",features:new Array},P={type:"FeatureCollection",features:new Array},f=0;f<a.length;f++)if("undefined"!=typeof a[f].tags&&("multipolygon"==a[f].tags.type||"boundary"==a[f].tags.type)){if(!t.isArray(a[f].members)){n.verbose&&console.warn("Multipolygon",a[f].type+"/"+a[f].id,"ignored because it has no members");continue}for(var O=0,d=0;d<a[f].members.length;d++)"outer"==a[f].members[d].role?O++:n.verbose&&"inner"!=a[f].members[d].role&&console.warn("Multipolygon",a[f].type+"/"+a[f].id,"member",a[f].members[d].type+"/"+a[f].members[d].ref,'ignored because it has an invalid role: "'+a[f].members[d].role+'"');if(a[f].members.forEach(function(e){g[e.ref]&&("outer"!==e.role||i(g[e.ref].tags,a[f].tags)||(g[e.ref].is_multipolygon_outline=!0),"inner"!==e.role||i(g[e.ref].tags)||(g[e.ref].is_multipolygon_outline=!0))}),0==O){n.verbose&&console.warn("Multipolygon relation",a[f].type+"/"+a[f].id,"ignored because it has no outer ways");continue}var T=!1;1!=O||i(a[f].tags,{type:!0})||(T=!0);var j=null;if(T){var N=a[f].members.filter(function(e){return"outer"===e.role})[0];if(N=g[N.ref],void 0===N){n.verbose&&console.warn("Multipolygon relation",a[f].type+"/"+a[f].id,"ignored because outer way",N.type+"/"+N.ref,"is missing");continue}N.is_multipolygon_outline=!0,j=l(N,a[f])}else j=l(a[f],a[f]);if(j===!1){n.verbose&&console.warn("Multipolygon relation",a[f].type+"/"+a[f].id,"ignored because it has invalid geometry");continue}P.features.push(j)}for(var f=0;f<o.length;f++)if(t.isArray(o[f].nodes)){if(!o[f].is_multipolygon_outline){for(o[f].tainted=!1,o[f].hidden=!1,coords=new Array,d=0;d<o[f].nodes.length;d++)"object"==typeof o[f].nodes[d]?coords.push([+o[f].nodes[d].lon,+o[f].nodes[d].lat]):(n.verbose&&console.warn("Way",o[f].type+"/"+o[f].id,"is tainted by an invalid node"),o[f].tainted=!0);if(coords.length<=1)n.verbose&&console.warn("Way",o[f].type+"/"+o[f].id,"ignored because it contains too few nodes");else{var S="LineString";"undefined"!=typeof o[f].nodes[0]&&o[f].nodes[0]===o[f].nodes[o[f].nodes.length-1]&&("undefined"!=typeof o[f].tags&&u(o[f].tags)||o[f].__is_bounds_placeholder)&&(S="Polygon",coords=[coords]);var j={type:"Feature",id:o[f].type+"/"+o[f].id,properties:{type:o[f].type,id:o[f].id,tags:o[f].tags||{},relations:h.way[o[f].id]||[],meta:s(o[f])},geometry:{type:S,coordinates:coords}};o[f].tainted&&(n.verbose&&console.warn("Way",o[f].type+"/"+o[f].id,"is tainted"),j.properties.tainted=!0),o[f].__is_bounds_placeholder&&(j.properties.geometry="bounds"),"LineString"==S?E.features.push(j):P.features.push(j)}}}else n.verbose&&console.warn("Way",o[f].type+"/"+o[f].id,"ignored because it has no nodes");return x={type:"FeatureCollection",features:[]},x.features=x.features.concat(P.features),x.features=x.features.concat(E.features),x.features=x.features.concat(A.features),n.flatProperties&&x.features.forEach(function(e){e.properties=t.merge(e.properties.meta,e.properties.tags,{id:e.properties.type+"/"+e.properties.id})}),x=r(x,!0)}function u(e){var t=n.polygonFeatures;if("function"==typeof t)return t(e);if("no"===e.area)return!1;for(var r in e){var o=e[r],a=t[r];if("undefined"!=typeof a&&"no"!==o){if(a===!0)return!0;if(a.included_values&&a.included_values[o]===!0)return!0;if(a.excluded_values&&a.excluded_values[o]!==!0)return!0}}return!1}n=t.merge({verbose:!1,flatProperties:!1,uninterestingTags:{source:!0,source_ref:!0,"source:ref":!0,history:!0,attribution:!0,created_by:!0,"tiger:county":!0,"tiger:tlid":!0,"tiger:upload_uuid":!0},polygonFeatures:o},n);var l;return l="undefined"!=typeof XMLDocument&&e instanceof XMLDocument||"undefined"==typeof XMLDocument&&e.childNodes?i(e):a(e)},a.toGeojson=a,n.exports=a},{"./lodash.custom.js":2,"./polygon_features.json":6,"geojson-rewind":3}],2:[function(e,n,t){(function(e){(function(){function r(){return S.pop()||[]}function o(e){return"function"!=typeof e.toString&&"string"==typeof(e+"")}function a(e){e.length=0,S.length<M&&S.push(e)}function i(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,a=Array(0>o?0:o);++r<o;)a[r]=e[n+r];return a}function s(){}function u(e){function n(){if(r){var e=i(r);dn.apply(e,arguments)}if(this instanceof n){var a=c(t.prototype),s=t.apply(a,e||arguments);return x(s)?s:a}return t.apply(o,e||arguments)}var t=e[0],r=e[2],o=e[4];return jn(n,e),n}function l(e,n,t,s,u){if(t){var c=t(e);if("undefined"!=typeof c)return c}var f=x(e);if(!f)return e;var p=un.call(e);if(!z[p]||!xn.nodeClass&&o(e))return e;var d=wn[p];switch(p){case H:case U:return new d(+e);case $:case V:return new d(e);case G:return c=d(e.source,L.exec(e)),c.lastIndex=e.lastIndex,c}var g=En(e);if(n){var y=!s;s||(s=r()),u||(u=r());for(var m=s.length;m--;)if(s[m]==e)return u[m];c=g?d(e.length):{}}else c=g?i(e):Cn({},e);return g&&(pn.call(e,"index")&&(c.index=e.index),pn.call(e,"input")&&(c.input=e.input)),n?(s.push(e),u.push(c),(g?Sn:Ln)(e,function(e,r){c[r]=l(e,n,t,s,u)}),y&&(a(s),a(u)),c):c}function c(e){return x(e)?bn(e):{}}function f(e,n,t){if("function"!=typeof e)return T;if("undefined"==typeof n||!("prototype"in e))return e;var r=e.__bindData__;if("undefined"==typeof r&&(xn.funcNames&&(r=!e.name),r=r||!xn.funcDecomp,!r)){var o=cn.call(e);xn.funcNames||(r=!B.test(o)),r||(r=F.test(o),jn(e,r))}if(r===!1||r!==!0&&1&r[1])return e;switch(t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,o){return e.call(n,t,r,o)};case 4:return function(t,r,o,a){return e.call(n,t,r,o,a)}}return O(e,n)}function p(e){function n(){var e=l?s:this;if(o){var m=i(o);dn.apply(m,arguments)}if((a||d)&&(m||(m=i(arguments)),a&&dn.apply(m,a),d&&m.length<u))return r|=16,p([t,g?r:-4&r,m,null,s,u]);if(m||(m=arguments),f&&(t=e[y]),this instanceof n){e=c(t.prototype);var b=t.apply(e,m);return x(b)?b:e}return t.apply(e,m)}var t=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=1&r,f=2&r,d=4&r,g=8&r,y=t;return jn(n,e),n}function d(e,n,t,r,o){(En(n)?E:Ln)(n,function(n,a){var i,s,u=n,l=e[a];if(n&&((s=En(n))||Bn(n))){for(var c=r.length;c--;)if(i=r[c]==n){l=o[c];break}if(!i){var f;t&&(u=t(l,n),(f="undefined"!=typeof u)&&(l=u)),f||(l=s?En(l)?l:[]:Bn(l)?l:{}),r.push(n),o.push(l),f||d(l,n,t,r,o)}}else t&&(u=t(l,n),"undefined"==typeof u&&(u=n)),"undefined"!=typeof u&&(l=u);e[a]=l})}function g(e,n,t,r,o,a){var s=1&n,l=2&n,c=4&n,f=16&n,d=32&n;if(!l&&!_(e))throw new TypeError;f&&!t.length&&(n&=-17,f=t=!1),d&&!r.length&&(n&=-33,d=r=!1);var y=e&&e.__bindData__;if(y&&y!==!0)return y=i(y),y[2]&&(y[2]=i(y[2])),y[3]&&(y[3]=i(y[3])),!s||1&y[1]||(y[4]=o),!s&&1&y[1]&&(n|=8),!c||4&y[1]||(y[5]=a),f&&dn.apply(y[2]||(y[2]=[]),t),d&&yn.apply(y[3]||(y[3]=[]),r),y[1]|=n,g.apply(null,y);var m=1==n||17===n?u:p;return m([e,n,t,r,o,a])}function y(){K.shadowedProps=I,K.array=K.bottom=K.loop=K.top="",K.init="iterable",K.useHas=!0;for(var e,n=0;e=arguments[n];n++)for(var t in e)K[t]=e[t];var r=K.args;K.firstArg=/^[^,]+/.exec(r)[0];var o=Function("baseCreateCallback, errorClass, errorProto, hasOwnProperty, indicatorObject, isArguments, isArray, isString, keys, objectProto, objectTypes, nonEnumProps, stringClass, stringProto, toString","return function("+r+") {\n"+An(K)+"\n}");return o(f,W,on,pn,C,h,En,A,K.keys,an,Q,_n,V,sn,un)}function m(e){return"function"==typeof e&&ln.test(e)}function b(e){var n,t;return!e||un.call(e)!=X||(n=e.constructor,_(n)&&!(n instanceof n))||!xn.argsClass&&h(e)||!xn.nodeClass&&o(e)?!1:xn.ownLast?(Mn(e,function(e,n,r){return t=pn.call(r,n),!1}),t!==!1):(Mn(e,function(e,n){t=n}),"undefined"==typeof t||pn.call(e,t))}function h(e){return e&&"object"==typeof e&&"number"==typeof e.length&&un.call(e)==D||!1}function v(e,n,t,r){return"boolean"!=typeof n&&null!=n&&(r=t,t=n,n=!1),l(e,n,"function"==typeof t&&f(t,r,1))}function w(e){var n=!0;if(!e)return n;var t=un.call(e),r=e.length;return t==R||t==V||(xn.argsClass?t==D:h(e))||t==X&&"number"==typeof r&&_(e.splice)?!r:(Ln(e,function(){return n=!1}),n)}function _(e){return"function"==typeof e}function x(e){return!(!e||!Q[typeof e])}function A(e){return"string"==typeof e||e&&"object"==typeof e&&un.call(e)==V||!1}function j(e){var n=arguments,t=2;if(!x(e))return e;if("number"!=typeof n[2]&&(t=n.length),t>3&&"function"==typeof n[t-2])var o=f(n[--t-1],n[t--],2);else t>2&&"function"==typeof n[t-1]&&(o=n[--t]);for(var s=i(arguments,1,t),u=-1,l=r(),c=r();++u<t;)d(e,s[u],o,l,c);return a(l),a(c),e}function E(e,n,t){if(n&&"undefined"==typeof t&&En(e))for(var r=-1,o=e.length;++r<o&&n(e[r],r,e)!==!1;);else Sn(e,n,t);return e}function P(e){for(var n=-1,t=e?e.length:0,r=[];++n<t;){var o=e[n];o&&r.push(o)}return r}function O(e,n){return arguments.length>2?g(e,17,i(arguments,2),null,n):g(e,1,null,null,n)}function T(e){return e}function N(){}var S=[],C={},M=40,L=/\w*$/,B=/^\s*function[ \n\r\t]+\w/,F=/\bthis\b/,I=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],D="[object Arguments]",R="[object Array]",H="[object Boolean]",U="[object Date]",W="[object Error]",q="[object Function]",$="[object Number]",X="[object Object]",G="[object RegExp]",V="[object String]",z={};z[q]=!1,z[D]=z[R]=z[H]=z[U]=z[$]=z[X]=z[G]=z[V]=!0;var J={configurable:!1,enumerable:!1,value:null,writable:!1},K={args:"",array:null,bottom:"",firstArg:"",init:"",keys:null,loop:"",shadowedProps:null,support:null,top:"",useHas:!1},Q={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},Y=Q[typeof window]&&window||this,Z=Q[typeof t]&&t&&!t.nodeType&&t,en=Q[typeof n]&&n&&!n.nodeType&&n,nn=en&&en.exports===Z&&Z,tn=Q[typeof e]&&e;!tn||tn.global!==tn&&tn.window!==tn||(Y=tn);var rn=[],on=Error.prototype,an=Object.prototype,sn=String.prototype,un=an.toString,ln=RegExp("^"+String(un).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),cn=Function.prototype.toString,fn=m(fn=Object.getPrototypeOf)&&fn,pn=an.hasOwnProperty,dn=rn.push,gn=an.propertyIsEnumerable,yn=rn.unshift,mn=function(){try{var e={},n=m(n=Object.defineProperty)&&n,t=n(e,e,e)&&n}catch(r){}return t}(),bn=m(bn=Object.create)&&bn,hn=m(hn=Array.isArray)&&hn,vn=m(vn=Object.keys)&&vn,wn={};wn[R]=Array,wn[H]=Boolean,wn[U]=Date,wn[q]=Function,wn[X]=Object,wn[$]=Number,wn[G]=RegExp,wn[V]=String;var _n={};_n[R]=_n[U]=_n[$]={constructor:!0,toLocaleString:!0,toString:!0,valueOf:!0},_n[H]=_n[V]={constructor:!0,toString:!0,valueOf:!0},_n[W]=_n[q]=_n[G]={constructor:!0,toString:!0},_n[X]={constructor:!0},function(){for(var e=I.length;e--;){var n=I[e];for(var t in _n)pn.call(_n,t)&&!pn.call(_n[t],n)&&(_n[t][n]=!1)}}();var xn=s.support={};!function(){var e=function(){this.x=1},n={0:1,length:1},t=[];e.prototype={valueOf:1,y:1};for(var r in new e)t.push(r);for(r in arguments);xn.argsClass=un.call(arguments)==D,xn.argsObject=arguments.constructor==Object&&!(arguments instanceof Array),xn.enumErrorProps=gn.call(on,"message")||gn.call(on,"name"),xn.enumPrototypes=gn.call(e,"prototype"),xn.funcDecomp=!m(Y.WinRTError)&&F.test(function(){return this}),xn.funcNames="string"==typeof Function.name,xn.nonEnumArgs=0!=r,xn.nonEnumShadows=!/valueOf/.test(t),xn.ownLast="x"!=t[0],xn.spliceObjects=(rn.splice.call(n,0,1),!n[0]),xn.unindexedChars="x"[0]+Object("x")[0]!="xx";try{xn.nodeClass=!(un.call(document)==X&&!({toString:0}+""))}catch(o){xn.nodeClass=!0}}(1);var An=function(e){var n="var index, iterable = "+e.firstArg+", result = "+e.init+";\nif (!iterable) return result;\n"+e.top+";";e.array?(n+="\nvar length = iterable.length; index = -1;\nif ("+e.array+") {  ",xn.unindexedChars&&(n+="\n  if (isString(iterable)) {\n    iterable = iterable.split('')\n  }  "),n+="\n  while (++index < length) {\n    "+e.loop+";\n  }\n}\nelse {  "):xn.nonEnumArgs&&(n+="\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += '';\n      "+e.loop+";\n    }\n  } else {  "),xn.enumPrototypes&&(n+="\n  var skipProto = typeof iterable == 'function';\n  "),xn.enumErrorProps&&(n+="\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n  ");var t=[];if(xn.enumPrototypes&&t.push('!(skipProto && index == "prototype")'),xn.enumErrorProps&&t.push('!(skipErrorProps && (index == "message" || index == "name"))'),e.useHas&&e.keys)n+="\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\n      length = ownProps ? ownProps.length : 0;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n",t.length&&(n+="    if ("+t.join(" && ")+") {\n  "),n+=e.loop+";    ",t.length&&(n+="\n    }"),n+="\n  }  ";else if(n+="\n  for (index in iterable) {\n",e.useHas&&t.push("hasOwnProperty.call(iterable, index)"),t.length&&(n+="    if ("+t.join(" && ")+") {\n  "),n+=e.loop+";    ",t.length&&(n+="\n    }"),n+="\n  }    ",xn.nonEnumShadows){for(n+="\n\n  if (iterable !== objectProto) {\n    var ctor = iterable.constructor,\n        isProto = iterable === (ctor && ctor.prototype),\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n        nonEnum = nonEnumProps[className];\n      ",k=0;k<7;k++)n+="\n    index = '"+e.shadowedProps[k]+"';\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))",e.useHas||(n+=" || (!nonEnum[index] && iterable[index] !== objectProto[index])"),n+=") {\n      "+e.loop+";\n    }      ";n+="\n  }    "}return(e.array||xn.nonEnumArgs)&&(n+="\n}"),n+=e.bottom+";\nreturn result"};bn||(c=function(){function e(){}return function(n){if(x(n)){e.prototype=n;var t=new e;e.prototype=null}return t||Y.Object()}}());var jn=mn?function(e,n){J.value=n,mn(e,"__bindData__",J)}:N;xn.argsClass||(h=function(e){return e&&"object"==typeof e&&"number"==typeof e.length&&pn.call(e,"callee")&&!gn.call(e,"callee")||!1});var En=hn||function(e){return e&&"object"==typeof e&&"number"==typeof e.length&&un.call(e)==R||!1},Pn=y({args:"object",init:"[]",top:"if (!(objectTypes[typeof object])) return result",loop:"result.push(index)"}),kn=vn?function(e){return x(e)?xn.enumPrototypes&&"function"==typeof e||xn.nonEnumArgs&&e.length&&h(e)?Pn(e):vn(e):[]}:Pn,On={args:"collection, callback, thisArg",top:"callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3)",array:"typeof length == 'number'",keys:kn,loop:"if (callback(iterable[index], index, collection) === false) return result"},Tn={args:"object, source, guard",top:"var args = arguments,\n    argsIndex = 0,\n    argsLength = typeof guard == 'number' ? 2 : args.length;\nwhile (++argsIndex < argsLength) {\n  iterable = args[argsIndex];\n  if (iterable && objectTypes[typeof iterable]) {",keys:kn,loop:"if (typeof result[index] == 'undefined') result[index] = iterable[index]",bottom:"  }\n}"},Nn={top:"if (!objectTypes[typeof iterable]) return result;\n"+On.top,array:!1},Sn=y(On),Cn=y(Tn,{top:Tn.top.replace(";",";\nif (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n  callback = args[--argsLength];\n}"),loop:"result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]"}),Mn=y(On,Nn,{useHas:!1}),Ln=y(On,Nn);_(/x/)&&(_=function(e){return"function"==typeof e&&un.call(e)==q});var Bn=fn?function(e){if(!e||un.call(e)!=X||!xn.argsClass&&h(e))return!1;var n=e.valueOf,t=m(n)&&(t=fn(n))&&fn(t);return t?e==t||fn(e)==t:b(e)}:b;s.assign=Cn,s.bind=O,s.compact=P,s.forEach=E,s.forIn=Mn,s.forOwn=Ln,s.keys=kn,s.merge=j,s.each=E,s.extend=Cn,s.clone=v,s.identity=T,s.isArguments=h,s.isArray=En,s.isEmpty=w,s.isFunction=_,s.isObject=x,s.isPlainObject=Bn,s.isString=A,s.noop=N,s.VERSION="2.4.1",Z&&en&&nn&&((en.exports=s)._=s)}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(e,n){function t(e,n){switch(e&&e.type||null){case"FeatureCollection":return e.features=e.features.map(r(t,n)),e;case"Feature":return e.geometry=t(e.geometry,n),e;case"Polygon":case"MultiPolygon":return o(e,n);default:return e}}function r(e,n){return function(t){return e(t,n)}}function o(e,n){return"Polygon"===e.type?e.coordinates=a(e.coordinates,n):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(r(a,n))),e}function a(e,n){n=!!n,e[0]=i(e[0],!n);for(var t=1;t<e.length;t++)e[t]=i(e[t],n);return e}function i(e,n){return s(e)===n?e:e.reverse()}function s(e){return u.ring(e)>=0}var u=e("geojson-area");n.exports=t},{"geojson-area":4}],4:[function(e,n){function t(e){if("Polygon"===e.type)return r(e.coordinates);if("MultiPolygon"===e.type){for(var n=0,t=0;t<e.coordinates.length;t++)n+=r(e.coordinates[t]);return n}return null}function r(e){var n=0;if(e&&e.length>0){n+=Math.abs(o(e[0]));for(var t=1;t<e.length;t++)n-=Math.abs(o(e[t]))}return n}function o(e){var n=0;if(e.length>2){for(var t,r,o=0;o<e.length-1;o++)t=e[o],r=e[o+1],n+=a(r[0]-t[0])*(2+Math.sin(a(t[1]))+Math.sin(a(r[1])));n=n*i.RADIUS*i.RADIUS/2}return n}function a(e){return e*Math.PI/180}var i=e("wgs84");n.exports.geometry=t,n.exports.ring=o},{wgs84:5}],5:[function(e,n){n.exports.RADIUS=6378137,n.exports.FLATTENING=1/298.257223563,n.exports.POLAR_RADIUS=6356752.3142},{}],6:[function(e,n){n.exports={building:!0,highway:{included_values:{services:!0,rest_area:!0,escape:!0}},natural:{excluded_values:{coastline:!0,cliff:!0,ridge:!0,arete:!0,tree_row:!0}},landuse:!0,waterway:{included_values:{riverbank:!0,dock:!0,boatyard:!0,dam:!0}},amenity:!0,leisure:!0,barrier:{included_values:{city_wall:!0,ditch:!0,hedge:!0,retaining_wall:!0,wall:!0,spikes:!0}},railway:{included_values:{station:!0,turntable:!0,roundhouse:!0,platform:!0}},area:!0,boundary:!0,man_made:{excluded_values:{cutline:!0,embankment:!0,pipeline:!0}},power:{included_values:{plant:!0,substation:!0,generator:!0,transformer:!0}},place:!0,shop:!0,aeroway:{excluded_values:{taxiway:!0}},tourism:!0,historic:!0,public_transport:!0,office:!0,"building:part":!0,military:!0,ruins:!0,"area:highway":!0,craft:!0,golf:!0}},{}]},{},[1])(1)});
/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3196";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__13835__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__13834 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__13834) : cljs.core.into_array.call(null, G__13834);
      }());
    };
    var G__13835 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__13836__i = 0, G__13836__a = new Array(arguments.length - 0);
        while (G__13836__i < G__13836__a.length) {
          G__13836__a[G__13836__i] = arguments[G__13836__i + 0];
          ++G__13836__i;
        }
        args = new cljs.core.IndexedSeq(G__13836__a, 0);
      }
      return G__13835__delegate.call(this, args);
    };
    G__13835.cljs$lang$maxFixedArity = 0;
    G__13835.cljs$lang$applyTo = function(arglist__13837) {
      var args = cljs.core.seq(arglist__13837);
      return G__13835__delegate(args);
    };
    G__13835.cljs$core$IFn$_invoke$arity$variadic = G__13835__delegate;
    return G__13835;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__13839 = x;
  return goog.isString(G__13839);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__13841 = x__$1;
    return goog.typeOf(G__13841);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4262__auto__ = ty;
    if (cljs.core.truth_(and__4262__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4262__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__13843 = obj;
    return goog.typeOf(G__13843);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__13845 = Symbol;
  return goog.typeOf(G__13845);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__13847 = arguments.length;
  switch(G__13847) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5159__auto___13849 = len;
  var i_13850 = 0;
  while (true) {
    if (i_13850 < n__5159__auto___13849) {
      new_arr[i_13850] = arr[i_13850];
      var G__13851 = i_13850 + 1;
      i_13850 = G__13851;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__13852 = i + 1;
      i = G__13852;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__13857 = arguments.length;
  switch(G__13857) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__13858 = cljs.core.aget;
  var G__13859 = array[i];
  var G__13860 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__13858, G__13859, G__13860) : cljs.core.apply.call(null, G__13858, G__13859, G__13860);
};
cljs.core.aget.cljs$lang$applyTo = function(seq13853) {
  var G__13854 = cljs.core.first(seq13853);
  var seq13853__$1 = cljs.core.next(seq13853);
  var G__13855 = cljs.core.first(seq13853__$1);
  var seq13853__$2 = cljs.core.next(seq13853__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__13854, G__13855, seq13853__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__13867 = arguments.length;
  switch(G__13867) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__13868 = cljs.core.aset;
  var G__13869 = array[idx];
  var G__13870 = idx2;
  var G__13871 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__13868, G__13869, G__13870, G__13871) : cljs.core.apply.call(null, G__13868, G__13869, G__13870, G__13871);
};
cljs.core.aset.cljs$lang$applyTo = function(seq13862) {
  var G__13863 = cljs.core.first(seq13862);
  var seq13862__$1 = cljs.core.next(seq13862);
  var G__13864 = cljs.core.first(seq13862__$1);
  var seq13862__$2 = cljs.core.next(seq13862__$1);
  var G__13865 = cljs.core.first(seq13862__$2);
  var seq13862__$3 = cljs.core.next(seq13862__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__13863, G__13864, G__13865, seq13862__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__13874 = arguments.length;
  switch(G__13874) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__13875 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__13876 = [];
  var G__13877 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__13875, G__13876, G__13877) : cljs.core.reduce.call(null, G__13875, G__13876, G__13877);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq13879) {
  var G__13880 = cljs.core.first(seq13879);
  var seq13879__$1 = cljs.core.next(seq13879);
  var G__13881 = cljs.core.first(seq13879__$1);
  var seq13879__$2 = cljs.core.next(seq13879__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__13880, G__13881, seq13879__$2);
};
cljs.core.Fn = function() {
  var obj13883 = {};
  return obj13883;
}();
cljs.core.IFn = function() {
  var obj13885 = {};
  return obj13885;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__13887 = arguments.length;
  switch(G__13887) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13889 = x__4910__auto__;
        return goog.typeOf(G__13889);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13891 = x__4910__auto__;
        return goog.typeOf(G__13891);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13893 = x__4910__auto__;
        return goog.typeOf(G__13893);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13895 = x__4910__auto__;
        return goog.typeOf(G__13895);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13897 = x__4910__auto__;
        return goog.typeOf(G__13897);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13899 = x__4910__auto__;
        return goog.typeOf(G__13899);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13901 = x__4910__auto__;
        return goog.typeOf(G__13901);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13903 = x__4910__auto__;
        return goog.typeOf(G__13903);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13905 = x__4910__auto__;
        return goog.typeOf(G__13905);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13907 = x__4910__auto__;
        return goog.typeOf(G__13907);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13909 = x__4910__auto__;
        return goog.typeOf(G__13909);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13911 = x__4910__auto__;
        return goog.typeOf(G__13911);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13913 = x__4910__auto__;
        return goog.typeOf(G__13913);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13915 = x__4910__auto__;
        return goog.typeOf(G__13915);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13917 = x__4910__auto__;
        return goog.typeOf(G__13917);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13919 = x__4910__auto__;
        return goog.typeOf(G__13919);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13921 = x__4910__auto__;
        return goog.typeOf(G__13921);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13923 = x__4910__auto__;
        return goog.typeOf(G__13923);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13925 = x__4910__auto__;
        return goog.typeOf(G__13925);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13927 = x__4910__auto__;
        return goog.typeOf(G__13927);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13929 = x__4910__auto__;
        return goog.typeOf(G__13929);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._invoke[function() {
        var G__13931 = x__4910__auto__;
        return goog.typeOf(G__13931);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._invoke["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj13934 = {};
  return obj13934;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4262__auto__ = value;
    if (and__4262__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4910__auto__ = value == null ? null : value;
    return function() {
      var or__4274__auto__ = cljs.core._clone[function() {
        var G__13938 = x__4910__auto__;
        return goog.typeOf(G__13938);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._clone["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj13940 = {};
  return obj13940;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._count[function() {
        var G__13944 = x__4910__auto__;
        return goog.typeOf(G__13944);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._count["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj13946 = {};
  return obj13946;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._empty[function() {
        var G__13950 = x__4910__auto__;
        return goog.typeOf(G__13950);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._empty["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj13952 = {};
  return obj13952;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._conj[function() {
        var G__13956 = x__4910__auto__;
        return goog.typeOf(G__13956);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._conj["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj13958 = {};
  return obj13958;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__13960 = arguments.length;
  switch(G__13960) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._nth[function() {
        var G__13962 = x__4910__auto__;
        return goog.typeOf(G__13962);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._nth["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._nth[function() {
        var G__13964 = x__4910__auto__;
        return goog.typeOf(G__13964);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._nth["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj13967 = {};
  return obj13967;
}();
cljs.core.ISeq = function() {
  var obj13969 = {};
  return obj13969;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._first[function() {
        var G__13973 = x__4910__auto__;
        return goog.typeOf(G__13973);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._first["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._rest[function() {
        var G__13977 = x__4910__auto__;
        return goog.typeOf(G__13977);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._rest["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj13979 = {};
  return obj13979;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._next[function() {
        var G__13983 = x__4910__auto__;
        return goog.typeOf(G__13983);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._next["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj13985 = {};
  return obj13985;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__13987 = arguments.length;
  switch(G__13987) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._lookup[function() {
        var G__13989 = x__4910__auto__;
        return goog.typeOf(G__13989);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._lookup["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._lookup[function() {
        var G__13991 = x__4910__auto__;
        return goog.typeOf(G__13991);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._lookup["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj13994 = {};
  return obj13994;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__13998 = x__4910__auto__;
        return goog.typeOf(G__13998);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._assoc[function() {
        var G__14002 = x__4910__auto__;
        return goog.typeOf(G__14002);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._assoc["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj14004 = {};
  return obj14004;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._dissoc[function() {
        var G__14008 = x__4910__auto__;
        return goog.typeOf(G__14008);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._dissoc["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj14010 = {};
  return obj14010;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._key[function() {
        var G__14014 = x__4910__auto__;
        return goog.typeOf(G__14014);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._key["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._val[function() {
        var G__14018 = x__4910__auto__;
        return goog.typeOf(G__14018);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._val["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj14020 = {};
  return obj14020;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._disjoin[function() {
        var G__14024 = x__4910__auto__;
        return goog.typeOf(G__14024);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._disjoin["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj14026 = {};
  return obj14026;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._peek[function() {
        var G__14030 = x__4910__auto__;
        return goog.typeOf(G__14030);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._peek["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._pop[function() {
        var G__14034 = x__4910__auto__;
        return goog.typeOf(G__14034);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._pop["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj14036 = {};
  return obj14036;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._assoc_n[function() {
        var G__14040 = x__4910__auto__;
        return goog.typeOf(G__14040);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj14042 = {};
  return obj14042;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._deref[function() {
        var G__14046 = x__4910__auto__;
        return goog.typeOf(G__14046);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._deref["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj14048 = {};
  return obj14048;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._deref_with_timeout[function() {
        var G__14052 = x__4910__auto__;
        return goog.typeOf(G__14052);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj14054 = {};
  return obj14054;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._meta[function() {
        var G__14058 = x__4910__auto__;
        return goog.typeOf(G__14058);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._meta["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj14060 = {};
  return obj14060;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._with_meta[function() {
        var G__14064 = x__4910__auto__;
        return goog.typeOf(G__14064);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._with_meta["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj14066 = {};
  return obj14066;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__14068 = arguments.length;
  switch(G__14068) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._reduce[function() {
        var G__14070 = x__4910__auto__;
        return goog.typeOf(G__14070);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._reduce["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._reduce[function() {
        var G__14072 = x__4910__auto__;
        return goog.typeOf(G__14072);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._reduce["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj14075 = {};
  return obj14075;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._kv_reduce[function() {
        var G__14079 = x__4910__auto__;
        return goog.typeOf(G__14079);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj14081 = {};
  return obj14081;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._equiv[function() {
        var G__14085 = x__4910__auto__;
        return goog.typeOf(G__14085);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._equiv["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj14087 = {};
  return obj14087;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._hash[function() {
        var G__14091 = x__4910__auto__;
        return goog.typeOf(G__14091);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._hash["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj14093 = {};
  return obj14093;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._seq[function() {
        var G__14097 = x__4910__auto__;
        return goog.typeOf(G__14097);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._seq["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj14099 = {};
  return obj14099;
}();
cljs.core.IList = function() {
  var obj14101 = {};
  return obj14101;
}();
cljs.core.IRecord = function() {
  var obj14103 = {};
  return obj14103;
}();
cljs.core.IReversible = function() {
  var obj14105 = {};
  return obj14105;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._rseq[function() {
        var G__14109 = x__4910__auto__;
        return goog.typeOf(G__14109);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._rseq["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj14111 = {};
  return obj14111;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._sorted_seq[function() {
        var G__14115 = x__4910__auto__;
        return goog.typeOf(G__14115);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._sorted_seq_from[function() {
        var G__14119 = x__4910__auto__;
        return goog.typeOf(G__14119);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._entry_key[function() {
        var G__14123 = x__4910__auto__;
        return goog.typeOf(G__14123);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._entry_key["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._comparator[function() {
        var G__14127 = x__4910__auto__;
        return goog.typeOf(G__14127);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._comparator["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj14129 = {};
  return obj14129;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4262__auto__ = writer;
    if (and__4262__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4910__auto__ = writer == null ? null : writer;
    return function() {
      var or__4274__auto__ = cljs.core._write[function() {
        var G__14133 = x__4910__auto__;
        return goog.typeOf(G__14133);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._write["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4262__auto__ = writer;
    if (and__4262__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4910__auto__ = writer == null ? null : writer;
    return function() {
      var or__4274__auto__ = cljs.core._flush[function() {
        var G__14137 = x__4910__auto__;
        return goog.typeOf(G__14137);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._flush["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj14139 = {};
  return obj14139;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._pr_writer[function() {
        var G__14143 = x__4910__auto__;
        return goog.typeOf(G__14143);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj14145 = {};
  return obj14145;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4262__auto__ = d;
    if (and__4262__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4910__auto__ = d == null ? null : d;
    return function() {
      var or__4274__auto__ = cljs.core._realized_QMARK_[function() {
        var G__14149 = x__4910__auto__;
        return goog.typeOf(G__14149);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj14151 = {};
  return obj14151;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._notify_watches[function() {
        var G__14155 = x__4910__auto__;
        return goog.typeOf(G__14155);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._add_watch[function() {
        var G__14159 = x__4910__auto__;
        return goog.typeOf(G__14159);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._add_watch["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core._remove_watch[function() {
        var G__14163 = x__4910__auto__;
        return goog.typeOf(G__14163);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj14165 = {};
  return obj14165;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._as_transient[function() {
        var G__14169 = x__4910__auto__;
        return goog.typeOf(G__14169);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._as_transient["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj14171 = {};
  return obj14171;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._conj_BANG_[function() {
        var G__14175 = x__4910__auto__;
        return goog.typeOf(G__14175);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._persistent_BANG_[function() {
        var G__14179 = x__4910__auto__;
        return goog.typeOf(G__14179);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj14181 = {};
  return obj14181;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._assoc_BANG_[function() {
        var G__14185 = x__4910__auto__;
        return goog.typeOf(G__14185);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj14187 = {};
  return obj14187;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__14191 = x__4910__auto__;
        return goog.typeOf(G__14191);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj14193 = {};
  return obj14193;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__14197 = x__4910__auto__;
        return goog.typeOf(G__14197);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._pop_BANG_[function() {
        var G__14201 = x__4910__auto__;
        return goog.typeOf(G__14201);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj14203 = {};
  return obj14203;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4262__auto__ = tcoll;
    if (and__4262__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4910__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4274__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__14207 = x__4910__auto__;
        return goog.typeOf(G__14207);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj14209 = {};
  return obj14209;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = cljs.core._compare[function() {
        var G__14213 = x__4910__auto__;
        return goog.typeOf(G__14213);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._compare["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj14215 = {};
  return obj14215;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._drop_first[function() {
        var G__14219 = x__4910__auto__;
        return goog.typeOf(G__14219);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._drop_first["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj14221 = {};
  return obj14221;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._chunked_first[function() {
        var G__14225 = x__4910__auto__;
        return goog.typeOf(G__14225);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._chunked_rest[function() {
        var G__14229 = x__4910__auto__;
        return goog.typeOf(G__14229);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj14231 = {};
  return obj14231;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._chunked_next[function() {
        var G__14235 = x__4910__auto__;
        return goog.typeOf(G__14235);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj14237 = {};
  return obj14237;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = cljs.core._name[function() {
        var G__14241 = x__4910__auto__;
        return goog.typeOf(G__14241);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._name["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = cljs.core._namespace[function() {
        var G__14245 = x__4910__auto__;
        return goog.typeOf(G__14245);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._namespace["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj14247 = {};
  return obj14247;
}();
cljs.core.IReset = function() {
  var obj14249 = {};
  return obj14249;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._reset_BANG_[function() {
        var G__14253 = x__4910__auto__;
        return goog.typeOf(G__14253);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj14255 = {};
  return obj14255;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__14257 = arguments.length;
  switch(G__14257) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._swap_BANG_[function() {
        var G__14259 = x__4910__auto__;
        return goog.typeOf(G__14259);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._swap_BANG_[function() {
        var G__14261 = x__4910__auto__;
        return goog.typeOf(G__14261);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._swap_BANG_[function() {
        var G__14263 = x__4910__auto__;
        return goog.typeOf(G__14263);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._swap_BANG_[function() {
        var G__14265 = x__4910__auto__;
        return goog.typeOf(G__14265);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj14268 = {};
  return obj14268;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4262__auto__ = o;
    if (and__4262__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4910__auto__ = o == null ? null : o;
    return function() {
      var or__4274__auto__ = cljs.core._vreset_BANG_[function() {
        var G__14272 = x__4910__auto__;
        return goog.typeOf(G__14272);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj14274 = {};
  return obj14274;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4262__auto__ = coll;
    if (and__4262__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4910__auto__ = coll == null ? null : coll;
    return function() {
      var or__4274__auto__ = cljs.core._iterator[function() {
        var G__14278 = x__4910__auto__;
        return goog.typeOf(G__14278);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._iterator["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__14281 = 4294967295;
  var G__14282 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__14281, G__14282) : Math.imul.call(null, G__14281, G__14282);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__14285 = a;
    var G__14286 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__14285, G__14286) : Math.imul.call(null, G__14285, G__14286);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__14287 = i + 2;
        var G__14288 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__14287;
        h1 = G__14288;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj14290 = {};
  return obj14290;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__14291 = i + 1;
          var G__14292 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__14291;
          hash = G__14292;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj14296 = {};
      return obj14296;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__14299 = o;
    if (G__14299) {
      var bit__4941__auto__ = G__14299.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4941__auto__ || G__14299.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__14300 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__14300) : Math.floor.call(null, G__14300);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = cljs.core.not(a.ns);
      if (and__4262__auto__) {
        return b.ns;
      } else {
        return and__4262__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__14307 = a.ns;
            var G__14308 = b.ns;
            return goog.array.defaultCompare(G__14307, G__14308);
          }();
          if (0 === nsc) {
            var G__14309 = a.name;
            var G__14310 = b.name;
            return goog.array.defaultCompare(G__14309, G__14310);
          } else {
            return nsc;
          }
        }
      } else {
        var G__14311 = a.name;
        var G__14312 = b.name;
        return goog.array.defaultCompare(G__14311, G__14312);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4690__auto__ = self__._hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__14314 = null;
  var G__14314__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__14314__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__14314 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14314__2.call(this, self__, coll);
      case 3:
        return G__14314__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14314.cljs$core$IFn$_invoke$arity$2 = G__14314__2;
  G__14314.cljs$core$IFn$_invoke$arity$3 = G__14314__3;
  return G__14314;
}();
cljs.core.Symbol.prototype.apply = function(self__, args14313) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14313)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__14316 = arguments.length;
  switch(G__14316) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__14363 = null;
  var G__14363__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__14363__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__14363__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__14363__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__14363__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__14363__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__14363__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__14363__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__14363__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__14363__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__14363__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__14363__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__14363__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__14363__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__14363__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__14363__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__14363__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__14363__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__14363__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__14363__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__14363__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__14363__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14319 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__14320 = a;
    var G__14321 = b;
    var G__14322 = c;
    var G__14323 = d;
    var G__14324 = e;
    var G__14325 = f;
    var G__14326 = g;
    var G__14327 = h;
    var G__14328 = i;
    var G__14329 = j;
    var G__14330 = k;
    var G__14331 = l;
    var G__14332 = m;
    var G__14333 = n;
    var G__14334 = o;
    var G__14335 = p;
    var G__14336 = q;
    var G__14337 = r;
    var G__14338 = s;
    var G__14339 = t;
    var G__14340 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14319, G__14320, G__14321, G__14322, G__14323, G__14324, G__14325, G__14326, G__14327, G__14328, G__14329, G__14330, G__14331, G__14332, G__14333, G__14334, G__14335, G__14336, G__14337, G__14338, G__14339, G__14340) : cljs.core.apply.call(null, G__14319, G__14320, G__14321, G__14322, G__14323, G__14324, G__14325, G__14326, G__14327, G__14328, G__14329, G__14330, G__14331, G__14332, G__14333, 
    G__14334, G__14335, G__14336, G__14337, G__14338, G__14339, G__14340);
  };
  G__14363 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__14363__1.call(this, self__);
      case 2:
        return G__14363__2.call(this, self__, a);
      case 3:
        return G__14363__3.call(this, self__, a, b);
      case 4:
        return G__14363__4.call(this, self__, a, b, c);
      case 5:
        return G__14363__5.call(this, self__, a, b, c, d);
      case 6:
        return G__14363__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__14363__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__14363__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__14363__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__14363__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__14363__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__14363__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__14363__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__14363__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__14363__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__14363__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__14363__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__14363__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__14363__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__14363__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__14363__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__14363__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14363.cljs$core$IFn$_invoke$arity$1 = G__14363__1;
  G__14363.cljs$core$IFn$_invoke$arity$2 = G__14363__2;
  G__14363.cljs$core$IFn$_invoke$arity$3 = G__14363__3;
  G__14363.cljs$core$IFn$_invoke$arity$4 = G__14363__4;
  G__14363.cljs$core$IFn$_invoke$arity$5 = G__14363__5;
  G__14363.cljs$core$IFn$_invoke$arity$6 = G__14363__6;
  G__14363.cljs$core$IFn$_invoke$arity$7 = G__14363__7;
  G__14363.cljs$core$IFn$_invoke$arity$8 = G__14363__8;
  G__14363.cljs$core$IFn$_invoke$arity$9 = G__14363__9;
  G__14363.cljs$core$IFn$_invoke$arity$10 = G__14363__10;
  G__14363.cljs$core$IFn$_invoke$arity$11 = G__14363__11;
  G__14363.cljs$core$IFn$_invoke$arity$12 = G__14363__12;
  G__14363.cljs$core$IFn$_invoke$arity$13 = G__14363__13;
  G__14363.cljs$core$IFn$_invoke$arity$14 = G__14363__14;
  G__14363.cljs$core$IFn$_invoke$arity$15 = G__14363__15;
  G__14363.cljs$core$IFn$_invoke$arity$16 = G__14363__16;
  G__14363.cljs$core$IFn$_invoke$arity$17 = G__14363__17;
  G__14363.cljs$core$IFn$_invoke$arity$18 = G__14363__18;
  G__14363.cljs$core$IFn$_invoke$arity$19 = G__14363__19;
  G__14363.cljs$core$IFn$_invoke$arity$20 = G__14363__20;
  G__14363.cljs$core$IFn$_invoke$arity$21 = G__14363__21;
  G__14363.cljs$core$IFn$_invoke$arity$22 = G__14363__22;
  return G__14363;
}();
cljs.core.Var.prototype.apply = function(self__, args14318) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14318)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__14341 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__14342 = a;
  var G__14343 = b;
  var G__14344 = c;
  var G__14345 = d;
  var G__14346 = e;
  var G__14347 = f;
  var G__14348 = g;
  var G__14349 = h;
  var G__14350 = i;
  var G__14351 = j;
  var G__14352 = k;
  var G__14353 = l;
  var G__14354 = m;
  var G__14355 = n;
  var G__14356 = o;
  var G__14357 = p;
  var G__14358 = q;
  var G__14359 = r;
  var G__14360 = s;
  var G__14361 = t;
  var G__14362 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14341, G__14342, G__14343, G__14344, G__14345, G__14346, G__14347, G__14348, G__14349, G__14350, G__14351, G__14352, G__14353, G__14354, G__14355, G__14356, G__14357, G__14358, G__14359, G__14360, G__14361, G__14362) : cljs.core.apply.call(null, G__14341, G__14342, G__14343, G__14344, G__14345, G__14346, G__14347, G__14348, G__14349, G__14350, G__14351, G__14352, G__14353, G__14354, G__14355, 
  G__14356, G__14357, G__14358, G__14359, G__14360, G__14361, G__14362);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__14365 = x;
  if (G__14365) {
    var bit__4948__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = bit__4948__auto__;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return G__14365.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__14365.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__14365);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__14365);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__14367 = value;
  if (G__14367) {
    var bit__4948__auto__ = G__14367.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4948__auto__ || G__14367.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__14367.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__14367);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__14367);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14369 = coll;
      if (G__14369) {
        var bit__4941__auto__ = G__14369.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4941__auto__ || G__14369.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14371 = coll;
      if (G__14371) {
        var bit__4941__auto__ = G__14371.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4941__auto__ || G__14371.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__14373 = coll;
      if (G__14373) {
        var bit__4941__auto__ = G__14373.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4941__auto__ || G__14373.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14375 = coll;
      if (G__14375) {
        var bit__4941__auto__ = G__14375.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4941__auto__ || G__14375.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__14380 = arguments.length;
  switch(G__14380) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__14382 = y;
        var G__14383 = cljs.core.first(more);
        var G__14384 = cljs.core.next(more);
        x = G__14382;
        y = G__14383;
        more = G__14384;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq14376) {
  var G__14377 = cljs.core.first(seq14376);
  var seq14376__$1 = cljs.core.next(seq14376);
  var G__14378 = cljs.core.first(seq14376__$1);
  var seq14376__$2 = cljs.core.next(seq14376__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__14377, G__14378, seq14376__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__14385 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__14385) : cljs.core.es6_iterator_seq.call(null, G__14385);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__14386 = n + 1;
      var G__14387 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__14388 = cljs.core.next(coll__$1);
      n = G__14386;
      hash_code = G__14387;
      coll__$1 = G__14388;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__14389 = n + 1;
      var G__14390 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__14391 = cljs.core.next(coll__$1);
      n = G__14389;
      hash_code = G__14390;
      coll__$1 = G__14391;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__14392 = this$__$1.valueOf();
  var G__14393 = other.valueOf();
  return goog.array.defaultCompare(G__14392, G__14393);
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__14394 = o;
  return goog.getUid(G__14394);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__14396 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__14396) : cljs.core.deref.call(null, G__14396);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__14398 = arguments.length;
  switch(G__14398) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__14399 = val;
          var G__14400 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14399, G__14400) : f.call(null, G__14399, G__14400);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__14406 = nval;
          var G__14407 = n + 1;
          val = G__14406;
          n = G__14407;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14401 = val__$1;
        var G__14402 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14401, G__14402) : f.call(null, G__14401, G__14402);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14408 = nval;
        var G__14409 = n + 1;
        val__$1 = G__14408;
        n = G__14409;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14403 = val__$1;
        var G__14404 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14403, G__14404) : f.call(null, G__14403, G__14404);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14410 = nval;
        var G__14411 = n + 1;
        val__$1 = G__14410;
        n = G__14411;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__14413 = arguments.length;
  switch(G__14413) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__14414 = val;
          var G__14415 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14414, G__14415) : f.call(null, G__14414, G__14415);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__14421 = nval;
          var G__14422 = n + 1;
          val = G__14421;
          n = G__14422;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14416 = val__$1;
        var G__14417 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14416, G__14417) : f.call(null, G__14416, G__14417);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14423 = nval;
        var G__14424 = n + 1;
        val__$1 = G__14423;
        n = G__14424;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14418 = val__$1;
        var G__14419 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14418, G__14419) : f.call(null, G__14418, G__14419);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14425 = nval;
        var G__14426 = n + 1;
        val__$1 = G__14425;
        n = G__14426;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__14428 = x;
  if (G__14428) {
    var bit__4948__auto__ = G__14428.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4948__auto__ || G__14428.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__14428.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__14428);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__14428);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__14430 = x;
  if (G__14430) {
    var bit__4948__auto__ = G__14430.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4948__auto__ || G__14430.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__14430.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__14430);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__14430);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__14431 = coll__$1;
  var G__14432 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__14431, G__14432) : cljs.core.equiv_sequential.call(null, G__14431, G__14432);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__14433 = o;
  var G__14434 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__14433, G__14434) : cljs.core.cons.call(null, G__14433, G__14434);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__14436 = arguments.length;
  switch(G__14436) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__14439 = arguments.length;
  switch(G__14439) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__14441 = coll__$1;
  var G__14442 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__14441, G__14442) : cljs.core.equiv_sequential.call(null, G__14441, G__14442);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__14443 = cljs.core.List.EMPTY;
  var G__14444 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__14443, G__14444) : cljs.core.with_meta.call(null, G__14443, G__14444);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__14445 = f;
  var G__14446 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__14445, G__14446) : cljs.core.seq_reduce.call(null, G__14445, G__14446);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__14447 = f;
  var G__14448 = start;
  var G__14449 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__14447, G__14448, G__14449) : cljs.core.seq_reduce.call(null, G__14447, G__14448, G__14449);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__14450 = o;
  var G__14451 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__14450, G__14451) : cljs.core.cons.call(null, G__14450, G__14451);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__14452 = sn;
      s = G__14452;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__14457 = arguments.length;
  switch(G__14457) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__14459 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__14460 = cljs.core.first(xs);
      var G__14461 = cljs.core.next(xs);
      coll = G__14459;
      x = G__14460;
      xs = G__14461;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq14453) {
  var G__14454 = cljs.core.first(seq14453);
  var seq14453__$1 = cljs.core.next(seq14453);
  var G__14455 = cljs.core.first(seq14453__$1);
  var seq14453__$2 = cljs.core.next(seq14453__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__14454, G__14455, seq14453__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__14462 = cljs.core.next(s);
      var G__14463 = acc + 1;
      s = G__14462;
      acc = G__14463;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__14465 = coll;
      if (G__14465) {
        var bit__4941__auto__ = G__14465.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4941__auto__ || G__14465.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__14467 = arguments.length;
  switch(G__14467) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__14469 = cljs.core.next(coll);
            var G__14470 = n - 1;
            coll = G__14469;
            n = G__14470;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__14471 = cljs.core.next(coll);
            var G__14472 = n - 1;
            var G__14473 = not_found;
            coll = G__14471;
            n = G__14472;
            not_found = G__14473;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__14475 = arguments.length;
  switch(G__14475) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__14476 = coll;
        if (G__14476) {
          var bit__4941__auto__ = G__14476.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4941__auto__ || G__14476.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__14477 = coll;
                if (G__14477) {
                  var bit__4948__auto__ = G__14477.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4948__auto__ || G__14477.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__14477.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14477);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14477);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__14478 = coll;
        if (G__14478) {
          var bit__4941__auto__ = G__14478.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4941__auto__ || G__14478.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__14479 = coll;
                if (G__14479) {
                  var bit__4948__auto__ = G__14479.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4948__auto__ || G__14479.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__14479.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14479);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14479);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__14481 = n__$1 - 1;
      var G__14482 = cljs.core.rest(xs);
      n__$1 = G__14481;
      xs = G__14482;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__14484 = arguments.length;
  switch(G__14484) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__14485 = o;
      if (G__14485) {
        var bit__4941__auto__ = G__14485.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4941__auto__ || G__14485.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__14486 = o;
      if (G__14486) {
        var bit__4941__auto__ = G__14486.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4941__auto__ || G__14486.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__14493 = arguments.length;
  switch(G__14493) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__14495 = ret;
      var G__14496 = cljs.core.first(kvs);
      var G__14497 = cljs.core.second(kvs);
      var G__14498 = cljs.core.nnext(kvs);
      coll = G__14495;
      k = G__14496;
      v = G__14497;
      kvs = G__14498;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq14488) {
  var G__14489 = cljs.core.first(seq14488);
  var seq14488__$1 = cljs.core.next(seq14488);
  var G__14490 = cljs.core.first(seq14488__$1);
  var seq14488__$2 = cljs.core.next(seq14488__$1);
  var G__14491 = cljs.core.first(seq14488__$2);
  var seq14488__$3 = cljs.core.next(seq14488__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__14489, G__14490, G__14491, seq14488__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__14503 = arguments.length;
  switch(G__14503) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__14505 = ret;
        var G__14506 = cljs.core.first(ks);
        var G__14507 = cljs.core.next(ks);
        coll = G__14505;
        k = G__14506;
        ks = G__14507;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq14499) {
  var G__14500 = cljs.core.first(seq14499);
  var seq14499__$1 = cljs.core.next(seq14499);
  var G__14501 = cljs.core.first(seq14499__$1);
  var seq14499__$2 = cljs.core.next(seq14499__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__14500, G__14501, seq14499__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4274__auto__ = function() {
    var G__14512 = f;
    return goog.isFunction(G__14512);
  }();
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    var G__14513 = f;
    if (G__14513) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto____$1 = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          return G__14513.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__14513.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__14513);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__14513);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__14979 = null;
  var G__14979__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__14979__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14515 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__14515) : self__.afn.call(null, G__14515);
  };
  var G__14979__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14516 = a;
    var G__14517 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__14516, G__14517) : self__.afn.call(null, G__14516, G__14517);
  };
  var G__14979__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14518 = a;
    var G__14519 = b;
    var G__14520 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__14518, G__14519, G__14520) : self__.afn.call(null, G__14518, G__14519, G__14520);
  };
  var G__14979__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14521 = a;
    var G__14522 = b;
    var G__14523 = c;
    var G__14524 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__14521, G__14522, G__14523, G__14524) : self__.afn.call(null, G__14521, G__14522, G__14523, G__14524);
  };
  var G__14979__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14525 = a;
    var G__14526 = b;
    var G__14527 = c;
    var G__14528 = d;
    var G__14529 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__14525, G__14526, G__14527, G__14528, G__14529) : self__.afn.call(null, G__14525, G__14526, G__14527, G__14528, G__14529);
  };
  var G__14979__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14530 = a;
    var G__14531 = b;
    var G__14532 = c;
    var G__14533 = d;
    var G__14534 = e;
    var G__14535 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__14530, G__14531, G__14532, G__14533, G__14534, G__14535) : self__.afn.call(null, G__14530, G__14531, G__14532, G__14533, G__14534, G__14535);
  };
  var G__14979__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14536 = a;
    var G__14537 = b;
    var G__14538 = c;
    var G__14539 = d;
    var G__14540 = e;
    var G__14541 = f;
    var G__14542 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__14536, G__14537, G__14538, G__14539, G__14540, G__14541, G__14542) : self__.afn.call(null, G__14536, G__14537, G__14538, G__14539, G__14540, G__14541, G__14542);
  };
  var G__14979__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14543 = a;
    var G__14544 = b;
    var G__14545 = c;
    var G__14546 = d;
    var G__14547 = e;
    var G__14548 = f;
    var G__14549 = g;
    var G__14550 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__14543, G__14544, G__14545, G__14546, G__14547, G__14548, G__14549, G__14550) : self__.afn.call(null, G__14543, G__14544, G__14545, G__14546, G__14547, G__14548, G__14549, G__14550);
  };
  var G__14979__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14551 = a;
    var G__14552 = b;
    var G__14553 = c;
    var G__14554 = d;
    var G__14555 = e;
    var G__14556 = f;
    var G__14557 = g;
    var G__14558 = h;
    var G__14559 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__14551, G__14552, G__14553, G__14554, G__14555, G__14556, G__14557, G__14558, G__14559) : self__.afn.call(null, G__14551, G__14552, G__14553, G__14554, G__14555, G__14556, G__14557, G__14558, G__14559);
  };
  var G__14979__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14560 = a;
    var G__14561 = b;
    var G__14562 = c;
    var G__14563 = d;
    var G__14564 = e;
    var G__14565 = f;
    var G__14566 = g;
    var G__14567 = h;
    var G__14568 = i;
    var G__14569 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__14560, G__14561, G__14562, G__14563, G__14564, G__14565, G__14566, G__14567, G__14568, G__14569) : self__.afn.call(null, G__14560, G__14561, G__14562, G__14563, G__14564, G__14565, G__14566, G__14567, G__14568, G__14569);
  };
  var G__14979__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14570 = a;
    var G__14571 = b;
    var G__14572 = c;
    var G__14573 = d;
    var G__14574 = e;
    var G__14575 = f;
    var G__14576 = g;
    var G__14577 = h;
    var G__14578 = i;
    var G__14579 = j;
    var G__14580 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__14570, G__14571, G__14572, G__14573, G__14574, G__14575, G__14576, G__14577, G__14578, G__14579, G__14580) : self__.afn.call(null, G__14570, G__14571, G__14572, G__14573, G__14574, G__14575, G__14576, G__14577, G__14578, G__14579, G__14580);
  };
  var G__14979__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14581 = a;
    var G__14582 = b;
    var G__14583 = c;
    var G__14584 = d;
    var G__14585 = e;
    var G__14586 = f;
    var G__14587 = g;
    var G__14588 = h;
    var G__14589 = i;
    var G__14590 = j;
    var G__14591 = k;
    var G__14592 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__14581, G__14582, G__14583, G__14584, G__14585, G__14586, G__14587, G__14588, G__14589, G__14590, G__14591, G__14592) : self__.afn.call(null, G__14581, G__14582, G__14583, G__14584, G__14585, G__14586, G__14587, G__14588, G__14589, G__14590, G__14591, G__14592);
  };
  var G__14979__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14593 = a;
    var G__14594 = b;
    var G__14595 = c;
    var G__14596 = d;
    var G__14597 = e;
    var G__14598 = f;
    var G__14599 = g;
    var G__14600 = h;
    var G__14601 = i;
    var G__14602 = j;
    var G__14603 = k;
    var G__14604 = l;
    var G__14605 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__14593, G__14594, G__14595, G__14596, G__14597, G__14598, G__14599, G__14600, G__14601, G__14602, G__14603, G__14604, G__14605) : self__.afn.call(null, G__14593, G__14594, G__14595, G__14596, G__14597, G__14598, G__14599, G__14600, G__14601, G__14602, G__14603, G__14604, G__14605);
  };
  var G__14979__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14606 = a;
    var G__14607 = b;
    var G__14608 = c;
    var G__14609 = d;
    var G__14610 = e;
    var G__14611 = f;
    var G__14612 = g;
    var G__14613 = h;
    var G__14614 = i;
    var G__14615 = j;
    var G__14616 = k;
    var G__14617 = l;
    var G__14618 = m;
    var G__14619 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__14606, G__14607, G__14608, G__14609, G__14610, G__14611, G__14612, G__14613, G__14614, G__14615, G__14616, G__14617, G__14618, G__14619) : self__.afn.call(null, G__14606, G__14607, G__14608, G__14609, G__14610, G__14611, G__14612, G__14613, G__14614, G__14615, G__14616, G__14617, G__14618, G__14619);
  };
  var G__14979__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14620 = a;
    var G__14621 = b;
    var G__14622 = c;
    var G__14623 = d;
    var G__14624 = e;
    var G__14625 = f;
    var G__14626 = g;
    var G__14627 = h;
    var G__14628 = i;
    var G__14629 = j;
    var G__14630 = k;
    var G__14631 = l;
    var G__14632 = m;
    var G__14633 = n;
    var G__14634 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__14620, G__14621, G__14622, G__14623, G__14624, G__14625, G__14626, G__14627, G__14628, G__14629, G__14630, G__14631, G__14632, G__14633, G__14634) : self__.afn.call(null, G__14620, G__14621, G__14622, G__14623, G__14624, G__14625, G__14626, G__14627, G__14628, G__14629, G__14630, G__14631, G__14632, G__14633, G__14634);
  };
  var G__14979__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14635 = a;
    var G__14636 = b;
    var G__14637 = c;
    var G__14638 = d;
    var G__14639 = e;
    var G__14640 = f;
    var G__14641 = g;
    var G__14642 = h;
    var G__14643 = i;
    var G__14644 = j;
    var G__14645 = k;
    var G__14646 = l;
    var G__14647 = m;
    var G__14648 = n;
    var G__14649 = o;
    var G__14650 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__14635, G__14636, G__14637, G__14638, G__14639, G__14640, G__14641, G__14642, G__14643, G__14644, G__14645, G__14646, G__14647, G__14648, G__14649, G__14650) : self__.afn.call(null, G__14635, G__14636, G__14637, G__14638, G__14639, G__14640, G__14641, G__14642, G__14643, G__14644, G__14645, G__14646, G__14647, G__14648, G__14649, G__14650);
  };
  var G__14979__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14651 = a;
    var G__14652 = b;
    var G__14653 = c;
    var G__14654 = d;
    var G__14655 = e;
    var G__14656 = f;
    var G__14657 = g;
    var G__14658 = h;
    var G__14659 = i;
    var G__14660 = j;
    var G__14661 = k;
    var G__14662 = l;
    var G__14663 = m;
    var G__14664 = n;
    var G__14665 = o;
    var G__14666 = p;
    var G__14667 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__14651, G__14652, G__14653, G__14654, G__14655, G__14656, G__14657, G__14658, G__14659, G__14660, G__14661, G__14662, G__14663, G__14664, G__14665, G__14666, G__14667) : self__.afn.call(null, G__14651, G__14652, G__14653, G__14654, G__14655, G__14656, G__14657, G__14658, G__14659, G__14660, G__14661, G__14662, G__14663, G__14664, G__14665, G__14666, G__14667);
  };
  var G__14979__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14668 = a;
    var G__14669 = b;
    var G__14670 = c;
    var G__14671 = d;
    var G__14672 = e;
    var G__14673 = f;
    var G__14674 = g;
    var G__14675 = h;
    var G__14676 = i;
    var G__14677 = j;
    var G__14678 = k;
    var G__14679 = l;
    var G__14680 = m;
    var G__14681 = n;
    var G__14682 = o;
    var G__14683 = p;
    var G__14684 = q;
    var G__14685 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__14668, G__14669, G__14670, G__14671, G__14672, G__14673, G__14674, G__14675, G__14676, G__14677, G__14678, G__14679, G__14680, G__14681, G__14682, G__14683, G__14684, G__14685) : self__.afn.call(null, G__14668, G__14669, G__14670, G__14671, G__14672, G__14673, G__14674, G__14675, G__14676, G__14677, G__14678, G__14679, G__14680, G__14681, G__14682, G__14683, G__14684, G__14685);
  };
  var G__14979__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14686 = a;
    var G__14687 = b;
    var G__14688 = c;
    var G__14689 = d;
    var G__14690 = e;
    var G__14691 = f;
    var G__14692 = g;
    var G__14693 = h;
    var G__14694 = i;
    var G__14695 = j;
    var G__14696 = k;
    var G__14697 = l;
    var G__14698 = m;
    var G__14699 = n;
    var G__14700 = o;
    var G__14701 = p;
    var G__14702 = q;
    var G__14703 = r;
    var G__14704 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__14686, G__14687, G__14688, G__14689, G__14690, G__14691, G__14692, G__14693, G__14694, G__14695, G__14696, G__14697, G__14698, G__14699, G__14700, G__14701, G__14702, G__14703, G__14704) : self__.afn.call(null, G__14686, G__14687, G__14688, G__14689, G__14690, G__14691, G__14692, G__14693, G__14694, G__14695, G__14696, G__14697, G__14698, G__14699, G__14700, G__14701, G__14702, G__14703, G__14704);
  };
  var G__14979__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14705 = a;
    var G__14706 = b;
    var G__14707 = c;
    var G__14708 = d;
    var G__14709 = e;
    var G__14710 = f;
    var G__14711 = g;
    var G__14712 = h;
    var G__14713 = i;
    var G__14714 = j;
    var G__14715 = k;
    var G__14716 = l;
    var G__14717 = m;
    var G__14718 = n;
    var G__14719 = o;
    var G__14720 = p;
    var G__14721 = q;
    var G__14722 = r;
    var G__14723 = s;
    var G__14724 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__14705, G__14706, G__14707, G__14708, G__14709, G__14710, G__14711, G__14712, G__14713, G__14714, G__14715, G__14716, G__14717, G__14718, G__14719, G__14720, G__14721, G__14722, G__14723, G__14724) : self__.afn.call(null, G__14705, G__14706, G__14707, G__14708, G__14709, G__14710, G__14711, G__14712, G__14713, G__14714, G__14715, G__14716, G__14717, G__14718, G__14719, G__14720, G__14721, G__14722, 
    G__14723, G__14724);
  };
  var G__14979__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14725 = self__.afn;
    var G__14726 = a;
    var G__14727 = b;
    var G__14728 = c;
    var G__14729 = d;
    var G__14730 = e;
    var G__14731 = f;
    var G__14732 = g;
    var G__14733 = h;
    var G__14734 = i;
    var G__14735 = j;
    var G__14736 = k;
    var G__14737 = l;
    var G__14738 = m;
    var G__14739 = n;
    var G__14740 = o;
    var G__14741 = p;
    var G__14742 = q;
    var G__14743 = r;
    var G__14744 = s;
    var G__14745 = t;
    var G__14746 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14725, G__14726, G__14727, G__14728, G__14729, G__14730, G__14731, G__14732, G__14733, G__14734, G__14735, G__14736, G__14737, G__14738, G__14739, G__14740, G__14741, G__14742, G__14743, G__14744, G__14745, G__14746) : cljs.core.apply.call(null, G__14725, G__14726, G__14727, G__14728, G__14729, G__14730, G__14731, G__14732, G__14733, G__14734, G__14735, G__14736, G__14737, G__14738, G__14739, 
    G__14740, G__14741, G__14742, G__14743, G__14744, G__14745, G__14746);
  };
  G__14979 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__14979__1.call(this, self__);
      case 2:
        return G__14979__2.call(this, self__, a);
      case 3:
        return G__14979__3.call(this, self__, a, b);
      case 4:
        return G__14979__4.call(this, self__, a, b, c);
      case 5:
        return G__14979__5.call(this, self__, a, b, c, d);
      case 6:
        return G__14979__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__14979__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__14979__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__14979__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__14979__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__14979__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__14979__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__14979__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__14979__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__14979__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__14979__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__14979__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__14979__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__14979__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__14979__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__14979__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__14979__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14979.cljs$core$IFn$_invoke$arity$1 = G__14979__1;
  G__14979.cljs$core$IFn$_invoke$arity$2 = G__14979__2;
  G__14979.cljs$core$IFn$_invoke$arity$3 = G__14979__3;
  G__14979.cljs$core$IFn$_invoke$arity$4 = G__14979__4;
  G__14979.cljs$core$IFn$_invoke$arity$5 = G__14979__5;
  G__14979.cljs$core$IFn$_invoke$arity$6 = G__14979__6;
  G__14979.cljs$core$IFn$_invoke$arity$7 = G__14979__7;
  G__14979.cljs$core$IFn$_invoke$arity$8 = G__14979__8;
  G__14979.cljs$core$IFn$_invoke$arity$9 = G__14979__9;
  G__14979.cljs$core$IFn$_invoke$arity$10 = G__14979__10;
  G__14979.cljs$core$IFn$_invoke$arity$11 = G__14979__11;
  G__14979.cljs$core$IFn$_invoke$arity$12 = G__14979__12;
  G__14979.cljs$core$IFn$_invoke$arity$13 = G__14979__13;
  G__14979.cljs$core$IFn$_invoke$arity$14 = G__14979__14;
  G__14979.cljs$core$IFn$_invoke$arity$15 = G__14979__15;
  G__14979.cljs$core$IFn$_invoke$arity$16 = G__14979__16;
  G__14979.cljs$core$IFn$_invoke$arity$17 = G__14979__17;
  G__14979.cljs$core$IFn$_invoke$arity$18 = G__14979__18;
  G__14979.cljs$core$IFn$_invoke$arity$19 = G__14979__19;
  G__14979.cljs$core$IFn$_invoke$arity$20 = G__14979__20;
  G__14979.cljs$core$IFn$_invoke$arity$21 = G__14979__21;
  G__14979.cljs$core$IFn$_invoke$arity$22 = G__14979__22;
  return G__14979;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args14514) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14514)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__14747 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__14747) : self__.afn.call(null, G__14747);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__14748 = a;
  var G__14749 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__14748, G__14749) : self__.afn.call(null, G__14748, G__14749);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__14750 = a;
  var G__14751 = b;
  var G__14752 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__14750, G__14751, G__14752) : self__.afn.call(null, G__14750, G__14751, G__14752);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__14753 = a;
  var G__14754 = b;
  var G__14755 = c;
  var G__14756 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__14753, G__14754, G__14755, G__14756) : self__.afn.call(null, G__14753, G__14754, G__14755, G__14756);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__14757 = a;
  var G__14758 = b;
  var G__14759 = c;
  var G__14760 = d;
  var G__14761 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__14757, G__14758, G__14759, G__14760, G__14761) : self__.afn.call(null, G__14757, G__14758, G__14759, G__14760, G__14761);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__14762 = a;
  var G__14763 = b;
  var G__14764 = c;
  var G__14765 = d;
  var G__14766 = e;
  var G__14767 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__14762, G__14763, G__14764, G__14765, G__14766, G__14767) : self__.afn.call(null, G__14762, G__14763, G__14764, G__14765, G__14766, G__14767);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__14768 = a;
  var G__14769 = b;
  var G__14770 = c;
  var G__14771 = d;
  var G__14772 = e;
  var G__14773 = f;
  var G__14774 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__14768, G__14769, G__14770, G__14771, G__14772, G__14773, G__14774) : self__.afn.call(null, G__14768, G__14769, G__14770, G__14771, G__14772, G__14773, G__14774);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__14775 = a;
  var G__14776 = b;
  var G__14777 = c;
  var G__14778 = d;
  var G__14779 = e;
  var G__14780 = f;
  var G__14781 = g;
  var G__14782 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__14775, G__14776, G__14777, G__14778, G__14779, G__14780, G__14781, G__14782) : self__.afn.call(null, G__14775, G__14776, G__14777, G__14778, G__14779, G__14780, G__14781, G__14782);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__14783 = a;
  var G__14784 = b;
  var G__14785 = c;
  var G__14786 = d;
  var G__14787 = e;
  var G__14788 = f;
  var G__14789 = g;
  var G__14790 = h;
  var G__14791 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__14783, G__14784, G__14785, G__14786, G__14787, G__14788, G__14789, G__14790, G__14791) : self__.afn.call(null, G__14783, G__14784, G__14785, G__14786, G__14787, G__14788, G__14789, G__14790, G__14791);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__14792 = a;
  var G__14793 = b;
  var G__14794 = c;
  var G__14795 = d;
  var G__14796 = e;
  var G__14797 = f;
  var G__14798 = g;
  var G__14799 = h;
  var G__14800 = i;
  var G__14801 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__14792, G__14793, G__14794, G__14795, G__14796, G__14797, G__14798, G__14799, G__14800, G__14801) : self__.afn.call(null, G__14792, G__14793, G__14794, G__14795, G__14796, G__14797, G__14798, G__14799, G__14800, G__14801);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__14802 = a;
  var G__14803 = b;
  var G__14804 = c;
  var G__14805 = d;
  var G__14806 = e;
  var G__14807 = f;
  var G__14808 = g;
  var G__14809 = h;
  var G__14810 = i;
  var G__14811 = j;
  var G__14812 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__14802, G__14803, G__14804, G__14805, G__14806, G__14807, G__14808, G__14809, G__14810, G__14811, G__14812) : self__.afn.call(null, G__14802, G__14803, G__14804, G__14805, G__14806, G__14807, G__14808, G__14809, G__14810, G__14811, G__14812);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__14813 = a;
  var G__14814 = b;
  var G__14815 = c;
  var G__14816 = d;
  var G__14817 = e;
  var G__14818 = f;
  var G__14819 = g;
  var G__14820 = h;
  var G__14821 = i;
  var G__14822 = j;
  var G__14823 = k;
  var G__14824 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__14813, G__14814, G__14815, G__14816, G__14817, G__14818, G__14819, G__14820, G__14821, G__14822, G__14823, G__14824) : self__.afn.call(null, G__14813, G__14814, G__14815, G__14816, G__14817, G__14818, G__14819, G__14820, G__14821, G__14822, G__14823, G__14824);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__14825 = a;
  var G__14826 = b;
  var G__14827 = c;
  var G__14828 = d;
  var G__14829 = e;
  var G__14830 = f;
  var G__14831 = g;
  var G__14832 = h;
  var G__14833 = i;
  var G__14834 = j;
  var G__14835 = k;
  var G__14836 = l;
  var G__14837 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__14825, G__14826, G__14827, G__14828, G__14829, G__14830, G__14831, G__14832, G__14833, G__14834, G__14835, G__14836, G__14837) : self__.afn.call(null, G__14825, G__14826, G__14827, G__14828, G__14829, G__14830, G__14831, G__14832, G__14833, G__14834, G__14835, G__14836, G__14837);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__14838 = a;
  var G__14839 = b;
  var G__14840 = c;
  var G__14841 = d;
  var G__14842 = e;
  var G__14843 = f;
  var G__14844 = g;
  var G__14845 = h;
  var G__14846 = i;
  var G__14847 = j;
  var G__14848 = k;
  var G__14849 = l;
  var G__14850 = m;
  var G__14851 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__14838, G__14839, G__14840, G__14841, G__14842, G__14843, G__14844, G__14845, G__14846, G__14847, G__14848, G__14849, G__14850, G__14851) : self__.afn.call(null, G__14838, G__14839, G__14840, G__14841, G__14842, G__14843, G__14844, G__14845, G__14846, G__14847, G__14848, G__14849, G__14850, G__14851);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__14852 = a;
  var G__14853 = b;
  var G__14854 = c;
  var G__14855 = d;
  var G__14856 = e;
  var G__14857 = f;
  var G__14858 = g;
  var G__14859 = h;
  var G__14860 = i;
  var G__14861 = j;
  var G__14862 = k;
  var G__14863 = l;
  var G__14864 = m;
  var G__14865 = n;
  var G__14866 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__14852, G__14853, G__14854, G__14855, G__14856, G__14857, G__14858, G__14859, G__14860, G__14861, G__14862, G__14863, G__14864, G__14865, G__14866) : self__.afn.call(null, G__14852, G__14853, G__14854, G__14855, G__14856, G__14857, G__14858, G__14859, G__14860, G__14861, G__14862, G__14863, G__14864, G__14865, G__14866);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__14867 = a;
  var G__14868 = b;
  var G__14869 = c;
  var G__14870 = d;
  var G__14871 = e;
  var G__14872 = f;
  var G__14873 = g;
  var G__14874 = h;
  var G__14875 = i;
  var G__14876 = j;
  var G__14877 = k;
  var G__14878 = l;
  var G__14879 = m;
  var G__14880 = n;
  var G__14881 = o;
  var G__14882 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__14867, G__14868, G__14869, G__14870, G__14871, G__14872, G__14873, G__14874, G__14875, G__14876, G__14877, G__14878, G__14879, G__14880, G__14881, G__14882) : self__.afn.call(null, G__14867, G__14868, G__14869, G__14870, G__14871, G__14872, G__14873, G__14874, G__14875, G__14876, G__14877, G__14878, G__14879, G__14880, G__14881, G__14882);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__14883 = a;
  var G__14884 = b;
  var G__14885 = c;
  var G__14886 = d;
  var G__14887 = e;
  var G__14888 = f;
  var G__14889 = g;
  var G__14890 = h;
  var G__14891 = i;
  var G__14892 = j;
  var G__14893 = k;
  var G__14894 = l;
  var G__14895 = m;
  var G__14896 = n;
  var G__14897 = o;
  var G__14898 = p;
  var G__14899 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__14883, G__14884, G__14885, G__14886, G__14887, G__14888, G__14889, G__14890, G__14891, G__14892, G__14893, G__14894, G__14895, G__14896, G__14897, G__14898, G__14899) : self__.afn.call(null, G__14883, G__14884, G__14885, G__14886, G__14887, G__14888, G__14889, G__14890, G__14891, G__14892, G__14893, G__14894, G__14895, G__14896, G__14897, G__14898, G__14899);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__14900 = a;
  var G__14901 = b;
  var G__14902 = c;
  var G__14903 = d;
  var G__14904 = e;
  var G__14905 = f;
  var G__14906 = g;
  var G__14907 = h;
  var G__14908 = i;
  var G__14909 = j;
  var G__14910 = k;
  var G__14911 = l;
  var G__14912 = m;
  var G__14913 = n;
  var G__14914 = o;
  var G__14915 = p;
  var G__14916 = q;
  var G__14917 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__14900, G__14901, G__14902, G__14903, G__14904, G__14905, G__14906, G__14907, G__14908, G__14909, G__14910, G__14911, G__14912, G__14913, G__14914, G__14915, G__14916, G__14917) : self__.afn.call(null, G__14900, G__14901, G__14902, G__14903, G__14904, G__14905, G__14906, G__14907, G__14908, G__14909, G__14910, G__14911, G__14912, G__14913, G__14914, G__14915, G__14916, G__14917);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__14918 = a;
  var G__14919 = b;
  var G__14920 = c;
  var G__14921 = d;
  var G__14922 = e;
  var G__14923 = f;
  var G__14924 = g;
  var G__14925 = h;
  var G__14926 = i;
  var G__14927 = j;
  var G__14928 = k;
  var G__14929 = l;
  var G__14930 = m;
  var G__14931 = n;
  var G__14932 = o;
  var G__14933 = p;
  var G__14934 = q;
  var G__14935 = r;
  var G__14936 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__14918, G__14919, G__14920, G__14921, G__14922, G__14923, G__14924, G__14925, G__14926, G__14927, G__14928, G__14929, G__14930, G__14931, G__14932, G__14933, G__14934, G__14935, G__14936) : self__.afn.call(null, G__14918, G__14919, G__14920, G__14921, G__14922, G__14923, G__14924, G__14925, G__14926, G__14927, G__14928, G__14929, G__14930, G__14931, G__14932, G__14933, G__14934, G__14935, G__14936);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__14937 = a;
  var G__14938 = b;
  var G__14939 = c;
  var G__14940 = d;
  var G__14941 = e;
  var G__14942 = f;
  var G__14943 = g;
  var G__14944 = h;
  var G__14945 = i;
  var G__14946 = j;
  var G__14947 = k;
  var G__14948 = l;
  var G__14949 = m;
  var G__14950 = n;
  var G__14951 = o;
  var G__14952 = p;
  var G__14953 = q;
  var G__14954 = r;
  var G__14955 = s;
  var G__14956 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__14937, G__14938, G__14939, G__14940, G__14941, G__14942, G__14943, G__14944, G__14945, G__14946, G__14947, G__14948, G__14949, G__14950, G__14951, G__14952, G__14953, G__14954, G__14955, G__14956) : self__.afn.call(null, G__14937, G__14938, G__14939, G__14940, G__14941, G__14942, G__14943, G__14944, G__14945, G__14946, G__14947, G__14948, G__14949, G__14950, G__14951, G__14952, G__14953, G__14954, G__14955, 
  G__14956);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__14957 = self__.afn;
  var G__14958 = a;
  var G__14959 = b;
  var G__14960 = c;
  var G__14961 = d;
  var G__14962 = e;
  var G__14963 = f;
  var G__14964 = g;
  var G__14965 = h;
  var G__14966 = i;
  var G__14967 = j;
  var G__14968 = k;
  var G__14969 = l;
  var G__14970 = m;
  var G__14971 = n;
  var G__14972 = o;
  var G__14973 = p;
  var G__14974 = q;
  var G__14975 = r;
  var G__14976 = s;
  var G__14977 = t;
  var G__14978 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14957, G__14958, G__14959, G__14960, G__14961, G__14962, G__14963, G__14964, G__14965, G__14966, G__14967, G__14968, G__14969, G__14970, G__14971, G__14972, G__14973, G__14974, G__14975, G__14976, G__14977, G__14978) : cljs.core.apply.call(null, G__14957, G__14958, G__14959, G__14960, G__14961, G__14962, G__14963, G__14964, G__14965, G__14966, G__14967, G__14968, G__14969, G__14970, G__14971, 
  G__14972, G__14973, G__14974, G__14975, G__14976, G__14977, G__14978);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__14983 = o;
    if (G__14983) {
      var bit__4948__auto__ = G__14983.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4948__auto__ || G__14983.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14983.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__14983);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__14983);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4262__auto__ = !(o == null);
    if (and__4262__auto__) {
      var G__14987 = o;
      if (G__14987) {
        var bit__4948__auto__ = G__14987.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4948__auto__ || G__14987.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__14987.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__14987);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__14987);
      }
    } else {
      return and__4262__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__14992 = arguments.length;
  switch(G__14992) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__14994 = ret;
        var G__14995 = cljs.core.first(ks);
        var G__14996 = cljs.core.next(ks);
        coll = G__14994;
        k = G__14995;
        ks = G__14996;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq14988) {
  var G__14989 = cljs.core.first(seq14988);
  var seq14988__$1 = cljs.core.next(seq14988);
  var G__14990 = cljs.core.first(seq14988__$1);
  var seq14988__$2 = cljs.core.next(seq14988__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__14989, G__14990, seq14988__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14998 = x;
    if (G__14998) {
      var bit__4948__auto__ = G__14998.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4948__auto__ || G__14998.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__14998.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__14998);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__14998);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15000 = x;
    if (G__15000) {
      var bit__4948__auto__ = G__15000.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4948__auto__ || G__15000.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__15000.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__15000);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__15000);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__15002 = x;
  if (G__15002) {
    var bit__4948__auto__ = G__15002.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4948__auto__ || G__15002.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__15002.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__15002);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__15002);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__15004 = x;
  if (G__15004) {
    var bit__4948__auto__ = G__15004.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4948__auto__ || G__15004.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__15004.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__15004);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__15004);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__15006 = x;
  if (G__15006) {
    var bit__4948__auto__ = G__15006.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4948__auto__ || G__15006.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__15006.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__15006);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__15006);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__15008 = x;
  if (G__15008) {
    var bit__4948__auto__ = G__15008.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4948__auto__ || G__15008.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__15008.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__15008);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__15008);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__15010 = x;
    if (G__15010) {
      var bit__4948__auto__ = G__15010.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4948__auto__ || G__15010.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__15010.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__15010);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__15010);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__15012 = x;
  if (G__15012) {
    var bit__4948__auto__ = G__15012.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4948__auto__ || G__15012.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__15012.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__15012);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__15012);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__15014 = x;
  if (G__15014) {
    var bit__4941__auto__ = G__15014.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4941__auto__ || G__15014.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__15017 = arguments.length;
  switch(G__15017) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5326__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj15019 = {};
  return obj15019;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__15020 = goog.object.create;
  var G__15021 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__15020, G__15021) : cljs.core.apply.call(null, G__15020, G__15021);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq15015) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq15015));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__15025_15027 = obj;
  var G__15026_15028 = function(G__15025_15027, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__15025_15027, keys);
  goog.object.forEach(G__15025_15027, G__15026_15028);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15029 = i__$1 + 1;
      var G__15030 = j__$1 + 1;
      var G__15031 = len__$1 - 1;
      i__$1 = G__15029;
      j__$1 = G__15030;
      len__$1 = G__15031;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__15032 = i__$1 - 1;
      var G__15033 = j__$1 - 1;
      var G__15034 = len__$1 - 1;
      i__$1 = G__15032;
      j__$1 = G__15033;
      len__$1 = G__15034;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj15036 = {};
  return obj15036;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__15038 = s;
    if (G__15038) {
      var bit__4948__auto__ = G__15038.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4948__auto__ || G__15038.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__15038.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__15038);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__15038);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__15040 = s;
  if (G__15040) {
    var bit__4948__auto__ = G__15040.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4948__auto__ || G__15040.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__15040.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__15040);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__15040);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4274__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4274__auto__) {
    return or__4274__auto__;
  } else {
    var G__15044 = f;
    if (G__15044) {
      var bit__4948__auto__ = G__15044.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4948__auto__ || G__15044.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__15044.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__15044);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__15044);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__15057 = n;
    return isNaN(G__15057);
  }()) && !(n === Infinity) && function() {
    var G__15058 = n;
    return parseFloat(G__15058);
  }() === function() {
    var G__15059 = n;
    var G__15060 = 10;
    return parseInt(G__15059, G__15060);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__15065 = arguments.length;
  switch(G__15065) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__15067 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__15068 = etc;
          s = G__15067;
          xs = G__15068;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq15061) {
  var G__15062 = cljs.core.first(seq15061);
  var seq15061__$1 = cljs.core.next(seq15061);
  var G__15063 = cljs.core.first(seq15061__$1);
  var seq15061__$2 = cljs.core.next(seq15061__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__15062, G__15063, seq15061__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__15072 = x;
            if (G__15072) {
              var bit__4941__auto__ = G__15072.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4941__auto__ || G__15072.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__15073 = x;
            var G__15074 = y;
            return goog.array.defaultCompare(G__15073, G__15074);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__15076 = arguments.length;
  switch(G__15076) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return-1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__15078 = xs;
      var G__15079 = ys;
      var G__15080 = len;
      var G__15081 = n + 1;
      xs = G__15078;
      ys = G__15079;
      len = G__15080;
      n = G__15081;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__15086 = x;
        var G__15087 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15086, G__15087) : f.call(null, G__15086, G__15087);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__15088 = y;
            var G__15089 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15088, G__15089) : f.call(null, G__15088, G__15089);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__15091 = arguments.length;
  switch(G__15091) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__15092 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__15092) : cljs.core.to_array.call(null, G__15092);
    }();
    var G__15093_15096 = a;
    var G__15094_15097 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__15093_15096, G__15094_15097);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__15099 = arguments.length;
  switch(G__15099) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__15100 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__15100) : keyfn.call(null, G__15100);
    }(), function() {
      var G__15101 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__15101) : keyfn.call(null, G__15101);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__15104 = arguments.length;
  switch(G__15104) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4124__auto__ = cljs.core.seq(coll);
  if (temp__4124__auto__) {
    var s = temp__4124__auto__;
    var G__15105 = f;
    var G__15106 = cljs.core.first(s);
    var G__15107 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__15105, G__15106, G__15107) : cljs.core.reduce.call(null, G__15105, G__15106, G__15107);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__15108 = val__$1;
        var G__15109 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15108, G__15109) : f.call(null, G__15108, G__15109);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__15111 = nval;
        var G__15112 = cljs.core.next(coll__$1);
        val__$1 = G__15111;
        coll__$1 = G__15112;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__15116 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__15116) : cljs.core.to_array.call(null, G__15116);
  }();
  var G__15117_15119 = a;
  goog.array.shuffle(G__15117_15119);
  var G__15118 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__15118) : cljs.core.vec.call(null, G__15118);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__15121 = arguments.length;
  switch(G__15121) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__15122 = coll;
    if (G__15122) {
      var bit__4941__auto__ = G__15122.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4941__auto__ || G__15122.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__15123 = coll;
    if (G__15123) {
      var bit__4941__auto__ = G__15123.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4941__auto__ || G__15123.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__15126 = arguments.length;
  switch(G__15126) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__15131 = null;
    var G__15131__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__15131__1 = function(x) {
      var G__15127 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__15127) : cf.call(null, G__15127);
    };
    var G__15131__2 = function(x, y) {
      var G__15128 = x;
      var G__15129 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15128, G__15129) : f.call(null, G__15128, G__15129);
    };
    G__15131 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__15131__0.call(this);
        case 1:
          return G__15131__1.call(this, x);
        case 2:
          return G__15131__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15131.cljs$core$IFn$_invoke$arity$0 = G__15131__0;
    G__15131.cljs$core$IFn$_invoke$arity$1 = G__15131__1;
    G__15131.cljs$core$IFn$_invoke$arity$2 = G__15131__2;
    return G__15131;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__15133 = arguments.length;
  switch(G__15133) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__15134 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__15134) : xform.call(null, G__15134);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__15135 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__15135) : f__$1.call(null, G__15135);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__15141 = arguments.length;
  switch(G__15141) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq15137) {
  var G__15138 = cljs.core.first(seq15137);
  var seq15137__$1 = cljs.core.next(seq15137);
  var G__15139 = cljs.core.first(seq15137__$1);
  var seq15137__$2 = cljs.core.next(seq15137__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__15138, G__15139, seq15137__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__15147 = arguments.length;
  switch(G__15147) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq15143) {
  var G__15144 = cljs.core.first(seq15143);
  var seq15143__$1 = cljs.core.next(seq15143);
  var G__15145 = cljs.core.first(seq15143__$1);
  var seq15143__$2 = cljs.core.next(seq15143__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__15144, G__15145, seq15143__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__15153 = arguments.length;
  switch(G__15153) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq15149) {
  var G__15150 = cljs.core.first(seq15149);
  var seq15149__$1 = cljs.core.next(seq15149);
  var G__15151 = cljs.core.first(seq15149__$1);
  var seq15149__$2 = cljs.core.next(seq15149__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__15150, G__15151, seq15149__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__15159 = arguments.length;
  switch(G__15159) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq15155) {
  var G__15156 = cljs.core.first(seq15155);
  var seq15155__$1 = cljs.core.next(seq15155);
  var G__15157 = cljs.core.first(seq15155__$1);
  var seq15155__$2 = cljs.core.next(seq15155__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__15156, G__15157, seq15155__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__15165 = arguments.length;
  switch(G__15165) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__15167 = y;
        var G__15168 = cljs.core.first(more);
        var G__15169 = cljs.core.next(more);
        x = G__15167;
        y = G__15168;
        more = G__15169;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq15161) {
  var G__15162 = cljs.core.first(seq15161);
  var seq15161__$1 = cljs.core.next(seq15161);
  var G__15163 = cljs.core.first(seq15161__$1);
  var seq15161__$2 = cljs.core.next(seq15161__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__15162, G__15163, seq15161__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__15174 = arguments.length;
  switch(G__15174) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__15176 = y;
        var G__15177 = cljs.core.first(more);
        var G__15178 = cljs.core.next(more);
        x = G__15176;
        y = G__15177;
        more = G__15178;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq15170) {
  var G__15171 = cljs.core.first(seq15170);
  var seq15170__$1 = cljs.core.next(seq15170);
  var G__15172 = cljs.core.first(seq15170__$1);
  var seq15170__$2 = cljs.core.next(seq15170__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15171, G__15172, seq15170__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__15183 = arguments.length;
  switch(G__15183) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__15185 = y;
        var G__15186 = cljs.core.first(more);
        var G__15187 = cljs.core.next(more);
        x = G__15185;
        y = G__15186;
        more = G__15187;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq15179) {
  var G__15180 = cljs.core.first(seq15179);
  var seq15179__$1 = cljs.core.next(seq15179);
  var G__15181 = cljs.core.first(seq15179__$1);
  var seq15179__$2 = cljs.core.next(seq15179__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__15180, G__15181, seq15179__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__15192 = arguments.length;
  switch(G__15192) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__15194 = y;
        var G__15195 = cljs.core.first(more);
        var G__15196 = cljs.core.next(more);
        x = G__15194;
        y = G__15195;
        more = G__15196;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq15188) {
  var G__15189 = cljs.core.first(seq15188);
  var seq15188__$1 = cljs.core.next(seq15188);
  var G__15190 = cljs.core.first(seq15188__$1);
  var seq15188__$2 = cljs.core.next(seq15188__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15189, G__15190, seq15188__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__15201 = arguments.length;
  switch(G__15201) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4586__auto__ = x;
  var y__4587__auto__ = y;
  return x__4586__auto__ > y__4587__auto__ ? x__4586__auto__ : y__4587__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4586__auto__ = x;
    var y__4587__auto__ = y;
    return x__4586__auto__ > y__4587__auto__ ? x__4586__auto__ : y__4587__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq15197) {
  var G__15198 = cljs.core.first(seq15197);
  var seq15197__$1 = cljs.core.next(seq15197);
  var G__15199 = cljs.core.first(seq15197__$1);
  var seq15197__$2 = cljs.core.next(seq15197__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__15198, G__15199, seq15197__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__15207 = arguments.length;
  switch(G__15207) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4593__auto__ = x;
  var y__4594__auto__ = y;
  return x__4593__auto__ < y__4594__auto__ ? x__4593__auto__ : y__4594__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4593__auto__ = x;
    var y__4594__auto__ = y;
    return x__4593__auto__ < y__4594__auto__ ? x__4593__auto__ : y__4594__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq15203) {
  var G__15204 = cljs.core.first(seq15203);
  var seq15203__$1 = cljs.core.next(seq15203);
  var G__15205 = cljs.core.first(seq15203__$1);
  var seq15203__$2 = cljs.core.next(seq15203__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__15204, G__15205, seq15203__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__15213 = arguments.length;
  switch(G__15213) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq15209) {
  var G__15210 = cljs.core.first(seq15209);
  var seq15209__$1 = cljs.core.next(seq15209);
  var G__15211 = cljs.core.first(seq15209__$1);
  var seq15209__$2 = cljs.core.next(seq15209__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__15210, G__15211, seq15209__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__15219 = arguments.length;
  switch(G__15219) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq15215) {
  var G__15216 = cljs.core.first(seq15215);
  var seq15215__$1 = cljs.core.next(seq15215);
  var G__15217 = cljs.core.first(seq15215__$1);
  var seq15215__$2 = cljs.core.next(seq15215__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__15216, G__15217, seq15215__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__15225 = arguments.length;
  switch(G__15225) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq15221) {
  var G__15222 = cljs.core.first(seq15221);
  var seq15221__$1 = cljs.core.next(seq15221);
  var G__15223 = cljs.core.first(seq15221__$1);
  var seq15221__$2 = cljs.core.next(seq15221__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__15222, G__15223, seq15221__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__15231 = arguments.length;
  switch(G__15231) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq15227) {
  var G__15228 = cljs.core.first(seq15227);
  var seq15227__$1 = cljs.core.next(seq15227);
  var G__15229 = cljs.core.first(seq15227__$1);
  var seq15227__$2 = cljs.core.next(seq15227__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__15228, G__15229, seq15227__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__15237 = arguments.length;
  switch(G__15237) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq15233) {
  var G__15234 = cljs.core.first(seq15233);
  var seq15233__$1 = cljs.core.next(seq15233);
  var G__15235 = cljs.core.first(seq15233__$1);
  var seq15233__$2 = cljs.core.next(seq15233__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__15234, G__15235, seq15233__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__15241 = x;
  var G__15242 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__15241, G__15242) : cljs.core.mod.call(null, G__15241, G__15242);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__15247 = arguments.length;
  switch(G__15247) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq15243) {
  var G__15244 = cljs.core.first(seq15243);
  var seq15243__$1 = cljs.core.next(seq15243);
  var G__15245 = cljs.core.first(seq15243__$1);
  var seq15243__$2 = cljs.core.next(seq15243__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__15244, G__15245, seq15243__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__15253 = arguments.length;
  switch(G__15253) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq15249) {
  var G__15250 = cljs.core.first(seq15249);
  var seq15249__$1 = cljs.core.next(seq15249);
  var G__15251 = cljs.core.first(seq15249__$1);
  var seq15249__$2 = cljs.core.next(seq15249__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__15250, G__15251, seq15249__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__15257 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__15257) : Math.floor.call(null, G__15257);
  } else {
    var G__15258 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__15258) : Math.ceil.call(null, G__15258);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__15263 = arguments.length;
  switch(G__15263) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq15259) {
  var G__15260 = cljs.core.first(seq15259);
  var seq15259__$1 = cljs.core.next(seq15259);
  var G__15261 = cljs.core.first(seq15259__$1);
  var seq15259__$2 = cljs.core.next(seq15259__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__15260, G__15261, seq15259__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__15269 = arguments.length;
  switch(G__15269) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq15265) {
  var G__15266 = cljs.core.first(seq15265);
  var seq15265__$1 = cljs.core.next(seq15265);
  var G__15267 = cljs.core.first(seq15265__$1);
  var seq15265__$2 = cljs.core.next(seq15265__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__15266, G__15267, seq15265__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__15275 = arguments.length;
  switch(G__15275) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq15271) {
  var G__15272 = cljs.core.first(seq15271);
  var seq15271__$1 = cljs.core.next(seq15271);
  var G__15273 = cljs.core.first(seq15271__$1);
  var seq15271__$2 = cljs.core.next(seq15271__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__15272, G__15273, seq15271__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__15281 = arguments.length;
  switch(G__15281) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq15277) {
  var G__15278 = cljs.core.first(seq15277);
  var seq15277__$1 = cljs.core.next(seq15277);
  var G__15279 = cljs.core.first(seq15277__$1);
  var seq15277__$2 = cljs.core.next(seq15277__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__15278, G__15279, seq15277__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__15287 = arguments.length;
  switch(G__15287) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__15289 = y;
        var G__15290 = cljs.core.first(more);
        var G__15291 = cljs.core.next(more);
        x = G__15289;
        y = G__15290;
        more = G__15291;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq15283) {
  var G__15284 = cljs.core.first(seq15283);
  var seq15283__$1 = cljs.core.next(seq15283);
  var G__15285 = cljs.core.first(seq15283__$1);
  var seq15283__$2 = cljs.core.next(seq15283__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15284, G__15285, seq15283__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__15292 = n__$1 - 1;
      var G__15293 = cljs.core.next(xs);
      n__$1 = G__15292;
      xs = G__15293;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__15297 = arguments.length;
  switch(G__15297) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5326__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__15298 = x;
    return goog.string.buildString(G__15298);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__15300 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__15301 = cljs.core.next(more);
      sb = G__15300;
      more = G__15301;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq15294) {
  var G__15295 = cljs.core.first(seq15294);
  var seq15294__$1 = cljs.core.next(seq15294);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__15295, seq15294__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__15303 = arguments.length;
  switch(G__15303) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__15305 = cljs.core.next(xs);
            var G__15306 = cljs.core.next(ys);
            xs = G__15305;
            ys = G__15306;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__15307 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__15308 = cljs.core.next(s);
        res = G__15307;
        s = G__15308;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__15313 = (h + (cljs.core.hash(function() {
        var G__15311 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15311) : cljs.core.key.call(null, G__15311);
      }()) ^ cljs.core.hash(function() {
        var G__15312 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15312) : cljs.core.val.call(null, G__15312);
      }()))) % 4503599627370496;
      var G__15314 = cljs.core.next(s);
      h = G__15313;
      s = G__15314;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__15315 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__15316 = cljs.core.next(s__$1);
      h = G__15315;
      s__$1 = G__15316;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__15327_15337 = cljs.core.seq(fn_map);
  var chunk__15328_15338 = null;
  var count__15329_15339 = 0;
  var i__15330_15340 = 0;
  while (true) {
    if (i__15330_15340 < count__15329_15339) {
      var vec__15331_15341 = chunk__15328_15338.cljs$core$IIndexed$_nth$arity$2(null, i__15330_15340);
      var key_name_15342 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15331_15341, 0, null);
      var f_15343 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15331_15341, 1, null);
      var str_name_15344 = function() {
        var G__15332 = key_name_15342;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__15332) : cljs.core.name.call(null, G__15332);
      }();
      obj[str_name_15344] = f_15343;
      var G__15345 = seq__15327_15337;
      var G__15346 = chunk__15328_15338;
      var G__15347 = count__15329_15339;
      var G__15348 = i__15330_15340 + 1;
      seq__15327_15337 = G__15345;
      chunk__15328_15338 = G__15346;
      count__15329_15339 = G__15347;
      i__15330_15340 = G__15348;
      continue;
    } else {
      var temp__4126__auto___15349 = cljs.core.seq(seq__15327_15337);
      if (temp__4126__auto___15349) {
        var seq__15327_15350__$1 = temp__4126__auto___15349;
        if (cljs.core.chunked_seq_QMARK_(seq__15327_15350__$1)) {
          var c__5059__auto___15351 = function() {
            var G__15333 = seq__15327_15350__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__15333) : cljs.core.chunk_first.call(null, G__15333);
          }();
          var G__15352 = function() {
            var G__15334 = seq__15327_15350__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__15334) : cljs.core.chunk_rest.call(null, G__15334);
          }();
          var G__15353 = c__5059__auto___15351;
          var G__15354 = cljs.core.count(c__5059__auto___15351);
          var G__15355 = 0;
          seq__15327_15337 = G__15352;
          chunk__15328_15338 = G__15353;
          count__15329_15339 = G__15354;
          i__15330_15340 = G__15355;
          continue;
        } else {
          var vec__15335_15356 = cljs.core.first(seq__15327_15350__$1);
          var key_name_15357 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15335_15356, 0, null);
          var f_15358 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15335_15356, 1, null);
          var str_name_15359 = function() {
            var G__15336 = key_name_15357;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__15336) : cljs.core.name.call(null, G__15336);
          }();
          obj[str_name_15359] = f_15358;
          var G__15360 = cljs.core.next(seq__15327_15350__$1);
          var G__15361 = null;
          var G__15362 = 0;
          var G__15363 = 0;
          seq__15327_15337 = G__15360;
          chunk__15328_15338 = G__15361;
          count__15329_15339 = G__15362;
          i__15330_15340 = G__15363;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__15365 = coll;
  if (G__15365) {
    var bit__4948__auto__ = G__15365.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4948__auto__ || G__15365.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__15365.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__15365);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__15365);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__15367 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__15367;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__15368 = i - 1;
      var G__15369 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__15368;
      r = G__15369;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq15366) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq15366));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4274__auto__ = coll == null;
    if (or__4274__auto__) {
      return or__4274__auto__;
    } else {
      var G__15373 = coll;
      if (G__15373) {
        var bit__4941__auto__ = G__15373.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4941__auto__ || G__15373.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__15375 = x;
  if (G__15375) {
    var bit__4948__auto__ = G__15375.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4948__auto__ || G__15375.cljs$core$IList$) {
      return true;
    } else {
      if (!G__15375.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__15375);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__15375);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = cljs.core.not(a.ns);
      if (and__4262__auto__) {
        return b.ns;
      } else {
        return and__4262__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__15382 = a.ns;
            var G__15383 = b.ns;
            return goog.array.defaultCompare(G__15382, G__15383);
          }();
          if (0 === nsc) {
            var G__15384 = a.name;
            var G__15385 = b.name;
            return goog.array.defaultCompare(G__15384, G__15385);
          } else {
            return nsc;
          }
        }
      } else {
        var G__15386 = a.name;
        var G__15387 = b.name;
        return goog.array.defaultCompare(G__15386, G__15387);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4690__auto__ = self__._hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__15389 = null;
  var G__15389__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__15389__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__15389 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15389__2.call(this, self__, coll);
      case 3:
        return G__15389__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15389.cljs$core$IFn$_invoke$arity$2 = G__15389__2;
  G__15389.cljs$core$IFn$_invoke$arity$3 = G__15389__3;
  return G__15389;
}();
cljs.core.Keyword.prototype.apply = function(self__, args15388) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15388)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__15391 = x;
    if (G__15391) {
      var bit__4941__auto__ = G__15391.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4941__auto__ || G__15391.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__15393 = arguments.length;
  switch(G__15393) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__15394 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__15394) : cljs.core.name.call(null, G__15394);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__15396 = ls.sval();
        ls = G__15396;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__15398 = arguments.length;
  switch(G__15398) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__15401 = s;
    if (G__15401) {
      var bit__4941__auto__ = G__15401.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4941__auto__ || G__15401.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__15402 = cljs.core.next(s__$1);
      s__$1 = G__15402;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_15403 = 0;
  var xs_15404 = cljs.core.seq(coll);
  while (true) {
    if (xs_15404) {
      ret[i_15403] = cljs.core.to_array(cljs.core.first(xs_15404));
      var G__15405 = i_15403 + 1;
      var G__15406 = cljs.core.next(xs_15404);
      i_15403 = G__15405;
      xs_15404 = G__15406;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__15408 = arguments.length;
  switch(G__15408) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15410 = i + 1;
        var G__15411 = cljs.core.next(s__$1);
        i = G__15410;
        s__$1 = G__15411;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5159__auto___15412 = size;
    var i_15413 = 0;
    while (true) {
      if (i_15413 < n__5159__auto___15412) {
        a[i_15413] = init_val_or_seq;
        var G__15414 = i_15413 + 1;
        i_15413 = G__15414;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__15416 = arguments.length;
  switch(G__15416) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15418 = i + 1;
        var G__15419 = cljs.core.next(s__$1);
        i = G__15418;
        s__$1 = G__15419;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5159__auto___15420 = size;
    var i_15421 = 0;
    while (true) {
      if (i_15421 < n__5159__auto___15420) {
        a[i_15421] = init_val_or_seq;
        var G__15422 = i_15421 + 1;
        i_15421 = G__15422;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__15424 = arguments.length;
  switch(G__15424) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15426 = i + 1;
        var G__15427 = cljs.core.next(s__$1);
        i = G__15426;
        s__$1 = G__15427;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5159__auto___15428 = size;
    var i_15429 = 0;
    while (true) {
      if (i_15429 < n__5159__auto___15428) {
        a[i_15429] = init_val_or_seq;
        var G__15430 = i_15429 + 1;
        i_15429 = G__15430;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__15432 = arguments.length;
  switch(G__15432) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15434 = i + 1;
        var G__15435 = cljs.core.next(s__$1);
        i = G__15434;
        s__$1 = G__15435;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5159__auto___15436 = size;
    var i_15437 = 0;
    while (true) {
      if (i_15437 < n__5159__auto___15436) {
        a[i_15437] = init_val_or_seq;
        var G__15438 = i_15437 + 1;
        i_15437 = G__15438;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__15439 = cljs.core.next(s__$1);
        var G__15440 = i - 1;
        var G__15441 = sum + 1;
        s__$1 = G__15439;
        i = G__15440;
        sum = G__15441;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__15447 = arguments.length;
  switch(G__15447) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq15443) {
  var G__15444 = cljs.core.first(seq15443);
  var seq15443__$1 = cljs.core.next(seq15443);
  var G__15445 = cljs.core.first(seq15443__$1);
  var seq15443__$2 = cljs.core.next(seq15443__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__15444, G__15445, seq15443__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__15461 = arguments.length;
  switch(G__15461) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5326__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq15455) {
  var G__15456 = cljs.core.first(seq15455);
  var seq15455__$1 = cljs.core.next(seq15455);
  var G__15457 = cljs.core.first(seq15455__$1);
  var seq15455__$2 = cljs.core.next(seq15455__$1);
  var G__15458 = cljs.core.first(seq15455__$2);
  var seq15455__$3 = cljs.core.next(seq15455__$2);
  var G__15459 = cljs.core.first(seq15455__$3);
  var seq15455__$4 = cljs.core.next(seq15455__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__15456, G__15457, G__15458, G__15459, seq15455__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__15467 = arguments.length;
  switch(G__15467) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__15469 = ntcoll;
      var G__15470 = cljs.core.first(vals);
      var G__15471 = cljs.core.next(vals);
      tcoll = G__15469;
      val = G__15470;
      vals = G__15471;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq15463) {
  var G__15464 = cljs.core.first(seq15463);
  var seq15463__$1 = cljs.core.next(seq15463);
  var G__15465 = cljs.core.first(seq15463__$1);
  var seq15463__$2 = cljs.core.next(seq15463__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15464, G__15465, seq15463__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__15477 = arguments.length;
  switch(G__15477) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__15479 = ntcoll;
      var G__15480 = cljs.core.first(kvs);
      var G__15481 = cljs.core.second(kvs);
      var G__15482 = cljs.core.nnext(kvs);
      tcoll = G__15479;
      key = G__15480;
      val = G__15481;
      kvs = G__15482;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq15472) {
  var G__15473 = cljs.core.first(seq15472);
  var seq15472__$1 = cljs.core.next(seq15472);
  var G__15474 = cljs.core.first(seq15472__$1);
  var seq15472__$2 = cljs.core.next(seq15472__$1);
  var G__15475 = cljs.core.first(seq15472__$2);
  var seq15472__$3 = cljs.core.next(seq15472__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15473, G__15474, G__15475, seq15472__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__15487 = arguments.length;
  switch(G__15487) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__15489 = ntcoll;
      var G__15490 = cljs.core.first(ks);
      var G__15491 = cljs.core.next(ks);
      tcoll = G__15489;
      key = G__15490;
      ks = G__15491;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq15483) {
  var G__15484 = cljs.core.first(seq15483);
  var seq15483__$1 = cljs.core.next(seq15483);
  var G__15485 = cljs.core.first(seq15483__$1);
  var seq15483__$2 = cljs.core.next(seq15483__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15484, G__15485, seq15483__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__15496 = arguments.length;
  switch(G__15496) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__15498 = ntcoll;
      var G__15499 = cljs.core.first(vals);
      var G__15500 = cljs.core.next(vals);
      tcoll = G__15498;
      val = G__15499;
      vals = G__15500;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq15492) {
  var G__15493 = cljs.core.first(seq15492);
  var seq15492__$1 = cljs.core.next(seq15492);
  var G__15494 = cljs.core.first(seq15492__$1);
  var seq15492__$2 = cljs.core.next(seq15492__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15493, G__15494, seq15492__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5203 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5203);
      } else {
        var G__15711 = a5203;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15711) : f.call(null, G__15711);
      }
    } else {
      var b5204 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5203, b5204);
        } else {
          var G__15712 = a5203;
          var G__15713 = b5204;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15712, G__15713) : f.call(null, G__15712, G__15713);
        }
      } else {
        var c5205 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5203, b5204, c5205);
          } else {
            var G__15714 = a5203;
            var G__15715 = b5204;
            var G__15716 = c5205;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15714, G__15715, G__15716) : f.call(null, G__15714, G__15715, G__15716);
          }
        } else {
          var d5206 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5203, b5204, c5205, d5206);
            } else {
              var G__15717 = a5203;
              var G__15718 = b5204;
              var G__15719 = c5205;
              var G__15720 = d5206;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15717, G__15718, G__15719, G__15720) : f.call(null, G__15717, G__15718, G__15719, G__15720);
            }
          } else {
            var e5207 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5203, b5204, c5205, d5206, e5207);
              } else {
                var G__15721 = a5203;
                var G__15722 = b5204;
                var G__15723 = c5205;
                var G__15724 = d5206;
                var G__15725 = e5207;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__15721, G__15722, G__15723, G__15724, G__15725) : f.call(null, G__15721, G__15722, G__15723, G__15724, G__15725);
              }
            } else {
              var f5208 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5203, b5204, c5205, d5206, e5207, f5208);
                } else {
                  var G__15726 = a5203;
                  var G__15727 = b5204;
                  var G__15728 = c5205;
                  var G__15729 = d5206;
                  var G__15730 = e5207;
                  var G__15731 = f5208;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__15726, G__15727, G__15728, G__15729, G__15730, G__15731) : f.call(null, G__15726, G__15727, G__15728, G__15729, G__15730, G__15731);
                }
              } else {
                var g5209 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5203, b5204, c5205, d5206, e5207, f5208, g5209);
                  } else {
                    var G__15732 = a5203;
                    var G__15733 = b5204;
                    var G__15734 = c5205;
                    var G__15735 = d5206;
                    var G__15736 = e5207;
                    var G__15737 = f5208;
                    var G__15738 = g5209;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__15732, G__15733, G__15734, G__15735, G__15736, G__15737, G__15738) : f.call(null, G__15732, G__15733, G__15734, G__15735, G__15736, G__15737, G__15738);
                  }
                } else {
                  var h5210 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210);
                    } else {
                      var G__15739 = a5203;
                      var G__15740 = b5204;
                      var G__15741 = c5205;
                      var G__15742 = d5206;
                      var G__15743 = e5207;
                      var G__15744 = f5208;
                      var G__15745 = g5209;
                      var G__15746 = h5210;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__15739, G__15740, G__15741, G__15742, G__15743, G__15744, G__15745, G__15746) : f.call(null, G__15739, G__15740, G__15741, G__15742, G__15743, G__15744, G__15745, G__15746);
                    }
                  } else {
                    var i5211 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211);
                      } else {
                        var G__15747 = a5203;
                        var G__15748 = b5204;
                        var G__15749 = c5205;
                        var G__15750 = d5206;
                        var G__15751 = e5207;
                        var G__15752 = f5208;
                        var G__15753 = g5209;
                        var G__15754 = h5210;
                        var G__15755 = i5211;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__15747, G__15748, G__15749, G__15750, G__15751, G__15752, G__15753, G__15754, G__15755) : f.call(null, G__15747, G__15748, G__15749, G__15750, G__15751, G__15752, G__15753, G__15754, G__15755);
                      }
                    } else {
                      var j5212 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212);
                        } else {
                          var G__15756 = a5203;
                          var G__15757 = b5204;
                          var G__15758 = c5205;
                          var G__15759 = d5206;
                          var G__15760 = e5207;
                          var G__15761 = f5208;
                          var G__15762 = g5209;
                          var G__15763 = h5210;
                          var G__15764 = i5211;
                          var G__15765 = j5212;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__15756, G__15757, G__15758, G__15759, G__15760, G__15761, G__15762, G__15763, G__15764, G__15765) : f.call(null, G__15756, G__15757, G__15758, G__15759, G__15760, G__15761, G__15762, G__15763, G__15764, G__15765);
                        }
                      } else {
                        var k5213 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213);
                          } else {
                            var G__15766 = a5203;
                            var G__15767 = b5204;
                            var G__15768 = c5205;
                            var G__15769 = d5206;
                            var G__15770 = e5207;
                            var G__15771 = f5208;
                            var G__15772 = g5209;
                            var G__15773 = h5210;
                            var G__15774 = i5211;
                            var G__15775 = j5212;
                            var G__15776 = k5213;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__15766, G__15767, G__15768, G__15769, G__15770, G__15771, G__15772, G__15773, G__15774, G__15775, G__15776) : f.call(null, G__15766, G__15767, G__15768, G__15769, G__15770, G__15771, G__15772, G__15773, G__15774, G__15775, G__15776);
                          }
                        } else {
                          var l5214 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214);
                            } else {
                              var G__15777 = a5203;
                              var G__15778 = b5204;
                              var G__15779 = c5205;
                              var G__15780 = d5206;
                              var G__15781 = e5207;
                              var G__15782 = f5208;
                              var G__15783 = g5209;
                              var G__15784 = h5210;
                              var G__15785 = i5211;
                              var G__15786 = j5212;
                              var G__15787 = k5213;
                              var G__15788 = l5214;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__15777, G__15778, G__15779, G__15780, G__15781, G__15782, G__15783, G__15784, G__15785, G__15786, G__15787, G__15788) : f.call(null, G__15777, G__15778, G__15779, G__15780, G__15781, G__15782, G__15783, G__15784, G__15785, G__15786, G__15787, G__15788);
                            }
                          } else {
                            var m5215 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215);
                              } else {
                                var G__15789 = a5203;
                                var G__15790 = b5204;
                                var G__15791 = c5205;
                                var G__15792 = d5206;
                                var G__15793 = e5207;
                                var G__15794 = f5208;
                                var G__15795 = g5209;
                                var G__15796 = h5210;
                                var G__15797 = i5211;
                                var G__15798 = j5212;
                                var G__15799 = k5213;
                                var G__15800 = l5214;
                                var G__15801 = m5215;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__15789, G__15790, G__15791, G__15792, G__15793, G__15794, G__15795, G__15796, G__15797, G__15798, G__15799, G__15800, G__15801) : f.call(null, G__15789, G__15790, G__15791, G__15792, G__15793, G__15794, G__15795, G__15796, G__15797, G__15798, G__15799, G__15800, G__15801);
                              }
                            } else {
                              var n5216 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216);
                                } else {
                                  var G__15802 = a5203;
                                  var G__15803 = b5204;
                                  var G__15804 = c5205;
                                  var G__15805 = d5206;
                                  var G__15806 = e5207;
                                  var G__15807 = f5208;
                                  var G__15808 = g5209;
                                  var G__15809 = h5210;
                                  var G__15810 = i5211;
                                  var G__15811 = j5212;
                                  var G__15812 = k5213;
                                  var G__15813 = l5214;
                                  var G__15814 = m5215;
                                  var G__15815 = n5216;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__15802, G__15803, G__15804, G__15805, G__15806, G__15807, G__15808, G__15809, G__15810, G__15811, G__15812, G__15813, G__15814, G__15815) : f.call(null, G__15802, G__15803, G__15804, G__15805, G__15806, G__15807, G__15808, G__15809, G__15810, G__15811, G__15812, G__15813, G__15814, G__15815);
                                }
                              } else {
                                var o5217 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216, o5217);
                                  } else {
                                    var G__15816 = a5203;
                                    var G__15817 = b5204;
                                    var G__15818 = c5205;
                                    var G__15819 = d5206;
                                    var G__15820 = e5207;
                                    var G__15821 = f5208;
                                    var G__15822 = g5209;
                                    var G__15823 = h5210;
                                    var G__15824 = i5211;
                                    var G__15825 = j5212;
                                    var G__15826 = k5213;
                                    var G__15827 = l5214;
                                    var G__15828 = m5215;
                                    var G__15829 = n5216;
                                    var G__15830 = o5217;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__15816, G__15817, G__15818, G__15819, G__15820, G__15821, G__15822, G__15823, G__15824, G__15825, G__15826, G__15827, G__15828, G__15829, G__15830) : f.call(null, G__15816, G__15817, G__15818, G__15819, G__15820, G__15821, G__15822, G__15823, G__15824, G__15825, G__15826, G__15827, G__15828, G__15829, G__15830);
                                  }
                                } else {
                                  var p5218 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216, o5217, p5218);
                                    } else {
                                      var G__15831 = a5203;
                                      var G__15832 = b5204;
                                      var G__15833 = c5205;
                                      var G__15834 = d5206;
                                      var G__15835 = e5207;
                                      var G__15836 = f5208;
                                      var G__15837 = g5209;
                                      var G__15838 = h5210;
                                      var G__15839 = i5211;
                                      var G__15840 = j5212;
                                      var G__15841 = k5213;
                                      var G__15842 = l5214;
                                      var G__15843 = m5215;
                                      var G__15844 = n5216;
                                      var G__15845 = o5217;
                                      var G__15846 = p5218;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__15831, G__15832, G__15833, G__15834, G__15835, G__15836, G__15837, G__15838, G__15839, G__15840, G__15841, G__15842, G__15843, G__15844, G__15845, G__15846) : f.call(null, G__15831, G__15832, G__15833, G__15834, G__15835, G__15836, G__15837, G__15838, G__15839, G__15840, G__15841, G__15842, G__15843, G__15844, G__15845, G__15846);
                                    }
                                  } else {
                                    var q5219 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216, o5217, p5218, q5219);
                                      } else {
                                        var G__15847 = a5203;
                                        var G__15848 = b5204;
                                        var G__15849 = c5205;
                                        var G__15850 = d5206;
                                        var G__15851 = e5207;
                                        var G__15852 = f5208;
                                        var G__15853 = g5209;
                                        var G__15854 = h5210;
                                        var G__15855 = i5211;
                                        var G__15856 = j5212;
                                        var G__15857 = k5213;
                                        var G__15858 = l5214;
                                        var G__15859 = m5215;
                                        var G__15860 = n5216;
                                        var G__15861 = o5217;
                                        var G__15862 = p5218;
                                        var G__15863 = q5219;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__15847, G__15848, G__15849, G__15850, G__15851, G__15852, G__15853, G__15854, G__15855, G__15856, G__15857, G__15858, G__15859, G__15860, G__15861, G__15862, G__15863) : f.call(null, G__15847, G__15848, G__15849, G__15850, G__15851, G__15852, G__15853, G__15854, G__15855, G__15856, G__15857, G__15858, G__15859, G__15860, G__15861, G__15862, G__15863);
                                      }
                                    } else {
                                      var r5220 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216, o5217, p5218, q5219, r5220);
                                        } else {
                                          var G__15864 = a5203;
                                          var G__15865 = b5204;
                                          var G__15866 = c5205;
                                          var G__15867 = d5206;
                                          var G__15868 = e5207;
                                          var G__15869 = f5208;
                                          var G__15870 = g5209;
                                          var G__15871 = h5210;
                                          var G__15872 = i5211;
                                          var G__15873 = j5212;
                                          var G__15874 = k5213;
                                          var G__15875 = l5214;
                                          var G__15876 = m5215;
                                          var G__15877 = n5216;
                                          var G__15878 = o5217;
                                          var G__15879 = p5218;
                                          var G__15880 = q5219;
                                          var G__15881 = r5220;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__15864, G__15865, G__15866, G__15867, G__15868, G__15869, G__15870, G__15871, G__15872, G__15873, G__15874, G__15875, G__15876, G__15877, G__15878, G__15879, G__15880, G__15881) : f.call(null, G__15864, G__15865, G__15866, G__15867, G__15868, G__15869, G__15870, G__15871, G__15872, G__15873, G__15874, G__15875, G__15876, G__15877, G__15878, G__15879, G__15880, G__15881);
                                        }
                                      } else {
                                        var s5221 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216, o5217, p5218, q5219, r5220, s5221);
                                          } else {
                                            var G__15882 = a5203;
                                            var G__15883 = b5204;
                                            var G__15884 = c5205;
                                            var G__15885 = d5206;
                                            var G__15886 = e5207;
                                            var G__15887 = f5208;
                                            var G__15888 = g5209;
                                            var G__15889 = h5210;
                                            var G__15890 = i5211;
                                            var G__15891 = j5212;
                                            var G__15892 = k5213;
                                            var G__15893 = l5214;
                                            var G__15894 = m5215;
                                            var G__15895 = n5216;
                                            var G__15896 = o5217;
                                            var G__15897 = p5218;
                                            var G__15898 = q5219;
                                            var G__15899 = r5220;
                                            var G__15900 = s5221;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__15882, G__15883, G__15884, G__15885, G__15886, G__15887, G__15888, G__15889, G__15890, G__15891, G__15892, G__15893, G__15894, G__15895, G__15896, G__15897, G__15898, G__15899, G__15900) : f.call(null, G__15882, G__15883, G__15884, G__15885, G__15886, G__15887, G__15888, G__15889, G__15890, G__15891, G__15892, G__15893, G__15894, G__15895, G__15896, G__15897, G__15898, G__15899, 
                                            G__15900);
                                          }
                                        } else {
                                          var t5222 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5203, b5204, c5205, d5206, e5207, f5208, g5209, h5210, i5211, j5212, k5213, l5214, m5215, n5216, o5217, p5218, q5219, r5220, s5221, t5222);
                                            } else {
                                              var G__15901 = a5203;
                                              var G__15902 = b5204;
                                              var G__15903 = c5205;
                                              var G__15904 = d5206;
                                              var G__15905 = e5207;
                                              var G__15906 = f5208;
                                              var G__15907 = g5209;
                                              var G__15908 = h5210;
                                              var G__15909 = i5211;
                                              var G__15910 = j5212;
                                              var G__15911 = k5213;
                                              var G__15912 = l5214;
                                              var G__15913 = m5215;
                                              var G__15914 = n5216;
                                              var G__15915 = o5217;
                                              var G__15916 = p5218;
                                              var G__15917 = q5219;
                                              var G__15918 = r5220;
                                              var G__15919 = s5221;
                                              var G__15920 = t5222;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__15901, G__15902, G__15903, G__15904, G__15905, G__15906, G__15907, G__15908, G__15909, G__15910, G__15911, G__15912, G__15913, G__15914, G__15915, G__15916, G__15917, G__15918, G__15919, G__15920) : f.call(null, G__15901, G__15902, G__15903, G__15904, G__15905, G__15906, G__15907, G__15908, G__15909, G__15910, G__15911, G__15912, G__15913, G__15914, G__15915, G__15916, G__15917, 
                                              G__15918, G__15919, G__15920);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__15928 = arguments.length;
  switch(G__15928) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5326__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq15921) {
  var G__15922 = cljs.core.first(seq15921);
  var seq15921__$1 = cljs.core.next(seq15921);
  var G__15923 = cljs.core.first(seq15921__$1);
  var seq15921__$2 = cljs.core.next(seq15921__$1);
  var G__15924 = cljs.core.first(seq15921__$2);
  var seq15921__$3 = cljs.core.next(seq15921__$2);
  var G__15925 = cljs.core.first(seq15921__$3);
  var seq15921__$4 = cljs.core.next(seq15921__$3);
  var G__15926 = cljs.core.first(seq15921__$4);
  var seq15921__$5 = cljs.core.next(seq15921__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__15922, G__15923, G__15924, G__15925, G__15926, seq15921__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__15938 = arguments.length;
  switch(G__15938) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5326__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__15939 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15939) : f.call(null, G__15939);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__15940 = cljs.core.meta(obj);
    var G__15941 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15940, G__15941) : f.call(null, G__15940, G__15941);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__15942 = cljs.core.meta(obj);
    var G__15943 = a;
    var G__15944 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15942, G__15943, G__15944) : f.call(null, G__15942, G__15943, G__15944);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__15945 = cljs.core.meta(obj);
    var G__15946 = a;
    var G__15947 = b;
    var G__15948 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15945, G__15946, G__15947, G__15948) : f.call(null, G__15945, G__15946, G__15947, G__15948);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__15949 = cljs.core.meta(obj);
    var G__15950 = a;
    var G__15951 = b;
    var G__15952 = c;
    var G__15953 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__15949, G__15950, G__15951, G__15952, G__15953) : f.call(null, G__15949, G__15950, G__15951, G__15952, G__15953);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq15930) {
  var G__15931 = cljs.core.first(seq15930);
  var seq15930__$1 = cljs.core.next(seq15930);
  var G__15932 = cljs.core.first(seq15930__$1);
  var seq15930__$2 = cljs.core.next(seq15930__$1);
  var G__15933 = cljs.core.first(seq15930__$2);
  var seq15930__$3 = cljs.core.next(seq15930__$2);
  var G__15934 = cljs.core.first(seq15930__$3);
  var seq15930__$4 = cljs.core.next(seq15930__$3);
  var G__15935 = cljs.core.first(seq15930__$4);
  var seq15930__$5 = cljs.core.next(seq15930__$4);
  var G__15936 = cljs.core.first(seq15930__$5);
  var seq15930__$6 = cljs.core.next(seq15930__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__15931, G__15932, G__15933, G__15934, G__15935, G__15936, seq15930__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__15959 = arguments.length;
  switch(G__15959) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq15955) {
  var G__15956 = cljs.core.first(seq15955);
  var seq15955__$1 = cljs.core.next(seq15955);
  var G__15957 = cljs.core.first(seq15955__$1);
  var seq15955__$2 = cljs.core.next(seq15955__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15956, G__15957, seq15955__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t15964 !== "undefined") {
  } else {
    cljs.core.t15964 = function(nil_iter, meta15965) {
      this.nil_iter = nil_iter;
      this.meta15965 = meta15965;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t15964.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t15964.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t15964.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t15964.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15966) {
      var self__ = this;
      var _15966__$1 = this;
      return self__.meta15965;
    };
    cljs.core.t15964.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15966, meta15965__$1) {
      var self__ = this;
      var _15966__$1 = this;
      return new cljs.core.t15964(self__.nil_iter, meta15965__$1);
    };
    cljs.core.t15964.cljs$lang$type = true;
    cljs.core.t15964.cljs$lang$ctorStr = "cljs.core/t15964";
    cljs.core.t15964.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write(writer__4854__auto__, "cljs.core/t15964");
    };
    cljs.core.__GT_t15964 = function cljs$core$nil_iter_$___GT_t15964(nil_iter__$1, meta15965) {
      return new cljs.core.t15964(nil_iter__$1, meta15965);
    };
  }
  return new cljs.core.t15964(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = !(lt.stepper == null);
      if (and__4262__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4262__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__15967 = lt;
        var G__15968 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__15967, G__15968) : self__.xform.call(null, G__15967, G__15968);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__15969 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__15969) : self__.xform.call(null, G__15969);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__15971 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__15971) : xform.call(null, G__15971);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__15973 = cljs.core.next(iters__$1);
        iters__$1 = G__15973;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5159__auto___15974 = self__.iters.length;
  var i_15975 = 0;
  while (true) {
    if (i_15975 < n__5159__auto___15974) {
      self__.nexts[i_15975] = self__.iters[i_15975].next();
      var G__15976 = i_15975 + 1;
      i_15975 = G__15976;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = !(lt.stepper == null);
      if (and__4262__auto__) {
        return this$.hasNext();
      } else {
        return and__4262__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__15972 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__15972) : self__.xform.call(null, G__15972);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__15978 = arguments.length;
  switch(G__15978) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__15979 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__15979) : xform.call(null, G__15979);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__15981_15985 = cljs.core.seq(colls);
  var chunk__15982_15986 = null;
  var count__15983_15987 = 0;
  var i__15984_15988 = 0;
  while (true) {
    if (i__15984_15988 < count__15983_15987) {
      var coll_15989 = chunk__15982_15986.cljs$core$IIndexed$_nth$arity$2(null, i__15984_15988);
      iters.push(cljs.core.iter(coll_15989));
      var G__15990 = seq__15981_15985;
      var G__15991 = chunk__15982_15986;
      var G__15992 = count__15983_15987;
      var G__15993 = i__15984_15988 + 1;
      seq__15981_15985 = G__15990;
      chunk__15982_15986 = G__15991;
      count__15983_15987 = G__15992;
      i__15984_15988 = G__15993;
      continue;
    } else {
      var temp__4126__auto___15994 = cljs.core.seq(seq__15981_15985);
      if (temp__4126__auto___15994) {
        var seq__15981_15995__$1 = temp__4126__auto___15994;
        if (cljs.core.chunked_seq_QMARK_(seq__15981_15995__$1)) {
          var c__5059__auto___15996 = cljs.core.chunk_first(seq__15981_15995__$1);
          var G__15997 = cljs.core.chunk_rest(seq__15981_15995__$1);
          var G__15998 = c__5059__auto___15996;
          var G__15999 = cljs.core.count(c__5059__auto___15996);
          var G__16000 = 0;
          seq__15981_15985 = G__15997;
          chunk__15982_15986 = G__15998;
          count__15983_15987 = G__15999;
          i__15984_15988 = G__16000;
          continue;
        } else {
          var coll_16001 = cljs.core.first(seq__15981_15995__$1);
          iters.push(cljs.core.iter(coll_16001));
          var G__16002 = cljs.core.next(seq__15981_15995__$1);
          var G__16003 = null;
          var G__16004 = 0;
          var G__16005 = 0;
          seq__15981_15985 = G__16002;
          chunk__15982_15986 = G__16003;
          count__15983_15987 = G__16004;
          i__15984_15988 = G__16005;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__16010 = arguments.length;
  switch(G__16010) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4274__auto__ = cljs.core.seq(coll);
    if (or__4274__auto__) {
      return or__4274__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq16006) {
  var G__16007 = cljs.core.first(seq16006);
  var seq16006__$1 = cljs.core.next(seq16006);
  var G__16008 = cljs.core.first(seq16006__$1);
  var seq16006__$2 = cljs.core.next(seq16006__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__16007, G__16008, seq16006__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__16013 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16013) : pred.call(null, G__16013);
      }())) {
        var G__16014 = pred;
        var G__16015 = cljs.core.next(coll);
        pred = G__16014;
        coll = G__16015;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4274__auto__ = function() {
        var G__16019 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16019) : pred.call(null, G__16019);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var G__16020 = pred;
        var G__16021 = cljs.core.next(coll);
        pred = G__16020;
        coll = G__16021;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__16028 = null;
    var G__16028__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__16028__1 = function(x) {
      return cljs.core.not(function() {
        var G__16025 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16025) : f.call(null, G__16025);
      }());
    };
    var G__16028__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__16026 = x;
        var G__16027 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16026, G__16027) : f.call(null, G__16026, G__16027);
      }());
    };
    var G__16028__3 = function() {
      var G__16029__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__16029 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__16030__i = 0, G__16030__a = new Array(arguments.length - 2);
          while (G__16030__i < G__16030__a.length) {
            G__16030__a[G__16030__i] = arguments[G__16030__i + 2];
            ++G__16030__i;
          }
          zs = new cljs.core.IndexedSeq(G__16030__a, 0);
        }
        return G__16029__delegate.call(this, x, y, zs);
      };
      G__16029.cljs$lang$maxFixedArity = 2;
      G__16029.cljs$lang$applyTo = function(arglist__16031) {
        var x = cljs.core.first(arglist__16031);
        arglist__16031 = cljs.core.next(arglist__16031);
        var y = cljs.core.first(arglist__16031);
        var zs = cljs.core.rest(arglist__16031);
        return G__16029__delegate(x, y, zs);
      };
      G__16029.cljs$core$IFn$_invoke$arity$variadic = G__16029__delegate;
      return G__16029;
    }();
    G__16028 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__16028__0.call(this);
        case 1:
          return G__16028__1.call(this, x);
        case 2:
          return G__16028__2.call(this, x, y);
        default:
          var G__16032 = null;
          if (arguments.length > 2) {
            var G__16033__i = 0, G__16033__a = new Array(arguments.length - 2);
            while (G__16033__i < G__16033__a.length) {
              G__16033__a[G__16033__i] = arguments[G__16033__i + 2];
              ++G__16033__i;
            }
            G__16032 = new cljs.core.IndexedSeq(G__16033__a, 0);
          }
          return G__16028__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__16032);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16028.cljs$lang$maxFixedArity = 2;
    G__16028.cljs$lang$applyTo = G__16028__3.cljs$lang$applyTo;
    G__16028.cljs$core$IFn$_invoke$arity$0 = G__16028__0;
    G__16028.cljs$core$IFn$_invoke$arity$1 = G__16028__1;
    G__16028.cljs$core$IFn$_invoke$arity$2 = G__16028__2;
    G__16028.cljs$core$IFn$_invoke$arity$variadic = G__16028__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__16028;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__16034__delegate = function(args) {
      return x;
    };
    var G__16034 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__16035__i = 0, G__16035__a = new Array(arguments.length - 0);
        while (G__16035__i < G__16035__a.length) {
          G__16035__a[G__16035__i] = arguments[G__16035__i + 0];
          ++G__16035__i;
        }
        args = new cljs.core.IndexedSeq(G__16035__a, 0);
      }
      return G__16034__delegate.call(this, args);
    };
    G__16034.cljs$lang$maxFixedArity = 0;
    G__16034.cljs$lang$applyTo = function(arglist__16036) {
      var args = cljs.core.seq(arglist__16036);
      return G__16034__delegate(args);
    };
    G__16034.cljs$core$IFn$_invoke$arity$variadic = G__16034__delegate;
    return G__16034;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__16042 = arguments.length;
  switch(G__16042) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__16071 = null;
    var G__16071__0 = function() {
      var G__16043 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16043) : f.call(null, G__16043);
    };
    var G__16071__1 = function(x) {
      var G__16044 = function() {
        var G__16045 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16045) : g.call(null, G__16045);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16044) : f.call(null, G__16044);
    };
    var G__16071__2 = function(x, y) {
      var G__16046 = function() {
        var G__16047 = x;
        var G__16048 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__16047, G__16048) : g.call(null, G__16047, G__16048);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16046) : f.call(null, G__16046);
    };
    var G__16071__3 = function(x, y, z) {
      var G__16049 = function() {
        var G__16050 = x;
        var G__16051 = y;
        var G__16052 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__16050, G__16051, G__16052) : g.call(null, G__16050, G__16051, G__16052);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16049) : f.call(null, G__16049);
    };
    var G__16071__4 = function() {
      var G__16072__delegate = function(x, y, z, args) {
        var G__16053 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16053) : f.call(null, G__16053);
      };
      var G__16072 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16073__i = 0, G__16073__a = new Array(arguments.length - 3);
          while (G__16073__i < G__16073__a.length) {
            G__16073__a[G__16073__i] = arguments[G__16073__i + 3];
            ++G__16073__i;
          }
          args = new cljs.core.IndexedSeq(G__16073__a, 0);
        }
        return G__16072__delegate.call(this, x, y, z, args);
      };
      G__16072.cljs$lang$maxFixedArity = 3;
      G__16072.cljs$lang$applyTo = function(arglist__16074) {
        var x = cljs.core.first(arglist__16074);
        arglist__16074 = cljs.core.next(arglist__16074);
        var y = cljs.core.first(arglist__16074);
        arglist__16074 = cljs.core.next(arglist__16074);
        var z = cljs.core.first(arglist__16074);
        var args = cljs.core.rest(arglist__16074);
        return G__16072__delegate(x, y, z, args);
      };
      G__16072.cljs$core$IFn$_invoke$arity$variadic = G__16072__delegate;
      return G__16072;
    }();
    G__16071 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__16071__0.call(this);
        case 1:
          return G__16071__1.call(this, x);
        case 2:
          return G__16071__2.call(this, x, y);
        case 3:
          return G__16071__3.call(this, x, y, z);
        default:
          var G__16075 = null;
          if (arguments.length > 3) {
            var G__16076__i = 0, G__16076__a = new Array(arguments.length - 3);
            while (G__16076__i < G__16076__a.length) {
              G__16076__a[G__16076__i] = arguments[G__16076__i + 3];
              ++G__16076__i;
            }
            G__16075 = new cljs.core.IndexedSeq(G__16076__a, 0);
          }
          return G__16071__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16075);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16071.cljs$lang$maxFixedArity = 3;
    G__16071.cljs$lang$applyTo = G__16071__4.cljs$lang$applyTo;
    G__16071.cljs$core$IFn$_invoke$arity$0 = G__16071__0;
    G__16071.cljs$core$IFn$_invoke$arity$1 = G__16071__1;
    G__16071.cljs$core$IFn$_invoke$arity$2 = G__16071__2;
    G__16071.cljs$core$IFn$_invoke$arity$3 = G__16071__3;
    G__16071.cljs$core$IFn$_invoke$arity$variadic = G__16071__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16071;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__16077 = null;
    var G__16077__0 = function() {
      var G__16054 = function() {
        var G__16055 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16055) : g.call(null, G__16055);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16054) : f.call(null, G__16054);
    };
    var G__16077__1 = function(x) {
      var G__16056 = function() {
        var G__16057 = function() {
          var G__16058 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__16058) : h.call(null, G__16058);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16057) : g.call(null, G__16057);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16056) : f.call(null, G__16056);
    };
    var G__16077__2 = function(x, y) {
      var G__16059 = function() {
        var G__16060 = function() {
          var G__16061 = x;
          var G__16062 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__16061, G__16062) : h.call(null, G__16061, G__16062);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16060) : g.call(null, G__16060);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16059) : f.call(null, G__16059);
    };
    var G__16077__3 = function(x, y, z) {
      var G__16063 = function() {
        var G__16064 = function() {
          var G__16065 = x;
          var G__16066 = y;
          var G__16067 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__16065, G__16066, G__16067) : h.call(null, G__16065, G__16066, G__16067);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16064) : g.call(null, G__16064);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16063) : f.call(null, G__16063);
    };
    var G__16077__4 = function() {
      var G__16078__delegate = function(x, y, z, args) {
        var G__16068 = function() {
          var G__16069 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16069) : g.call(null, G__16069);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16068) : f.call(null, G__16068);
      };
      var G__16078 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16079__i = 0, G__16079__a = new Array(arguments.length - 3);
          while (G__16079__i < G__16079__a.length) {
            G__16079__a[G__16079__i] = arguments[G__16079__i + 3];
            ++G__16079__i;
          }
          args = new cljs.core.IndexedSeq(G__16079__a, 0);
        }
        return G__16078__delegate.call(this, x, y, z, args);
      };
      G__16078.cljs$lang$maxFixedArity = 3;
      G__16078.cljs$lang$applyTo = function(arglist__16080) {
        var x = cljs.core.first(arglist__16080);
        arglist__16080 = cljs.core.next(arglist__16080);
        var y = cljs.core.first(arglist__16080);
        arglist__16080 = cljs.core.next(arglist__16080);
        var z = cljs.core.first(arglist__16080);
        var args = cljs.core.rest(arglist__16080);
        return G__16078__delegate(x, y, z, args);
      };
      G__16078.cljs$core$IFn$_invoke$arity$variadic = G__16078__delegate;
      return G__16078;
    }();
    G__16077 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__16077__0.call(this);
        case 1:
          return G__16077__1.call(this, x);
        case 2:
          return G__16077__2.call(this, x, y);
        case 3:
          return G__16077__3.call(this, x, y, z);
        default:
          var G__16081 = null;
          if (arguments.length > 3) {
            var G__16082__i = 0, G__16082__a = new Array(arguments.length - 3);
            while (G__16082__i < G__16082__a.length) {
              G__16082__a[G__16082__i] = arguments[G__16082__i + 3];
              ++G__16082__i;
            }
            G__16081 = new cljs.core.IndexedSeq(G__16082__a, 0);
          }
          return G__16077__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16081);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16077.cljs$lang$maxFixedArity = 3;
    G__16077.cljs$lang$applyTo = G__16077__4.cljs$lang$applyTo;
    G__16077.cljs$core$IFn$_invoke$arity$0 = G__16077__0;
    G__16077.cljs$core$IFn$_invoke$arity$1 = G__16077__1;
    G__16077.cljs$core$IFn$_invoke$arity$2 = G__16077__2;
    G__16077.cljs$core$IFn$_invoke$arity$3 = G__16077__3;
    G__16077.cljs$core$IFn$_invoke$arity$variadic = G__16077__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16077;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__16083__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__16084 = cljs.core.first(fs__$2).call(null, ret);
            var G__16085 = cljs.core.next(fs__$2);
            ret = G__16084;
            fs__$2 = G__16085;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__16083 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__16086__i = 0, G__16086__a = new Array(arguments.length - 0);
          while (G__16086__i < G__16086__a.length) {
            G__16086__a[G__16086__i] = arguments[G__16086__i + 0];
            ++G__16086__i;
          }
          args = new cljs.core.IndexedSeq(G__16086__a, 0);
        }
        return G__16083__delegate.call(this, args);
      };
      G__16083.cljs$lang$maxFixedArity = 0;
      G__16083.cljs$lang$applyTo = function(arglist__16087) {
        var args = cljs.core.seq(arglist__16087);
        return G__16083__delegate(args);
      };
      G__16083.cljs$core$IFn$_invoke$arity$variadic = G__16083__delegate;
      return G__16083;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq16037) {
  var G__16038 = cljs.core.first(seq16037);
  var seq16037__$1 = cljs.core.next(seq16037);
  var G__16039 = cljs.core.first(seq16037__$1);
  var seq16037__$2 = cljs.core.next(seq16037__$1);
  var G__16040 = cljs.core.first(seq16037__$2);
  var seq16037__$3 = cljs.core.next(seq16037__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__16038, G__16039, G__16040, seq16037__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__16094 = arguments.length;
  switch(G__16094) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5326__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__16138 = null;
    var G__16138__0 = function() {
      var G__16095 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16095) : f.call(null, G__16095);
    };
    var G__16138__1 = function(x) {
      var G__16096 = arg1;
      var G__16097 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16096, G__16097) : f.call(null, G__16096, G__16097);
    };
    var G__16138__2 = function(x, y) {
      var G__16098 = arg1;
      var G__16099 = x;
      var G__16100 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16098, G__16099, G__16100) : f.call(null, G__16098, G__16099, G__16100);
    };
    var G__16138__3 = function(x, y, z) {
      var G__16101 = arg1;
      var G__16102 = x;
      var G__16103 = y;
      var G__16104 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16101, G__16102, G__16103, G__16104) : f.call(null, G__16101, G__16102, G__16103, G__16104);
    };
    var G__16138__4 = function() {
      var G__16139__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__16139 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16140__i = 0, G__16140__a = new Array(arguments.length - 3);
          while (G__16140__i < G__16140__a.length) {
            G__16140__a[G__16140__i] = arguments[G__16140__i + 3];
            ++G__16140__i;
          }
          args = new cljs.core.IndexedSeq(G__16140__a, 0);
        }
        return G__16139__delegate.call(this, x, y, z, args);
      };
      G__16139.cljs$lang$maxFixedArity = 3;
      G__16139.cljs$lang$applyTo = function(arglist__16141) {
        var x = cljs.core.first(arglist__16141);
        arglist__16141 = cljs.core.next(arglist__16141);
        var y = cljs.core.first(arglist__16141);
        arglist__16141 = cljs.core.next(arglist__16141);
        var z = cljs.core.first(arglist__16141);
        var args = cljs.core.rest(arglist__16141);
        return G__16139__delegate(x, y, z, args);
      };
      G__16139.cljs$core$IFn$_invoke$arity$variadic = G__16139__delegate;
      return G__16139;
    }();
    G__16138 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__16138__0.call(this);
        case 1:
          return G__16138__1.call(this, x);
        case 2:
          return G__16138__2.call(this, x, y);
        case 3:
          return G__16138__3.call(this, x, y, z);
        default:
          var G__16142 = null;
          if (arguments.length > 3) {
            var G__16143__i = 0, G__16143__a = new Array(arguments.length - 3);
            while (G__16143__i < G__16143__a.length) {
              G__16143__a[G__16143__i] = arguments[G__16143__i + 3];
              ++G__16143__i;
            }
            G__16142 = new cljs.core.IndexedSeq(G__16143__a, 0);
          }
          return G__16138__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16142);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16138.cljs$lang$maxFixedArity = 3;
    G__16138.cljs$lang$applyTo = G__16138__4.cljs$lang$applyTo;
    G__16138.cljs$core$IFn$_invoke$arity$0 = G__16138__0;
    G__16138.cljs$core$IFn$_invoke$arity$1 = G__16138__1;
    G__16138.cljs$core$IFn$_invoke$arity$2 = G__16138__2;
    G__16138.cljs$core$IFn$_invoke$arity$3 = G__16138__3;
    G__16138.cljs$core$IFn$_invoke$arity$variadic = G__16138__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16138;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__16144 = null;
    var G__16144__0 = function() {
      var G__16105 = arg1;
      var G__16106 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16105, G__16106) : f.call(null, G__16105, G__16106);
    };
    var G__16144__1 = function(x) {
      var G__16107 = arg1;
      var G__16108 = arg2;
      var G__16109 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16107, G__16108, G__16109) : f.call(null, G__16107, G__16108, G__16109);
    };
    var G__16144__2 = function(x, y) {
      var G__16110 = arg1;
      var G__16111 = arg2;
      var G__16112 = x;
      var G__16113 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16110, G__16111, G__16112, G__16113) : f.call(null, G__16110, G__16111, G__16112, G__16113);
    };
    var G__16144__3 = function(x, y, z) {
      var G__16114 = arg1;
      var G__16115 = arg2;
      var G__16116 = x;
      var G__16117 = y;
      var G__16118 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__16114, G__16115, G__16116, G__16117, G__16118) : f.call(null, G__16114, G__16115, G__16116, G__16117, G__16118);
    };
    var G__16144__4 = function() {
      var G__16145__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__16145 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16146__i = 0, G__16146__a = new Array(arguments.length - 3);
          while (G__16146__i < G__16146__a.length) {
            G__16146__a[G__16146__i] = arguments[G__16146__i + 3];
            ++G__16146__i;
          }
          args = new cljs.core.IndexedSeq(G__16146__a, 0);
        }
        return G__16145__delegate.call(this, x, y, z, args);
      };
      G__16145.cljs$lang$maxFixedArity = 3;
      G__16145.cljs$lang$applyTo = function(arglist__16147) {
        var x = cljs.core.first(arglist__16147);
        arglist__16147 = cljs.core.next(arglist__16147);
        var y = cljs.core.first(arglist__16147);
        arglist__16147 = cljs.core.next(arglist__16147);
        var z = cljs.core.first(arglist__16147);
        var args = cljs.core.rest(arglist__16147);
        return G__16145__delegate(x, y, z, args);
      };
      G__16145.cljs$core$IFn$_invoke$arity$variadic = G__16145__delegate;
      return G__16145;
    }();
    G__16144 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__16144__0.call(this);
        case 1:
          return G__16144__1.call(this, x);
        case 2:
          return G__16144__2.call(this, x, y);
        case 3:
          return G__16144__3.call(this, x, y, z);
        default:
          var G__16148 = null;
          if (arguments.length > 3) {
            var G__16149__i = 0, G__16149__a = new Array(arguments.length - 3);
            while (G__16149__i < G__16149__a.length) {
              G__16149__a[G__16149__i] = arguments[G__16149__i + 3];
              ++G__16149__i;
            }
            G__16148 = new cljs.core.IndexedSeq(G__16149__a, 0);
          }
          return G__16144__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16148);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16144.cljs$lang$maxFixedArity = 3;
    G__16144.cljs$lang$applyTo = G__16144__4.cljs$lang$applyTo;
    G__16144.cljs$core$IFn$_invoke$arity$0 = G__16144__0;
    G__16144.cljs$core$IFn$_invoke$arity$1 = G__16144__1;
    G__16144.cljs$core$IFn$_invoke$arity$2 = G__16144__2;
    G__16144.cljs$core$IFn$_invoke$arity$3 = G__16144__3;
    G__16144.cljs$core$IFn$_invoke$arity$variadic = G__16144__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16144;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__16150 = null;
    var G__16150__0 = function() {
      var G__16119 = arg1;
      var G__16120 = arg2;
      var G__16121 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16119, G__16120, G__16121) : f.call(null, G__16119, G__16120, G__16121);
    };
    var G__16150__1 = function(x) {
      var G__16122 = arg1;
      var G__16123 = arg2;
      var G__16124 = arg3;
      var G__16125 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16122, G__16123, G__16124, G__16125) : f.call(null, G__16122, G__16123, G__16124, G__16125);
    };
    var G__16150__2 = function(x, y) {
      var G__16126 = arg1;
      var G__16127 = arg2;
      var G__16128 = arg3;
      var G__16129 = x;
      var G__16130 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__16126, G__16127, G__16128, G__16129, G__16130) : f.call(null, G__16126, G__16127, G__16128, G__16129, G__16130);
    };
    var G__16150__3 = function(x, y, z) {
      var G__16131 = arg1;
      var G__16132 = arg2;
      var G__16133 = arg3;
      var G__16134 = x;
      var G__16135 = y;
      var G__16136 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__16131, G__16132, G__16133, G__16134, G__16135, G__16136) : f.call(null, G__16131, G__16132, G__16133, G__16134, G__16135, G__16136);
    };
    var G__16150__4 = function() {
      var G__16151__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__16151 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16152__i = 0, G__16152__a = new Array(arguments.length - 3);
          while (G__16152__i < G__16152__a.length) {
            G__16152__a[G__16152__i] = arguments[G__16152__i + 3];
            ++G__16152__i;
          }
          args = new cljs.core.IndexedSeq(G__16152__a, 0);
        }
        return G__16151__delegate.call(this, x, y, z, args);
      };
      G__16151.cljs$lang$maxFixedArity = 3;
      G__16151.cljs$lang$applyTo = function(arglist__16153) {
        var x = cljs.core.first(arglist__16153);
        arglist__16153 = cljs.core.next(arglist__16153);
        var y = cljs.core.first(arglist__16153);
        arglist__16153 = cljs.core.next(arglist__16153);
        var z = cljs.core.first(arglist__16153);
        var args = cljs.core.rest(arglist__16153);
        return G__16151__delegate(x, y, z, args);
      };
      G__16151.cljs$core$IFn$_invoke$arity$variadic = G__16151__delegate;
      return G__16151;
    }();
    G__16150 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__16150__0.call(this);
        case 1:
          return G__16150__1.call(this, x);
        case 2:
          return G__16150__2.call(this, x, y);
        case 3:
          return G__16150__3.call(this, x, y, z);
        default:
          var G__16154 = null;
          if (arguments.length > 3) {
            var G__16155__i = 0, G__16155__a = new Array(arguments.length - 3);
            while (G__16155__i < G__16155__a.length) {
              G__16155__a[G__16155__i] = arguments[G__16155__i + 3];
              ++G__16155__i;
            }
            G__16154 = new cljs.core.IndexedSeq(G__16155__a, 0);
          }
          return G__16150__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16154);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16150.cljs$lang$maxFixedArity = 3;
    G__16150.cljs$lang$applyTo = G__16150__4.cljs$lang$applyTo;
    G__16150.cljs$core$IFn$_invoke$arity$0 = G__16150__0;
    G__16150.cljs$core$IFn$_invoke$arity$1 = G__16150__1;
    G__16150.cljs$core$IFn$_invoke$arity$2 = G__16150__2;
    G__16150.cljs$core$IFn$_invoke$arity$3 = G__16150__3;
    G__16150.cljs$core$IFn$_invoke$arity$variadic = G__16150__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16150;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__16156__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__16156 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__16157__i = 0, G__16157__a = new Array(arguments.length - 0);
        while (G__16157__i < G__16157__a.length) {
          G__16157__a[G__16157__i] = arguments[G__16157__i + 0];
          ++G__16157__i;
        }
        args = new cljs.core.IndexedSeq(G__16157__a, 0);
      }
      return G__16156__delegate.call(this, args);
    };
    G__16156.cljs$lang$maxFixedArity = 0;
    G__16156.cljs$lang$applyTo = function(arglist__16158) {
      var args = cljs.core.seq(arglist__16158);
      return G__16156__delegate(args);
    };
    G__16156.cljs$core$IFn$_invoke$arity$variadic = G__16156__delegate;
    return G__16156;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq16088) {
  var G__16089 = cljs.core.first(seq16088);
  var seq16088__$1 = cljs.core.next(seq16088);
  var G__16090 = cljs.core.first(seq16088__$1);
  var seq16088__$2 = cljs.core.next(seq16088__$1);
  var G__16091 = cljs.core.first(seq16088__$2);
  var seq16088__$3 = cljs.core.next(seq16088__$2);
  var G__16092 = cljs.core.first(seq16088__$3);
  var seq16088__$4 = cljs.core.next(seq16088__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__16089, G__16090, G__16091, G__16092, seq16088__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__16160 = arguments.length;
  switch(G__16160) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__16178 = null;
    var G__16178__1 = function(a) {
      var G__16161 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16161) : f.call(null, G__16161);
    };
    var G__16178__2 = function(a, b) {
      var G__16162 = a == null ? x : a;
      var G__16163 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16162, G__16163) : f.call(null, G__16162, G__16163);
    };
    var G__16178__3 = function(a, b, c) {
      var G__16164 = a == null ? x : a;
      var G__16165 = b;
      var G__16166 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16164, G__16165, G__16166) : f.call(null, G__16164, G__16165, G__16166);
    };
    var G__16178__4 = function() {
      var G__16179__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__16179 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__16180__i = 0, G__16180__a = new Array(arguments.length - 3);
          while (G__16180__i < G__16180__a.length) {
            G__16180__a[G__16180__i] = arguments[G__16180__i + 3];
            ++G__16180__i;
          }
          ds = new cljs.core.IndexedSeq(G__16180__a, 0);
        }
        return G__16179__delegate.call(this, a, b, c, ds);
      };
      G__16179.cljs$lang$maxFixedArity = 3;
      G__16179.cljs$lang$applyTo = function(arglist__16181) {
        var a = cljs.core.first(arglist__16181);
        arglist__16181 = cljs.core.next(arglist__16181);
        var b = cljs.core.first(arglist__16181);
        arglist__16181 = cljs.core.next(arglist__16181);
        var c = cljs.core.first(arglist__16181);
        var ds = cljs.core.rest(arglist__16181);
        return G__16179__delegate(a, b, c, ds);
      };
      G__16179.cljs$core$IFn$_invoke$arity$variadic = G__16179__delegate;
      return G__16179;
    }();
    G__16178 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__16178__1.call(this, a);
        case 2:
          return G__16178__2.call(this, a, b);
        case 3:
          return G__16178__3.call(this, a, b, c);
        default:
          var G__16182 = null;
          if (arguments.length > 3) {
            var G__16183__i = 0, G__16183__a = new Array(arguments.length - 3);
            while (G__16183__i < G__16183__a.length) {
              G__16183__a[G__16183__i] = arguments[G__16183__i + 3];
              ++G__16183__i;
            }
            G__16182 = new cljs.core.IndexedSeq(G__16183__a, 0);
          }
          return G__16178__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__16182);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16178.cljs$lang$maxFixedArity = 3;
    G__16178.cljs$lang$applyTo = G__16178__4.cljs$lang$applyTo;
    G__16178.cljs$core$IFn$_invoke$arity$1 = G__16178__1;
    G__16178.cljs$core$IFn$_invoke$arity$2 = G__16178__2;
    G__16178.cljs$core$IFn$_invoke$arity$3 = G__16178__3;
    G__16178.cljs$core$IFn$_invoke$arity$variadic = G__16178__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16178;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__16184 = null;
    var G__16184__2 = function(a, b) {
      var G__16167 = a == null ? x : a;
      var G__16168 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16167, G__16168) : f.call(null, G__16167, G__16168);
    };
    var G__16184__3 = function(a, b, c) {
      var G__16169 = a == null ? x : a;
      var G__16170 = b == null ? y : b;
      var G__16171 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16169, G__16170, G__16171) : f.call(null, G__16169, G__16170, G__16171);
    };
    var G__16184__4 = function() {
      var G__16185__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__16185 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__16186__i = 0, G__16186__a = new Array(arguments.length - 3);
          while (G__16186__i < G__16186__a.length) {
            G__16186__a[G__16186__i] = arguments[G__16186__i + 3];
            ++G__16186__i;
          }
          ds = new cljs.core.IndexedSeq(G__16186__a, 0);
        }
        return G__16185__delegate.call(this, a, b, c, ds);
      };
      G__16185.cljs$lang$maxFixedArity = 3;
      G__16185.cljs$lang$applyTo = function(arglist__16187) {
        var a = cljs.core.first(arglist__16187);
        arglist__16187 = cljs.core.next(arglist__16187);
        var b = cljs.core.first(arglist__16187);
        arglist__16187 = cljs.core.next(arglist__16187);
        var c = cljs.core.first(arglist__16187);
        var ds = cljs.core.rest(arglist__16187);
        return G__16185__delegate(a, b, c, ds);
      };
      G__16185.cljs$core$IFn$_invoke$arity$variadic = G__16185__delegate;
      return G__16185;
    }();
    G__16184 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__16184__2.call(this, a, b);
        case 3:
          return G__16184__3.call(this, a, b, c);
        default:
          var G__16188 = null;
          if (arguments.length > 3) {
            var G__16189__i = 0, G__16189__a = new Array(arguments.length - 3);
            while (G__16189__i < G__16189__a.length) {
              G__16189__a[G__16189__i] = arguments[G__16189__i + 3];
              ++G__16189__i;
            }
            G__16188 = new cljs.core.IndexedSeq(G__16189__a, 0);
          }
          return G__16184__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__16188);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16184.cljs$lang$maxFixedArity = 3;
    G__16184.cljs$lang$applyTo = G__16184__4.cljs$lang$applyTo;
    G__16184.cljs$core$IFn$_invoke$arity$2 = G__16184__2;
    G__16184.cljs$core$IFn$_invoke$arity$3 = G__16184__3;
    G__16184.cljs$core$IFn$_invoke$arity$variadic = G__16184__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16184;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__16190 = null;
    var G__16190__2 = function(a, b) {
      var G__16172 = a == null ? x : a;
      var G__16173 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16172, G__16173) : f.call(null, G__16172, G__16173);
    };
    var G__16190__3 = function(a, b, c) {
      var G__16174 = a == null ? x : a;
      var G__16175 = b == null ? y : b;
      var G__16176 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16174, G__16175, G__16176) : f.call(null, G__16174, G__16175, G__16176);
    };
    var G__16190__4 = function() {
      var G__16191__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__16191 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__16192__i = 0, G__16192__a = new Array(arguments.length - 3);
          while (G__16192__i < G__16192__a.length) {
            G__16192__a[G__16192__i] = arguments[G__16192__i + 3];
            ++G__16192__i;
          }
          ds = new cljs.core.IndexedSeq(G__16192__a, 0);
        }
        return G__16191__delegate.call(this, a, b, c, ds);
      };
      G__16191.cljs$lang$maxFixedArity = 3;
      G__16191.cljs$lang$applyTo = function(arglist__16193) {
        var a = cljs.core.first(arglist__16193);
        arglist__16193 = cljs.core.next(arglist__16193);
        var b = cljs.core.first(arglist__16193);
        arglist__16193 = cljs.core.next(arglist__16193);
        var c = cljs.core.first(arglist__16193);
        var ds = cljs.core.rest(arglist__16193);
        return G__16191__delegate(a, b, c, ds);
      };
      G__16191.cljs$core$IFn$_invoke$arity$variadic = G__16191__delegate;
      return G__16191;
    }();
    G__16190 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__16190__2.call(this, a, b);
        case 3:
          return G__16190__3.call(this, a, b, c);
        default:
          var G__16194 = null;
          if (arguments.length > 3) {
            var G__16195__i = 0, G__16195__a = new Array(arguments.length - 3);
            while (G__16195__i < G__16195__a.length) {
              G__16195__a[G__16195__i] = arguments[G__16195__i + 3];
              ++G__16195__i;
            }
            G__16194 = new cljs.core.IndexedSeq(G__16195__a, 0);
          }
          return G__16190__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__16194);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16190.cljs$lang$maxFixedArity = 3;
    G__16190.cljs$lang$applyTo = G__16190__4.cljs$lang$applyTo;
    G__16190.cljs$core$IFn$_invoke$arity$2 = G__16190__2;
    G__16190.cljs$core$IFn$_invoke$arity$3 = G__16190__3;
    G__16190.cljs$core$IFn$_invoke$arity$variadic = G__16190__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16190;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__16197 = arguments.length;
  switch(G__16197) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__16198 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__16198) : cljs.core.volatile_BANG_.call(null, G__16198);
    }();
    return function(i) {
      return function() {
        var G__16229 = null;
        var G__16229__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16229__1 = function(result) {
          var G__16199 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16199) : rf.call(null, G__16199);
        };
        var G__16229__2 = function(result, input) {
          var G__16200 = result;
          var G__16201 = function() {
            var G__16202 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__16203 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16202, G__16203) : f.call(null, G__16202, G__16203);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16200, G__16201) : rf.call(null, G__16200, G__16201);
        };
        G__16229 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16229__0.call(this);
            case 1:
              return G__16229__1.call(this, result);
            case 2:
              return G__16229__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16229.cljs$core$IFn$_invoke$arity$0 = G__16229__0;
        G__16229.cljs$core$IFn$_invoke$arity$1 = G__16229__1;
        G__16229.cljs$core$IFn$_invoke$arity$2 = G__16229__2;
        return G__16229;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5159__auto___16230 = size;
          var i_16231 = 0;
          while (true) {
            if (i_16231 < n__5159__auto___16230) {
              cljs.core.chunk_append(b, function() {
                var G__16224 = idx + i_16231;
                var G__16225 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16231);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16224, G__16225) : f.call(null, G__16224, G__16225);
              }());
              var G__16232 = i_16231 + 1;
              i_16231 = G__16232;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__16226 = idx;
            var G__16227 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16226, G__16227) : f.call(null, G__16226, G__16227);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__16234 = arguments.length;
  switch(G__16234) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__16242 = null;
      var G__16242__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16242__1 = function(result) {
        var G__16235 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16235) : rf.call(null, G__16235);
      };
      var G__16242__2 = function(result, input) {
        var v = function() {
          var G__16236 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16236) : f.call(null, G__16236);
        }();
        if (v == null) {
          return result;
        } else {
          var G__16237 = result;
          var G__16238 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16237, G__16238) : rf.call(null, G__16237, G__16238);
        }
      };
      G__16242 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__16242__0.call(this);
          case 1:
            return G__16242__1.call(this, result);
          case 2:
            return G__16242__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16242.cljs$core$IFn$_invoke$arity$0 = G__16242__0;
      G__16242.cljs$core$IFn$_invoke$arity$1 = G__16242__1;
      G__16242.cljs$core$IFn$_invoke$arity$2 = G__16242__2;
      return G__16242;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5159__auto___16243 = size;
        var i_16244 = 0;
        while (true) {
          if (i_16244 < n__5159__auto___16243) {
            var x_16245 = function() {
              var G__16239 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16244);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16239) : f.call(null, G__16239);
            }();
            if (x_16245 == null) {
            } else {
              cljs.core.chunk_append(b, x_16245);
            }
            var G__16246 = i_16244 + 1;
            i_16244 = G__16246;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__16240 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16240) : f.call(null, G__16240);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__16247 = this$__$1;
  return goog.getUid(G__16247);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16248 = cljs.core.seq(self__.watches);
  var chunk__16249 = null;
  var count__16250 = 0;
  var i__16251 = 0;
  while (true) {
    if (i__16251 < count__16250) {
      var vec__16252 = chunk__16249.cljs$core$IIndexed$_nth$arity$2(null, i__16251);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16252, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16252, 1, null);
      var G__16253_16262 = key;
      var G__16254_16263 = this$__$1;
      var G__16255_16264 = oldval;
      var G__16256_16265 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16253_16262, G__16254_16263, G__16255_16264, G__16256_16265) : f.call(null, G__16253_16262, G__16254_16263, G__16255_16264, G__16256_16265);
      var G__16266 = seq__16248;
      var G__16267 = chunk__16249;
      var G__16268 = count__16250;
      var G__16269 = i__16251 + 1;
      seq__16248 = G__16266;
      chunk__16249 = G__16267;
      count__16250 = G__16268;
      i__16251 = G__16269;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__16248);
      if (temp__4126__auto__) {
        var seq__16248__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16248__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__16248__$1);
          var G__16270 = cljs.core.chunk_rest(seq__16248__$1);
          var G__16271 = c__5059__auto__;
          var G__16272 = cljs.core.count(c__5059__auto__);
          var G__16273 = 0;
          seq__16248 = G__16270;
          chunk__16249 = G__16271;
          count__16250 = G__16272;
          i__16251 = G__16273;
          continue;
        } else {
          var vec__16257 = cljs.core.first(seq__16248__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16257, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16257, 1, null);
          var G__16258_16274 = key;
          var G__16259_16275 = this$__$1;
          var G__16260_16276 = oldval;
          var G__16261_16277 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16258_16274, G__16259_16275, G__16260_16276, G__16261_16277) : f.call(null, G__16258_16274, G__16259_16275, G__16260_16276, G__16261_16277);
          var G__16278 = cljs.core.next(seq__16248__$1);
          var G__16279 = null;
          var G__16280 = 0;
          var G__16281 = 0;
          seq__16248 = G__16278;
          chunk__16249 = G__16279;
          count__16250 = G__16280;
          i__16251 = G__16281;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__16285 = arguments.length;
  switch(G__16285) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5326__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__16286) {
  var map__16287 = p__16286;
  var map__16287__$1 = cljs.core.seq_QMARK_(map__16287) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__16287) : map__16287;
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16287__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16287__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq16282) {
  var G__16283 = cljs.core.first(seq16282);
  var seq16282__$1 = cljs.core.next(seq16282);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__16283, seq16282__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__16291 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__16291) : validate.call(null, G__16291);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__16292 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__16292) : cljs.core.pr_str.call(null, G__16292);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__16299 = arguments.length;
  switch(G__16299) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5326__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__16300 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16300) : f.call(null, G__16300);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__16301 = a.state;
      var G__16302 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16301, G__16302) : f.call(null, G__16301, G__16302);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__16303 = a.state;
      var G__16304 = x;
      var G__16305 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16303, G__16304, G__16305) : f.call(null, G__16303, G__16304, G__16305);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq16293) {
  var G__16294 = cljs.core.first(seq16293);
  var seq16293__$1 = cljs.core.next(seq16293);
  var G__16295 = cljs.core.first(seq16293__$1);
  var seq16293__$2 = cljs.core.next(seq16293__$1);
  var G__16296 = cljs.core.first(seq16293__$2);
  var seq16293__$3 = cljs.core.next(seq16293__$2);
  var G__16297 = cljs.core.first(seq16293__$3);
  var seq16293__$4 = cljs.core.next(seq16293__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__16294, G__16295, G__16296, G__16297, seq16293__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__16308 = arguments.length;
  switch(G__16308) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__16343 = null;
        var G__16343__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16343__1 = function(result) {
          var G__16309 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16309) : rf.call(null, G__16309);
        };
        var G__16343__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__16310 = i;
            var G__16311 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16310, G__16311) : f.call(null, G__16310, G__16311);
          }();
          if (v == null) {
            return result;
          } else {
            var G__16312 = result;
            var G__16313 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16312, G__16313) : rf.call(null, G__16312, G__16313);
          }
        };
        G__16343 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16343__0.call(this);
            case 1:
              return G__16343__1.call(this, result);
            case 2:
              return G__16343__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16343.cljs$core$IFn$_invoke$arity$0 = G__16343__0;
        G__16343.cljs$core$IFn$_invoke$arity$1 = G__16343__1;
        G__16343.cljs$core$IFn$_invoke$arity$2 = G__16343__2;
        return G__16343;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5159__auto___16344 = size;
          var i_16345 = 0;
          while (true) {
            if (i_16345 < n__5159__auto___16344) {
              var x_16346 = function() {
                var G__16338 = idx + i_16345;
                var G__16339 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16345);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16338, G__16339) : f.call(null, G__16338, G__16339);
              }();
              if (x_16346 == null) {
              } else {
                cljs.core.chunk_append(b, x_16346);
              }
              var G__16347 = i_16345 + 1;
              i_16345 = G__16347;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__16340 = idx;
            var G__16341 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16340, G__16341) : f.call(null, G__16340, G__16341);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__16359 = arguments.length;
  switch(G__16359) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__16375 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16375) : p.call(null, G__16375);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16377 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16377) : p.call(null, G__16377);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var G__16378 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16378) : p.call(null, G__16378);
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16380 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16380) : p.call(null, G__16380);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__16382 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16382) : p.call(null, G__16382);
          }();
          if (cljs.core.truth_(and__4262__auto____$1)) {
            var G__16383 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16383) : p.call(null, G__16383);
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__16545__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4262__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4262__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4262__auto__;
          }
        }());
      };
      var G__16545 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16546__i = 0, G__16546__a = new Array(arguments.length - 3);
          while (G__16546__i < G__16546__a.length) {
            G__16546__a[G__16546__i] = arguments[G__16546__i + 3];
            ++G__16546__i;
          }
          args = new cljs.core.IndexedSeq(G__16546__a, 0);
        }
        return G__16545__delegate.call(this, x, y, z, args);
      };
      G__16545.cljs$lang$maxFixedArity = 3;
      G__16545.cljs$lang$applyTo = function(arglist__16547) {
        var x = cljs.core.first(arglist__16547);
        arglist__16547 = cljs.core.next(arglist__16547);
        var y = cljs.core.first(arglist__16547);
        arglist__16547 = cljs.core.next(arglist__16547);
        var z = cljs.core.first(arglist__16547);
        var args = cljs.core.rest(arglist__16547);
        return G__16545__delegate(x, y, z, args);
      };
      G__16545.cljs$core$IFn$_invoke$arity$variadic = G__16545__delegate;
      return G__16545;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__16548 = null;
          if (arguments.length > 3) {
            var G__16549__i = 0, G__16549__a = new Array(arguments.length - 3);
            while (G__16549__i < G__16549__a.length) {
              G__16549__a[G__16549__i] = arguments[G__16549__i + 3];
              ++G__16549__i;
            }
            G__16548 = new cljs.core.IndexedSeq(G__16549__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16548);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16415 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16415) : p1.call(null, G__16415);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var G__16416 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16416) : p2.call(null, G__16416);
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16418 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16418) : p1.call(null, G__16418);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__16420 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16420) : p1.call(null, G__16420);
          }();
          if (cljs.core.truth_(and__4262__auto____$1)) {
            var and__4262__auto____$2 = function() {
              var G__16422 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16422) : p2.call(null, G__16422);
            }();
            if (cljs.core.truth_(and__4262__auto____$2)) {
              var G__16423 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16423) : p2.call(null, G__16423);
            } else {
              return and__4262__auto____$2;
            }
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16425 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16425) : p1.call(null, G__16425);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__16427 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16427) : p1.call(null, G__16427);
          }();
          if (cljs.core.truth_(and__4262__auto____$1)) {
            var and__4262__auto____$2 = function() {
              var G__16429 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16429) : p1.call(null, G__16429);
            }();
            if (cljs.core.truth_(and__4262__auto____$2)) {
              var and__4262__auto____$3 = function() {
                var G__16431 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16431) : p2.call(null, G__16431);
              }();
              if (cljs.core.truth_(and__4262__auto____$3)) {
                var and__4262__auto____$4 = function() {
                  var G__16433 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16433) : p2.call(null, G__16433);
                }();
                if (cljs.core.truth_(and__4262__auto____$4)) {
                  var G__16434 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16434) : p2.call(null, G__16434);
                } else {
                  return and__4262__auto____$4;
                }
              } else {
                return and__4262__auto____$3;
              }
            } else {
              return and__4262__auto____$2;
            }
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__16550__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4262__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4262__auto__)) {
            return cljs.core.every_QMARK_(function(and__4262__auto__) {
              return function(p1__16348_SHARP_) {
                var and__4262__auto____$1 = function() {
                  var G__16436 = p1__16348_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16436) : p1.call(null, G__16436);
                }();
                if (cljs.core.truth_(and__4262__auto____$1)) {
                  var G__16437 = p1__16348_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16437) : p2.call(null, G__16437);
                } else {
                  return and__4262__auto____$1;
                }
              };
            }(and__4262__auto__), args);
          } else {
            return and__4262__auto__;
          }
        }());
      };
      var G__16550 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16551__i = 0, G__16551__a = new Array(arguments.length - 3);
          while (G__16551__i < G__16551__a.length) {
            G__16551__a[G__16551__i] = arguments[G__16551__i + 3];
            ++G__16551__i;
          }
          args = new cljs.core.IndexedSeq(G__16551__a, 0);
        }
        return G__16550__delegate.call(this, x, y, z, args);
      };
      G__16550.cljs$lang$maxFixedArity = 3;
      G__16550.cljs$lang$applyTo = function(arglist__16552) {
        var x = cljs.core.first(arglist__16552);
        arglist__16552 = cljs.core.next(arglist__16552);
        var y = cljs.core.first(arglist__16552);
        arglist__16552 = cljs.core.next(arglist__16552);
        var z = cljs.core.first(arglist__16552);
        var args = cljs.core.rest(arglist__16552);
        return G__16550__delegate(x, y, z, args);
      };
      G__16550.cljs$core$IFn$_invoke$arity$variadic = G__16550__delegate;
      return G__16550;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__16553 = null;
          if (arguments.length > 3) {
            var G__16554__i = 0, G__16554__a = new Array(arguments.length - 3);
            while (G__16554__i < G__16554__a.length) {
              G__16554__a[G__16554__i] = arguments[G__16554__i + 3];
              ++G__16554__i;
            }
            G__16553 = new cljs.core.IndexedSeq(G__16554__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16553);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16483 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16483) : p1.call(null, G__16483);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__16485 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16485) : p2.call(null, G__16485);
          }();
          if (cljs.core.truth_(and__4262__auto____$1)) {
            var G__16486 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16486) : p3.call(null, G__16486);
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16488 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16488) : p1.call(null, G__16488);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__16490 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16490) : p2.call(null, G__16490);
          }();
          if (cljs.core.truth_(and__4262__auto____$1)) {
            var and__4262__auto____$2 = function() {
              var G__16492 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16492) : p3.call(null, G__16492);
            }();
            if (cljs.core.truth_(and__4262__auto____$2)) {
              var and__4262__auto____$3 = function() {
                var G__16494 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16494) : p1.call(null, G__16494);
              }();
              if (cljs.core.truth_(and__4262__auto____$3)) {
                var and__4262__auto____$4 = function() {
                  var G__16496 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16496) : p2.call(null, G__16496);
                }();
                if (cljs.core.truth_(and__4262__auto____$4)) {
                  var G__16497 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16497) : p3.call(null, G__16497);
                } else {
                  return and__4262__auto____$4;
                }
              } else {
                return and__4262__auto____$3;
              }
            } else {
              return and__4262__auto____$2;
            }
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4262__auto__ = function() {
          var G__16499 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16499) : p1.call(null, G__16499);
        }();
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__16501 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16501) : p2.call(null, G__16501);
          }();
          if (cljs.core.truth_(and__4262__auto____$1)) {
            var and__4262__auto____$2 = function() {
              var G__16503 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16503) : p3.call(null, G__16503);
            }();
            if (cljs.core.truth_(and__4262__auto____$2)) {
              var and__4262__auto____$3 = function() {
                var G__16505 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16505) : p1.call(null, G__16505);
              }();
              if (cljs.core.truth_(and__4262__auto____$3)) {
                var and__4262__auto____$4 = function() {
                  var G__16507 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16507) : p2.call(null, G__16507);
                }();
                if (cljs.core.truth_(and__4262__auto____$4)) {
                  var and__4262__auto____$5 = function() {
                    var G__16509 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16509) : p3.call(null, G__16509);
                  }();
                  if (cljs.core.truth_(and__4262__auto____$5)) {
                    var and__4262__auto____$6 = function() {
                      var G__16511 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16511) : p1.call(null, G__16511);
                    }();
                    if (cljs.core.truth_(and__4262__auto____$6)) {
                      var and__4262__auto____$7 = function() {
                        var G__16513 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16513) : p2.call(null, G__16513);
                      }();
                      if (cljs.core.truth_(and__4262__auto____$7)) {
                        var G__16514 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16514) : p3.call(null, G__16514);
                      } else {
                        return and__4262__auto____$7;
                      }
                    } else {
                      return and__4262__auto____$6;
                    }
                  } else {
                    return and__4262__auto____$5;
                  }
                } else {
                  return and__4262__auto____$4;
                }
              } else {
                return and__4262__auto____$3;
              }
            } else {
              return and__4262__auto____$2;
            }
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__16555__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4262__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4262__auto__)) {
            return cljs.core.every_QMARK_(function(and__4262__auto__) {
              return function(p1__16349_SHARP_) {
                var and__4262__auto____$1 = function() {
                  var G__16516 = p1__16349_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16516) : p1.call(null, G__16516);
                }();
                if (cljs.core.truth_(and__4262__auto____$1)) {
                  var and__4262__auto____$2 = function() {
                    var G__16518 = p1__16349_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16518) : p2.call(null, G__16518);
                  }();
                  if (cljs.core.truth_(and__4262__auto____$2)) {
                    var G__16519 = p1__16349_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16519) : p3.call(null, G__16519);
                  } else {
                    return and__4262__auto____$2;
                  }
                } else {
                  return and__4262__auto____$1;
                }
              };
            }(and__4262__auto__), args);
          } else {
            return and__4262__auto__;
          }
        }());
      };
      var G__16555 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16556__i = 0, G__16556__a = new Array(arguments.length - 3);
          while (G__16556__i < G__16556__a.length) {
            G__16556__a[G__16556__i] = arguments[G__16556__i + 3];
            ++G__16556__i;
          }
          args = new cljs.core.IndexedSeq(G__16556__a, 0);
        }
        return G__16555__delegate.call(this, x, y, z, args);
      };
      G__16555.cljs$lang$maxFixedArity = 3;
      G__16555.cljs$lang$applyTo = function(arglist__16557) {
        var x = cljs.core.first(arglist__16557);
        arglist__16557 = cljs.core.next(arglist__16557);
        var y = cljs.core.first(arglist__16557);
        arglist__16557 = cljs.core.next(arglist__16557);
        var z = cljs.core.first(arglist__16557);
        var args = cljs.core.rest(arglist__16557);
        return G__16555__delegate(x, y, z, args);
      };
      G__16555.cljs$core$IFn$_invoke$arity$variadic = G__16555__delegate;
      return G__16555;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__16558 = null;
          if (arguments.length > 3) {
            var G__16559__i = 0, G__16559__a = new Array(arguments.length - 3);
            while (G__16559__i < G__16559__a.length) {
              G__16559__a[G__16559__i] = arguments[G__16559__i + 3];
              ++G__16559__i;
            }
            G__16558 = new cljs.core.IndexedSeq(G__16559__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16558);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__16350_SHARP_) {
            var G__16535 = x;
            return p1__16350_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16350_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16535) : p1__16350_SHARP_.call(null, G__16535);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__16351_SHARP_) {
            var and__4262__auto__ = function() {
              var G__16537 = x;
              return p1__16351_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16351_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16537) : p1__16351_SHARP_.call(null, G__16537);
            }();
            if (cljs.core.truth_(and__4262__auto__)) {
              var G__16538 = y;
              return p1__16351_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16351_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16538) : p1__16351_SHARP_.call(null, G__16538);
            } else {
              return and__4262__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__16352_SHARP_) {
            var and__4262__auto__ = function() {
              var G__16540 = x;
              return p1__16352_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16352_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16540) : p1__16352_SHARP_.call(null, G__16540);
            }();
            if (cljs.core.truth_(and__4262__auto__)) {
              var and__4262__auto____$1 = function() {
                var G__16542 = y;
                return p1__16352_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16352_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16542) : p1__16352_SHARP_.call(null, G__16542);
              }();
              if (cljs.core.truth_(and__4262__auto____$1)) {
                var G__16543 = z;
                return p1__16352_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16352_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16543) : p1__16352_SHARP_.call(null, G__16543);
              } else {
                return and__4262__auto____$1;
              }
            } else {
              return and__4262__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__16560__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4262__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4262__auto__)) {
              return cljs.core.every_QMARK_(function(and__4262__auto__, ps__$1) {
                return function(p1__16353_SHARP_) {
                  return cljs.core.every_QMARK_(p1__16353_SHARP_, args);
                };
              }(and__4262__auto__, ps__$1), ps__$1);
            } else {
              return and__4262__auto__;
            }
          }());
        };
        var G__16560 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16561__i = 0, G__16561__a = new Array(arguments.length - 3);
            while (G__16561__i < G__16561__a.length) {
              G__16561__a[G__16561__i] = arguments[G__16561__i + 3];
              ++G__16561__i;
            }
            args = new cljs.core.IndexedSeq(G__16561__a, 0);
          }
          return G__16560__delegate.call(this, x, y, z, args);
        };
        G__16560.cljs$lang$maxFixedArity = 3;
        G__16560.cljs$lang$applyTo = function(arglist__16562) {
          var x = cljs.core.first(arglist__16562);
          arglist__16562 = cljs.core.next(arglist__16562);
          var y = cljs.core.first(arglist__16562);
          arglist__16562 = cljs.core.next(arglist__16562);
          var z = cljs.core.first(arglist__16562);
          var args = cljs.core.rest(arglist__16562);
          return G__16560__delegate(x, y, z, args);
        };
        G__16560.cljs$core$IFn$_invoke$arity$variadic = G__16560__delegate;
        return G__16560;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__16563 = null;
            if (arguments.length > 3) {
              var G__16564__i = 0, G__16564__a = new Array(arguments.length - 3);
              while (G__16564__i < G__16564__a.length) {
                G__16564__a[G__16564__i] = arguments[G__16564__i + 3];
                ++G__16564__i;
              }
              G__16563 = new cljs.core.IndexedSeq(G__16564__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16563);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq16354) {
  var G__16355 = cljs.core.first(seq16354);
  var seq16354__$1 = cljs.core.next(seq16354);
  var G__16356 = cljs.core.first(seq16354__$1);
  var seq16354__$2 = cljs.core.next(seq16354__$1);
  var G__16357 = cljs.core.first(seq16354__$2);
  var seq16354__$3 = cljs.core.next(seq16354__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__16355, G__16356, G__16357, seq16354__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__16576 = arguments.length;
  switch(G__16576) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__16592 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16592) : p.call(null, G__16592);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4274__auto__ = function() {
        var G__16594 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16594) : p.call(null, G__16594);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var G__16595 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16595) : p.call(null, G__16595);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4274__auto__ = function() {
        var G__16597 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16597) : p.call(null, G__16597);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = function() {
          var G__16599 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16599) : p.call(null, G__16599);
        }();
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          var G__16600 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16600) : p.call(null, G__16600);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__16762__delegate = function(x, y, z, args) {
        var or__4274__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__16762 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16763__i = 0, G__16763__a = new Array(arguments.length - 3);
          while (G__16763__i < G__16763__a.length) {
            G__16763__a[G__16763__i] = arguments[G__16763__i + 3];
            ++G__16763__i;
          }
          args = new cljs.core.IndexedSeq(G__16763__a, 0);
        }
        return G__16762__delegate.call(this, x, y, z, args);
      };
      G__16762.cljs$lang$maxFixedArity = 3;
      G__16762.cljs$lang$applyTo = function(arglist__16764) {
        var x = cljs.core.first(arglist__16764);
        arglist__16764 = cljs.core.next(arglist__16764);
        var y = cljs.core.first(arglist__16764);
        arglist__16764 = cljs.core.next(arglist__16764);
        var z = cljs.core.first(arglist__16764);
        var args = cljs.core.rest(arglist__16764);
        return G__16762__delegate(x, y, z, args);
      };
      G__16762.cljs$core$IFn$_invoke$arity$variadic = G__16762__delegate;
      return G__16762;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__16765 = null;
          if (arguments.length > 3) {
            var G__16766__i = 0, G__16766__a = new Array(arguments.length - 3);
            while (G__16766__i < G__16766__a.length) {
              G__16766__a[G__16766__i] = arguments[G__16766__i + 3];
              ++G__16766__i;
            }
            G__16765 = new cljs.core.IndexedSeq(G__16766__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16765);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4274__auto__ = function() {
        var G__16632 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16632) : p1.call(null, G__16632);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var G__16633 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16633) : p2.call(null, G__16633);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4274__auto__ = function() {
        var G__16635 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16635) : p1.call(null, G__16635);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = function() {
          var G__16637 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16637) : p1.call(null, G__16637);
        }();
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          var or__4274__auto____$2 = function() {
            var G__16639 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16639) : p2.call(null, G__16639);
          }();
          if (cljs.core.truth_(or__4274__auto____$2)) {
            return or__4274__auto____$2;
          } else {
            var G__16640 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16640) : p2.call(null, G__16640);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4274__auto__ = function() {
        var G__16642 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16642) : p1.call(null, G__16642);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = function() {
          var G__16644 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16644) : p1.call(null, G__16644);
        }();
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          var or__4274__auto____$2 = function() {
            var G__16646 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16646) : p1.call(null, G__16646);
          }();
          if (cljs.core.truth_(or__4274__auto____$2)) {
            return or__4274__auto____$2;
          } else {
            var or__4274__auto____$3 = function() {
              var G__16648 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16648) : p2.call(null, G__16648);
            }();
            if (cljs.core.truth_(or__4274__auto____$3)) {
              return or__4274__auto____$3;
            } else {
              var or__4274__auto____$4 = function() {
                var G__16650 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16650) : p2.call(null, G__16650);
              }();
              if (cljs.core.truth_(or__4274__auto____$4)) {
                return or__4274__auto____$4;
              } else {
                var G__16651 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16651) : p2.call(null, G__16651);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__16767__delegate = function(x, y, z, args) {
        var or__4274__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return cljs.core.some(function(or__4274__auto__) {
            return function(p1__16565_SHARP_) {
              var or__4274__auto____$1 = function() {
                var G__16653 = p1__16565_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16653) : p1.call(null, G__16653);
              }();
              if (cljs.core.truth_(or__4274__auto____$1)) {
                return or__4274__auto____$1;
              } else {
                var G__16654 = p1__16565_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16654) : p2.call(null, G__16654);
              }
            };
          }(or__4274__auto__), args);
        }
      };
      var G__16767 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16768__i = 0, G__16768__a = new Array(arguments.length - 3);
          while (G__16768__i < G__16768__a.length) {
            G__16768__a[G__16768__i] = arguments[G__16768__i + 3];
            ++G__16768__i;
          }
          args = new cljs.core.IndexedSeq(G__16768__a, 0);
        }
        return G__16767__delegate.call(this, x, y, z, args);
      };
      G__16767.cljs$lang$maxFixedArity = 3;
      G__16767.cljs$lang$applyTo = function(arglist__16769) {
        var x = cljs.core.first(arglist__16769);
        arglist__16769 = cljs.core.next(arglist__16769);
        var y = cljs.core.first(arglist__16769);
        arglist__16769 = cljs.core.next(arglist__16769);
        var z = cljs.core.first(arglist__16769);
        var args = cljs.core.rest(arglist__16769);
        return G__16767__delegate(x, y, z, args);
      };
      G__16767.cljs$core$IFn$_invoke$arity$variadic = G__16767__delegate;
      return G__16767;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__16770 = null;
          if (arguments.length > 3) {
            var G__16771__i = 0, G__16771__a = new Array(arguments.length - 3);
            while (G__16771__i < G__16771__a.length) {
              G__16771__a[G__16771__i] = arguments[G__16771__i + 3];
              ++G__16771__i;
            }
            G__16770 = new cljs.core.IndexedSeq(G__16771__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16770);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4274__auto__ = function() {
        var G__16700 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16700) : p1.call(null, G__16700);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = function() {
          var G__16702 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16702) : p2.call(null, G__16702);
        }();
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          var G__16703 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16703) : p3.call(null, G__16703);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4274__auto__ = function() {
        var G__16705 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16705) : p1.call(null, G__16705);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = function() {
          var G__16707 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16707) : p2.call(null, G__16707);
        }();
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          var or__4274__auto____$2 = function() {
            var G__16709 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16709) : p3.call(null, G__16709);
          }();
          if (cljs.core.truth_(or__4274__auto____$2)) {
            return or__4274__auto____$2;
          } else {
            var or__4274__auto____$3 = function() {
              var G__16711 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16711) : p1.call(null, G__16711);
            }();
            if (cljs.core.truth_(or__4274__auto____$3)) {
              return or__4274__auto____$3;
            } else {
              var or__4274__auto____$4 = function() {
                var G__16713 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16713) : p2.call(null, G__16713);
              }();
              if (cljs.core.truth_(or__4274__auto____$4)) {
                return or__4274__auto____$4;
              } else {
                var G__16714 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16714) : p3.call(null, G__16714);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4274__auto__ = function() {
        var G__16716 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16716) : p1.call(null, G__16716);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = function() {
          var G__16718 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16718) : p2.call(null, G__16718);
        }();
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          var or__4274__auto____$2 = function() {
            var G__16720 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16720) : p3.call(null, G__16720);
          }();
          if (cljs.core.truth_(or__4274__auto____$2)) {
            return or__4274__auto____$2;
          } else {
            var or__4274__auto____$3 = function() {
              var G__16722 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16722) : p1.call(null, G__16722);
            }();
            if (cljs.core.truth_(or__4274__auto____$3)) {
              return or__4274__auto____$3;
            } else {
              var or__4274__auto____$4 = function() {
                var G__16724 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16724) : p2.call(null, G__16724);
              }();
              if (cljs.core.truth_(or__4274__auto____$4)) {
                return or__4274__auto____$4;
              } else {
                var or__4274__auto____$5 = function() {
                  var G__16726 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16726) : p3.call(null, G__16726);
                }();
                if (cljs.core.truth_(or__4274__auto____$5)) {
                  return or__4274__auto____$5;
                } else {
                  var or__4274__auto____$6 = function() {
                    var G__16728 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16728) : p1.call(null, G__16728);
                  }();
                  if (cljs.core.truth_(or__4274__auto____$6)) {
                    return or__4274__auto____$6;
                  } else {
                    var or__4274__auto____$7 = function() {
                      var G__16730 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16730) : p2.call(null, G__16730);
                    }();
                    if (cljs.core.truth_(or__4274__auto____$7)) {
                      return or__4274__auto____$7;
                    } else {
                      var G__16731 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16731) : p3.call(null, G__16731);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__16772__delegate = function(x, y, z, args) {
        var or__4274__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return cljs.core.some(function(or__4274__auto__) {
            return function(p1__16566_SHARP_) {
              var or__4274__auto____$1 = function() {
                var G__16733 = p1__16566_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16733) : p1.call(null, G__16733);
              }();
              if (cljs.core.truth_(or__4274__auto____$1)) {
                return or__4274__auto____$1;
              } else {
                var or__4274__auto____$2 = function() {
                  var G__16735 = p1__16566_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16735) : p2.call(null, G__16735);
                }();
                if (cljs.core.truth_(or__4274__auto____$2)) {
                  return or__4274__auto____$2;
                } else {
                  var G__16736 = p1__16566_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16736) : p3.call(null, G__16736);
                }
              }
            };
          }(or__4274__auto__), args);
        }
      };
      var G__16772 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16773__i = 0, G__16773__a = new Array(arguments.length - 3);
          while (G__16773__i < G__16773__a.length) {
            G__16773__a[G__16773__i] = arguments[G__16773__i + 3];
            ++G__16773__i;
          }
          args = new cljs.core.IndexedSeq(G__16773__a, 0);
        }
        return G__16772__delegate.call(this, x, y, z, args);
      };
      G__16772.cljs$lang$maxFixedArity = 3;
      G__16772.cljs$lang$applyTo = function(arglist__16774) {
        var x = cljs.core.first(arglist__16774);
        arglist__16774 = cljs.core.next(arglist__16774);
        var y = cljs.core.first(arglist__16774);
        arglist__16774 = cljs.core.next(arglist__16774);
        var z = cljs.core.first(arglist__16774);
        var args = cljs.core.rest(arglist__16774);
        return G__16772__delegate(x, y, z, args);
      };
      G__16772.cljs$core$IFn$_invoke$arity$variadic = G__16772__delegate;
      return G__16772;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__16775 = null;
          if (arguments.length > 3) {
            var G__16776__i = 0, G__16776__a = new Array(arguments.length - 3);
            while (G__16776__i < G__16776__a.length) {
              G__16776__a[G__16776__i] = arguments[G__16776__i + 3];
              ++G__16776__i;
            }
            G__16775 = new cljs.core.IndexedSeq(G__16776__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16775);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__16567_SHARP_) {
            var G__16752 = x;
            return p1__16567_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16567_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16752) : p1__16567_SHARP_.call(null, G__16752);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__16568_SHARP_) {
            var or__4274__auto__ = function() {
              var G__16754 = x;
              return p1__16568_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16568_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16754) : p1__16568_SHARP_.call(null, G__16754);
            }();
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              var G__16755 = y;
              return p1__16568_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16568_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16755) : p1__16568_SHARP_.call(null, G__16755);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__16569_SHARP_) {
            var or__4274__auto__ = function() {
              var G__16757 = x;
              return p1__16569_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16569_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16757) : p1__16569_SHARP_.call(null, G__16757);
            }();
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              var or__4274__auto____$1 = function() {
                var G__16759 = y;
                return p1__16569_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16569_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16759) : p1__16569_SHARP_.call(null, G__16759);
              }();
              if (cljs.core.truth_(or__4274__auto____$1)) {
                return or__4274__auto____$1;
              } else {
                var G__16760 = z;
                return p1__16569_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16569_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16760) : p1__16569_SHARP_.call(null, G__16760);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__16777__delegate = function(x, y, z, args) {
          var or__4274__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4274__auto__)) {
            return or__4274__auto__;
          } else {
            return cljs.core.some(function(or__4274__auto__, ps__$1) {
              return function(p1__16570_SHARP_) {
                return cljs.core.some(p1__16570_SHARP_, args);
              };
            }(or__4274__auto__, ps__$1), ps__$1);
          }
        };
        var G__16777 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16778__i = 0, G__16778__a = new Array(arguments.length - 3);
            while (G__16778__i < G__16778__a.length) {
              G__16778__a[G__16778__i] = arguments[G__16778__i + 3];
              ++G__16778__i;
            }
            args = new cljs.core.IndexedSeq(G__16778__a, 0);
          }
          return G__16777__delegate.call(this, x, y, z, args);
        };
        G__16777.cljs$lang$maxFixedArity = 3;
        G__16777.cljs$lang$applyTo = function(arglist__16779) {
          var x = cljs.core.first(arglist__16779);
          arglist__16779 = cljs.core.next(arglist__16779);
          var y = cljs.core.first(arglist__16779);
          arglist__16779 = cljs.core.next(arglist__16779);
          var z = cljs.core.first(arglist__16779);
          var args = cljs.core.rest(arglist__16779);
          return G__16777__delegate(x, y, z, args);
        };
        G__16777.cljs$core$IFn$_invoke$arity$variadic = G__16777__delegate;
        return G__16777;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__16780 = null;
            if (arguments.length > 3) {
              var G__16781__i = 0, G__16781__a = new Array(arguments.length - 3);
              while (G__16781__i < G__16781__a.length) {
                G__16781__a[G__16781__i] = arguments[G__16781__i + 3];
                ++G__16781__i;
              }
              G__16780 = new cljs.core.IndexedSeq(G__16781__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16780);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq16571) {
  var G__16572 = cljs.core.first(seq16571);
  var seq16571__$1 = cljs.core.next(seq16571);
  var G__16573 = cljs.core.first(seq16571__$1);
  var seq16571__$2 = cljs.core.next(seq16571__$1);
  var G__16574 = cljs.core.first(seq16571__$2);
  var seq16571__$3 = cljs.core.next(seq16571__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__16572, G__16573, G__16574, seq16571__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__16789 = arguments.length;
  switch(G__16789) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5326__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__16805 = null;
      var G__16805__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16805__1 = function(result) {
        var G__16790 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16790) : rf.call(null, G__16790);
      };
      var G__16805__2 = function(result, input) {
        var G__16791 = result;
        var G__16792 = function() {
          var G__16793 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16793) : f.call(null, G__16793);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16791, G__16792) : rf.call(null, G__16791, G__16792);
      };
      var G__16805__3 = function() {
        var G__16806__delegate = function(result, input, inputs) {
          var G__16794 = result;
          var G__16795 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16794, G__16795) : rf.call(null, G__16794, G__16795);
        };
        var G__16806 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__16807__i = 0, G__16807__a = new Array(arguments.length - 2);
            while (G__16807__i < G__16807__a.length) {
              G__16807__a[G__16807__i] = arguments[G__16807__i + 2];
              ++G__16807__i;
            }
            inputs = new cljs.core.IndexedSeq(G__16807__a, 0);
          }
          return G__16806__delegate.call(this, result, input, inputs);
        };
        G__16806.cljs$lang$maxFixedArity = 2;
        G__16806.cljs$lang$applyTo = function(arglist__16808) {
          var result = cljs.core.first(arglist__16808);
          arglist__16808 = cljs.core.next(arglist__16808);
          var input = cljs.core.first(arglist__16808);
          var inputs = cljs.core.rest(arglist__16808);
          return G__16806__delegate(result, input, inputs);
        };
        G__16806.cljs$core$IFn$_invoke$arity$variadic = G__16806__delegate;
        return G__16806;
      }();
      G__16805 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__16805__0.call(this);
          case 1:
            return G__16805__1.call(this, result);
          case 2:
            return G__16805__2.call(this, result, input);
          default:
            var G__16809 = null;
            if (arguments.length > 2) {
              var G__16810__i = 0, G__16810__a = new Array(arguments.length - 2);
              while (G__16810__i < G__16810__a.length) {
                G__16810__a[G__16810__i] = arguments[G__16810__i + 2];
                ++G__16810__i;
              }
              G__16809 = new cljs.core.IndexedSeq(G__16810__a, 0);
            }
            return G__16805__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__16809);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16805.cljs$lang$maxFixedArity = 2;
      G__16805.cljs$lang$applyTo = G__16805__3.cljs$lang$applyTo;
      G__16805.cljs$core$IFn$_invoke$arity$0 = G__16805__0;
      G__16805.cljs$core$IFn$_invoke$arity$1 = G__16805__1;
      G__16805.cljs$core$IFn$_invoke$arity$2 = G__16805__2;
      G__16805.cljs$core$IFn$_invoke$arity$variadic = G__16805__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__16805;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5159__auto___16811 = size;
        var i_16812 = 0;
        while (true) {
          if (i_16812 < n__5159__auto___16811) {
            cljs.core.chunk_append(b, function() {
              var G__16796 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16812);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16796) : f.call(null, G__16796);
            }());
            var G__16813 = i_16812 + 1;
            i_16812 = G__16813;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__16797 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16797) : f.call(null, G__16797);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__16798 = cljs.core.first(s1);
        var G__16799 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16798, G__16799) : f.call(null, G__16798, G__16799);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__16800 = cljs.core.first(s1);
        var G__16801 = cljs.core.first(s2);
        var G__16802 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16800, G__16801, G__16802) : f.call(null, G__16800, G__16801, G__16802);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__16782_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__16782_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq16783) {
  var G__16784 = cljs.core.first(seq16783);
  var seq16783__$1 = cljs.core.next(seq16783);
  var G__16785 = cljs.core.first(seq16783__$1);
  var seq16783__$2 = cljs.core.next(seq16783__$1);
  var G__16786 = cljs.core.first(seq16783__$2);
  var seq16783__$3 = cljs.core.next(seq16783__$2);
  var G__16787 = cljs.core.first(seq16783__$3);
  var seq16783__$4 = cljs.core.next(seq16783__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__16784, G__16785, G__16786, G__16787, seq16783__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__16815 = arguments.length;
  switch(G__16815) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__16820 = null;
        var G__16820__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16820__1 = function(result) {
          var G__16816 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16816) : rf.call(null, G__16816);
        };
        var G__16820__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__16817 = result;
            var G__16818 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16817, G__16818) : rf.call(null, G__16817, G__16818);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__16820 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16820__0.call(this);
            case 1:
              return G__16820__1.call(this, result);
            case 2:
              return G__16820__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16820.cljs$core$IFn$_invoke$arity$0 = G__16820__0;
        G__16820.cljs$core$IFn$_invoke$arity$1 = G__16820__1;
        G__16820.cljs$core$IFn$_invoke$arity$2 = G__16820__2;
        return G__16820;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__16822 = arguments.length;
  switch(G__16822) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__16827 = null;
        var G__16827__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16827__1 = function(result) {
          var G__16823 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16823) : rf.call(null, G__16823);
        };
        var G__16827__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__16824 = result;
            var G__16825 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16824, G__16825) : rf.call(null, G__16824, G__16825);
          }
        };
        G__16827 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16827__0.call(this);
            case 1:
              return G__16827__1.call(this, result);
            case 2:
              return G__16827__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16827.cljs$core$IFn$_invoke$arity$0 = G__16827__0;
        G__16827.cljs$core$IFn$_invoke$arity$1 = G__16827__1;
        G__16827.cljs$core$IFn$_invoke$arity$2 = G__16827__2;
        return G__16827;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__16828 = n__$1 - 1;
        var G__16829 = cljs.core.rest(s);
        n__$1 = G__16828;
        coll__$1 = G__16829;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__16831 = arguments.length;
  switch(G__16831) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__16833 = cljs.core.next(s);
      var G__16834 = cljs.core.next(lead);
      s = G__16833;
      lead = G__16834;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__16836 = arguments.length;
  switch(G__16836) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__16844 = null;
        var G__16844__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16844__1 = function(result) {
          var G__16837 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16837) : rf.call(null, G__16837);
        };
        var G__16844__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4262__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4262__auto__)) {
              var G__16838 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16838) : pred.call(null, G__16838);
            } else {
              return and__4262__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__16839 = result;
            var G__16840 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16839, G__16840) : rf.call(null, G__16839, G__16840);
          }
        };
        G__16844 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16844__0.call(this);
            case 1:
              return G__16844__1.call(this, result);
            case 2:
              return G__16844__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16844.cljs$core$IFn$_invoke$arity$0 = G__16844__0;
        G__16844.cljs$core$IFn$_invoke$arity$1 = G__16844__1;
        G__16844.cljs$core$IFn$_invoke$arity$2 = G__16844__2;
        return G__16844;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = s;
        if (and__4262__auto__) {
          var G__16842 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__16842) : pred__$1.call(null, G__16842);
        } else {
          return and__4262__auto__;
        }
      }())) {
        var G__16845 = pred__$1;
        var G__16846 = cljs.core.rest(s);
        pred__$1 = G__16845;
        coll__$1 = G__16846;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__16849 = arguments.length;
  switch(G__16849) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__16852 = arguments.length;
  switch(G__16852) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__16857 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16857) : f.call(null, G__16857);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__16862 = arguments.length;
  switch(G__16862) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq16858) {
  var G__16859 = cljs.core.first(seq16858);
  var seq16858__$1 = cljs.core.next(seq16858);
  var G__16860 = cljs.core.first(seq16858__$1);
  var seq16858__$2 = cljs.core.next(seq16858__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__16859, G__16860, seq16858__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__16865 = arguments.length;
  switch(G__16865) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__16874 = null;
        var G__16874__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16874__1 = function(result) {
          var G__16866 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16866) : rf.call(null, G__16866);
        };
        var G__16874__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__16867 = result;
              var G__16868 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16867, G__16868) : rf.call(null, G__16867, G__16868);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__16869 = sepr;
              var G__16870 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16869, G__16870) : rf.call(null, G__16869, G__16870);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__16871 = result;
            var G__16872 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16871, G__16872) : rf.call(null, G__16871, G__16872);
          }
        };
        G__16874 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16874__0.call(this);
            case 1:
              return G__16874__1.call(this, result);
            case 2:
              return G__16874__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16874.cljs$core$IFn$_invoke$arity$0 = G__16874__0;
        G__16874.cljs$core$IFn$_invoke$arity$1 = G__16874__1;
        G__16874.cljs$core$IFn$_invoke$arity$2 = G__16874__2;
        return G__16874;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__16886 = arguments.length;
  switch(G__16886) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5326__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq16883) {
  var G__16884 = cljs.core.first(seq16883);
  var seq16883__$1 = cljs.core.next(seq16883);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__16884, seq16883__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__16889 = arguments.length;
  switch(G__16889) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__16897 = null;
      var G__16897__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16897__1 = function(result) {
        var G__16890 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16890) : rf.call(null, G__16890);
      };
      var G__16897__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__16891 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16891) : pred.call(null, G__16891);
        }())) {
          var G__16892 = result;
          var G__16893 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16892, G__16893) : rf.call(null, G__16892, G__16893);
        } else {
          return result;
        }
      };
      G__16897 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__16897__0.call(this);
          case 1:
            return G__16897__1.call(this, result);
          case 2:
            return G__16897__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16897.cljs$core$IFn$_invoke$arity$0 = G__16897__0;
      G__16897.cljs$core$IFn$_invoke$arity$1 = G__16897__1;
      G__16897.cljs$core$IFn$_invoke$arity$2 = G__16897__2;
      return G__16897;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5159__auto___16898 = size;
        var i_16899 = 0;
        while (true) {
          if (i_16899 < n__5159__auto___16898) {
            if (cljs.core.truth_(function() {
              var G__16894 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16899);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16894) : pred.call(null, G__16894);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16899));
            } else {
            }
            var G__16900 = i_16899 + 1;
            i_16899 = G__16900;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__16895 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16895) : pred.call(null, G__16895);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__16902 = arguments.length;
  switch(G__16902) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__16910 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__16910) : branch_QMARK_.call(null, G__16910);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__16911 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__16911) : children.call(null, G__16911);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__16912_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__16912_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__16914 = arguments.length;
  switch(G__16914) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__16915 = to;
      if (G__16915) {
        var bit__4941__auto__ = G__16915.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4941__auto__ || G__16915.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__16916 = to;
    if (G__16916) {
      var bit__4941__auto__ = G__16916.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__4941__auto__ || G__16916.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__16924 = arguments.length;
  switch(G__16924) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5326__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__16925 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16925) : f.call(null, G__16925);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq16918) {
  var G__16919 = cljs.core.first(seq16918);
  var seq16918__$1 = cljs.core.next(seq16918);
  var G__16920 = cljs.core.first(seq16918__$1);
  var seq16918__$2 = cljs.core.next(seq16918__$1);
  var G__16921 = cljs.core.first(seq16918__$2);
  var seq16918__$3 = cljs.core.next(seq16918__$2);
  var G__16922 = cljs.core.first(seq16918__$3);
  var seq16918__$4 = cljs.core.next(seq16918__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__16919, G__16920, G__16921, G__16922, seq16918__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__16928 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16928) : pred.call(null, G__16928);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__16930 = arguments.length;
  switch(G__16930) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__16933 = arguments.length;
  switch(G__16933) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__16934 = m__$1;
        if (G__16934) {
          var bit__4948__auto__ = G__16934.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4948__auto__ || G__16934.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__16934.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__16934);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__16934);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__16936 = sentinel;
          var G__16937 = m__$2;
          var G__16938 = cljs.core.next(ks__$1);
          sentinel = G__16936;
          m__$1 = G__16937;
          ks__$1 = G__16938;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__16939, v) {
  var vec__16944 = p__16939;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16944, 0, null);
  var ks = cljs.core.nthnext(vec__16944, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__16953 = arguments.length;
  switch(G__16953) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5326__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__16954, f) {
  var vec__16955 = p__16954;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16955, 0, null);
  var ks = cljs.core.nthnext(vec__16955, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16956 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16956) : f.call(null, G__16956);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__16957, f, a) {
  var vec__16958 = p__16957;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16958, 0, null);
  var ks = cljs.core.nthnext(vec__16958, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16959 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__16960 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16959, G__16960) : f.call(null, G__16959, G__16960);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__16961, f, a, b) {
  var vec__16962 = p__16961;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16962, 0, null);
  var ks = cljs.core.nthnext(vec__16962, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16963 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__16964 = a;
      var G__16965 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16963, G__16964, G__16965) : f.call(null, G__16963, G__16964, G__16965);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__16966, f, a, b, c) {
  var vec__16967 = p__16966;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16967, 0, null);
  var ks = cljs.core.nthnext(vec__16967, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16968 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__16969 = a;
      var G__16970 = b;
      var G__16971 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16968, G__16969, G__16970, G__16971) : f.call(null, G__16968, G__16969, G__16970, G__16971);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__16972, f, a, b, c, args) {
  var vec__16973 = p__16972;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16973, 0, null);
  var ks = cljs.core.nthnext(vec__16973, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq16945) {
  var G__16946 = cljs.core.first(seq16945);
  var seq16945__$1 = cljs.core.next(seq16945);
  var G__16947 = cljs.core.first(seq16945__$1);
  var seq16945__$2 = cljs.core.next(seq16945__$1);
  var G__16948 = cljs.core.first(seq16945__$2);
  var seq16945__$3 = cljs.core.next(seq16945__$2);
  var G__16949 = cljs.core.first(seq16945__$3);
  var seq16945__$4 = cljs.core.next(seq16945__$3);
  var G__16950 = cljs.core.first(seq16945__$4);
  var seq16945__$5 = cljs.core.next(seq16945__$4);
  var G__16951 = cljs.core.first(seq16945__$5);
  var seq16945__$6 = cljs.core.next(seq16945__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__16946, G__16947, G__16948, G__16949, G__16950, G__16951, seq16945__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__16983 = arguments.length;
  switch(G__16983) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5326__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16984 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16984) : f.call(null, G__16984);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16985 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__16986 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16985, G__16986) : f.call(null, G__16985, G__16986);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16987 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__16988 = x;
    var G__16989 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16987, G__16988, G__16989) : f.call(null, G__16987, G__16988, G__16989);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16990 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__16991 = x;
    var G__16992 = y;
    var G__16993 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16990, G__16991, G__16992, G__16993) : f.call(null, G__16990, G__16991, G__16992, G__16993);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq16975) {
  var G__16976 = cljs.core.first(seq16975);
  var seq16975__$1 = cljs.core.next(seq16975);
  var G__16977 = cljs.core.first(seq16975__$1);
  var seq16975__$2 = cljs.core.next(seq16975__$1);
  var G__16978 = cljs.core.first(seq16975__$2);
  var seq16975__$3 = cljs.core.next(seq16975__$2);
  var G__16979 = cljs.core.first(seq16975__$3);
  var seq16975__$4 = cljs.core.next(seq16975__$3);
  var G__16980 = cljs.core.first(seq16975__$4);
  var seq16975__$5 = cljs.core.next(seq16975__$4);
  var G__16981 = cljs.core.first(seq16975__$5);
  var seq16975__$6 = cljs.core.next(seq16975__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__16976, G__16977, G__16978, G__16979, G__16980, G__16981, seq16975__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__16995 = ll - 5;
      var G__16996 = r;
      ll = G__16995;
      ret = G__16996;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__17001 = cljs.core.pv_aget(node, 0);
      var G__17002 = level - 5;
      node = G__17001;
      level = G__17002;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__17003 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__17004 = level - 5;
        node = G__17003;
        level = G__17004;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__17014 = init__$2;
              var G__17015 = j + i;
              var G__17016 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17014, G__17015, G__17016) : f.call(null, G__17014, G__17015, G__17016);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__17027 = j + 1;
              var G__17028 = init__$3;
              j = G__17027;
              init__$2 = G__17028;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17017 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17017) : cljs.core.deref.call(null, G__17017);
      } else {
        var G__17029 = i + len;
        var G__17030 = init__$2;
        i = G__17029;
        init__$1 = G__17030;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__17018 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__17018) : cljs.core.tv_editable_root.call(null, G__17018);
  }(), function() {
    var G__17019 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__17019) : cljs.core.tv_editable_tail.call(null, G__17019);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__17020 = init__$2;
              var G__17021 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17020, G__17021) : f.call(null, G__17020, G__17021);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__17031 = j + 1;
              var G__17032 = init__$3;
              j = G__17031;
              init__$2 = G__17032;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17022 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17022) : cljs.core.deref.call(null, G__17022);
      } else {
        var G__17033 = i + len;
        var G__17034 = init__$2;
        i = G__17033;
        init__$1 = G__17034;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__17023 = coll__$1;
      var G__17024 = cljs.core.first_array_for_longvec(coll__$1);
      var G__17025 = 0;
      var G__17026 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__17023, G__17024, G__17025, G__17026) : cljs.core.chunked_seq.call(null, G__17023, G__17024, G__17025, G__17026);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5159__auto___17035 = len;
    var i_17036 = 0;
    while (true) {
      if (i_17036 < n__5159__auto___17035) {
        new_tail[i_17036] = self__.tail[i_17036];
        var G__17037 = i_17036 + 1;
        i_17036 = G__17037;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__17038 = null;
  var G__17038__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__17038__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__17038 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17038__2.call(this, self__, k);
      case 3:
        return G__17038__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17038.cljs$core$IFn$_invoke$arity$2 = G__17038__2;
  G__17038.cljs$core$IFn$_invoke$arity$3 = G__17038__3;
  return G__17038;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args17013) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17013)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__17039 = i + 1;
        var G__17040 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__17039;
        out = G__17040;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq17041) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17041));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__17042 = self__.vec;
      var G__17043 = self__.node;
      var G__17044 = self__.i;
      var G__17045 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__17042, G__17043, G__17044, G__17045) : cljs.core.chunked_seq.call(null, G__17042, G__17043, G__17044, G__17045);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__17046 = self__.vec;
    var G__17047 = self__.i + self__.off;
    var G__17048 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__17046, G__17047, G__17048) : cljs.core.subvec.call(null, G__17046, G__17047, G__17048);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__17049 = self__.vec;
    var G__17050 = self__.i + self__.off;
    var G__17051 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__17049, G__17050, G__17051) : cljs.core.subvec.call(null, G__17049, G__17050, G__17051);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__17052 = self__.vec;
      var G__17053 = self__.node;
      var G__17054 = self__.i;
      var G__17055 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__17052, G__17053, G__17054, G__17055) : cljs.core.chunked_seq.call(null, G__17052, G__17053, G__17054, G__17055);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__17056 = self__.vec;
    var G__17057 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__17058 = end;
    var G__17059 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__17056, G__17057, G__17058, G__17059) : cljs.core.chunked_seq.call(null, G__17056, G__17057, G__17058, G__17059);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__17060 = self__.vec;
  var G__17061 = self__.node;
  var G__17062 = self__.i;
  var G__17063 = self__.off;
  var G__17064 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__17060, G__17061, G__17062, G__17063, G__17064) : cljs.core.chunked_seq.call(null, G__17060, G__17061, G__17062, G__17063, G__17064);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__17065 = self__.vec;
    var G__17066 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__17067 = end;
    var G__17068 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__17065, G__17066, G__17067, G__17068) : cljs.core.chunked_seq.call(null, G__17065, G__17066, G__17067, G__17068);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__17070 = arguments.length;
  switch(G__17070) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__17073 = init__$1;
        var G__17074 = j;
        var G__17075 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17073, G__17074, G__17075) : f.call(null, G__17073, G__17074, G__17075);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17076 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17076) : cljs.core.deref.call(null, G__17076);
      } else {
        var G__17098 = i + 1;
        var G__17099 = j + 1;
        var G__17100 = init__$2;
        i = G__17098;
        j = G__17099;
        init__$1 = G__17100;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__17077 = self__.meta;
  var G__17078 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__17079 = self__.start;
  var G__17080 = function() {
    var x__4586__auto__ = self__.end;
    var y__4587__auto__ = v_pos + 1;
    return x__4586__auto__ > y__4587__auto__ ? x__4586__auto__ : y__4587__auto__;
  }();
  var G__17081 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__17077, G__17078, G__17079, G__17080, G__17081) : cljs.core.build_subvec.call(null, G__17077, G__17078, G__17079, G__17080, G__17081);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__17082 = self__.meta;
    var G__17083 = self__.v;
    var G__17084 = self__.start;
    var G__17085 = self__.end - 1;
    var G__17086 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__17082, G__17083, G__17084, G__17085, G__17086) : cljs.core.build_subvec.call(null, G__17082, G__17083, G__17084, G__17085, G__17086);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__17088 = meta__$1;
  var G__17089 = self__.v;
  var G__17090 = self__.start;
  var G__17091 = self__.end;
  var G__17092 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__17088, G__17089, G__17090, G__17091, G__17092) : cljs.core.build_subvec.call(null, G__17088, G__17089, G__17090, G__17091, G__17092);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__17093 = self__.meta;
  var G__17094 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__17095 = self__.start;
  var G__17096 = self__.end + 1;
  var G__17097 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__17093, G__17094, G__17095, G__17096, G__17097) : cljs.core.build_subvec.call(null, G__17093, G__17094, G__17095, G__17096, G__17097);
};
cljs.core.Subvec.prototype.call = function() {
  var G__17101 = null;
  var G__17101__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__17101__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__17101 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17101__2.call(this, self__, k);
      case 3:
        return G__17101__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17101.cljs$core$IFn$_invoke$arity$2 = G__17101__2;
  G__17101.cljs$core$IFn$_invoke$arity$3 = G__17101__3;
  return G__17101;
}();
cljs.core.Subvec.prototype.apply = function(self__, args17072) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17072)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__17102 = meta;
      var G__17103 = v.v;
      var G__17104 = v.start + start;
      var G__17105 = v.start + end;
      var G__17106 = __hash;
      meta = G__17102;
      v = G__17103;
      start = G__17104;
      end = G__17105;
      __hash = G__17106;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__17108 = arguments.length;
  switch(G__17108) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj17113 = {};
    return obj17113;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__17121 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__17122 = level - 5;
        node = G__17121;
        level = G__17122;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__17126 = null;
  var G__17126__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17126__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17126 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17126__2.call(this, self__, k);
      case 3:
        return G__17126__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17126.cljs$core$IFn$_invoke$arity$2 = G__17126__2;
  G__17126.cljs$core$IFn$_invoke$arity$3 = G__17126__3;
  return G__17126;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args17123) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17123)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4274__auto__ = self__.front;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4274__auto__ = self__.rear;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__17127 = i + incr;
        i = G__17127;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__17128 = i + 1;
      var G__17129 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__17128;
      out = G__17129;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj17133 = {};
    return obj17133;
  }();
  var l = ks.length;
  var i_17134 = 0;
  while (true) {
    if (i_17134 < l) {
      var k_17135 = ks[i_17134];
      new_obj[k_17135] = obj[k_17135];
      var G__17136 = i_17134 + 1;
      i_17134 = G__17136;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = function() {
      var G__17140 = k;
      return goog.isString(G__17140);
    }();
    if (cljs.core.truth_(and__4262__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4262__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__17141 = init__$1;
        var G__17142 = k;
        var G__17143 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17141, G__17142, G__17143) : f.call(null, G__17141, G__17142, G__17143);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17144 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17144) : cljs.core.deref.call(null, G__17144);
      } else {
        var G__17150 = cljs.core.rest(keys__$1);
        var G__17151 = init__$2;
        keys__$1 = G__17150;
        init__$1 = G__17151;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = function() {
      var G__17146 = k;
      return goog.isString(G__17146);
    }();
    if (cljs.core.truth_(and__4262__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4262__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__17147 = k;
    return goog.isString(G__17147);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = function() {
      var G__17149 = k;
      return goog.isString(G__17149);
    }();
    if (cljs.core.truth_(and__4262__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4262__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__17137_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17137_SHARP_, self__.strobj[p1__17137_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__17152 = null;
  var G__17152__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17152__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17152 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17152__2.call(this, self__, k);
      case 3:
        return G__17152__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17152.cljs$core$IFn$_invoke$arity$2 = G__17152__2;
  G__17152.cljs$core$IFn$_invoke$arity$3 = G__17152__3;
  return G__17152;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args17138) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17138)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj17154 = {};
  return obj17154;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__17155 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17155, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17155, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__17156 = i + 2;
        i = G__17156;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__17157 = i + 2;
        i = G__17157;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__17158 = i + 2;
        i = G__17158;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__17159 = i + 2;
        i = G__17159;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__17160 = i + 2;
        i = G__17160;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = function() {
        var G__17164 = k;
        return goog.isString(G__17164);
      }();
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_17165 = 0;
  while (true) {
    if (i_17165 < l) {
      narr[i_17165] = arr[i_17165];
      var G__17166 = i_17165 + 1;
      i_17165 = G__17166;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17168 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__17168) : cljs.core.keys.call(null, G__17168);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17169 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__17169) : cljs.core.vals.call(null, G__17169);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17170 = cljs.core.seq(coll);
  var chunk__17171 = null;
  var count__17172 = 0;
  var i__17173 = 0;
  while (true) {
    if (i__17173 < count__17172) {
      var vec__17174 = chunk__17171.cljs$core$IIndexed$_nth$arity$2(null, i__17173);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17174, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17174, 1, null);
      var G__17175_17188 = v;
      var G__17176_17189 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17175_17188, G__17176_17189) : f.call(null, G__17175_17188, G__17176_17189);
      var G__17190 = seq__17170;
      var G__17191 = chunk__17171;
      var G__17192 = count__17172;
      var G__17193 = i__17173 + 1;
      seq__17170 = G__17190;
      chunk__17171 = G__17191;
      count__17172 = G__17192;
      i__17173 = G__17193;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17170);
      if (temp__4126__auto__) {
        var seq__17170__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17170__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17170__$1);
          var G__17194 = cljs.core.chunk_rest(seq__17170__$1);
          var G__17195 = c__5059__auto__;
          var G__17196 = cljs.core.count(c__5059__auto__);
          var G__17197 = 0;
          seq__17170 = G__17194;
          chunk__17171 = G__17195;
          count__17172 = G__17196;
          i__17173 = G__17197;
          continue;
        } else {
          var vec__17177 = cljs.core.first(seq__17170__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17177, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17177, 1, null);
          var G__17178_17198 = v;
          var G__17179_17199 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17178_17198, G__17179_17199) : f.call(null, G__17178_17198, G__17179_17199);
          var G__17200 = cljs.core.next(seq__17170__$1);
          var G__17201 = null;
          var G__17202 = 0;
          var G__17203 = 0;
          seq__17170 = G__17200;
          chunk__17171 = G__17201;
          count__17172 = G__17202;
          i__17173 = G__17203;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__17180 = init__$1;
        var G__17181 = self__.arr[i];
        var G__17182 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17180, G__17181, G__17182) : f.call(null, G__17180, G__17181, G__17182);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17183 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17183) : cljs.core.deref.call(null, G__17183);
      } else {
        var G__17204 = i + 2;
        var G__17205 = init__$2;
        i = G__17204;
        init__$1 = G__17205;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__17184 = other;
    if (G__17184) {
      var bit__4941__auto__ = G__17184.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4941__auto__ || G__17184.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__17206 = i + 2;
              i = G__17206;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj17186 = {};
    return obj17186;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__17207 = s + 2;
            var G__17208 = d;
            s = G__17207;
            d = G__17208;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__17209 = s + 2;
            var G__17210 = d + 2;
            s = G__17209;
            d = G__17210;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__17187 = cljs.core.aclone(self__.arr);
        G__17187[idx + 1] = v;
        return G__17187;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__17211 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__17212 = cljs.core.next(es);
          ret = G__17211;
          es = G__17212;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__17213 = null;
  var G__17213__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17213__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17213 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17213__2.call(this, self__, k);
      case 3:
        return G__17213__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17213.cljs$core$IFn$_invoke$arity$2 = G__17213__2;
  G__17213.cljs$core$IFn$_invoke$arity$3 = G__17213__3;
  return G__17213;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args17167) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17167)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_17214 = 0;
    while (true) {
      if (i_17214 < arr__$1.length) {
        var k_17215 = arr__$1[i_17214];
        var v_17216 = arr__$1[i_17214 + 1];
        var idx_17217 = cljs.core.array_index_of(ret, k_17215);
        if (idx_17217 === -1) {
          ret.push(k_17215);
          ret.push(v_17216);
        } else {
        }
        var G__17218 = i_17214 + 2;
        i_17214 = G__17218;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__17219_17227 = self__.arr;
      G__17219_17227.pop();
      G__17219_17227.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__17220 = self__.len;
          var G__17221 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__17220, G__17221) : cljs.core.array__GT_transient_hash_map.call(null, G__17220, G__17221);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__17222 = o;
      if (G__17222) {
        var bit__4948__auto__ = G__17222.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4948__auto__ || G__17222.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17222.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17222);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17222);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__17223 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17223) : cljs.core.key.call(null, G__17223);
      }(), function() {
        var G__17224 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17224) : cljs.core.val.call(null, G__17224);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__17228 = cljs.core.next(es);
          var G__17229 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__17225 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17225) : cljs.core.key.call(null, G__17225);
          }(), function() {
            var G__17226 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17226) : cljs.core.val.call(null, G__17226);
          }());
          es = G__17228;
          tcoll__$2 = G__17229;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__17230 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__17231 = i + 2;
      out = G__17230;
      i = G__17231;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__17233 = arguments.length;
  switch(G__17233) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__17234 = cljs.core.aclone(arr);
  G__17234[i] = a;
  return G__17234;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__17235 = cljs.core.aclone(arr);
  G__17235[i] = a;
  G__17235[j] = b;
  return G__17235;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__17238 = arguments.length;
  switch(G__17238) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__17244 = init__$1;
          var G__17245 = k;
          var G__17246 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17244, G__17245, G__17246) : f.call(null, G__17244, G__17245, G__17246);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17247 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17247) : cljs.core.deref.call(null, G__17247);
      } else {
        var G__17248 = i + 2;
        var G__17249 = init__$2;
        i = G__17248;
        init__$1 = G__17249;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__17250 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__17250) : cljs.core.create_inode_seq.call(null, G__17250);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_17264 = 0;
        var j_17265 = 0;
        while (true) {
          if (i_17264 < 32) {
            if ((self__.bitmap >>> i_17264 & 1) === 0) {
              var G__17266 = i_17264 + 1;
              var G__17267 = j_17265;
              i_17264 = G__17266;
              j_17265 = G__17267;
              continue;
            } else {
              nodes[i_17264] = !(self__.arr[j_17265] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_17265]), self__.arr[j_17265], self__.arr[j_17265 + 1], added_leaf_QMARK_) : self__.arr[j_17265 + 1];
              var G__17268 = i_17264 + 1;
              var G__17269 = j_17265 + 2;
              i_17264 = G__17268;
              j_17265 = G__17269;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__17251 = edit__$1;
          var G__17252 = shift + 5;
          var G__17253 = key_or_nil;
          var G__17254 = val_or_node;
          var G__17255 = hash;
          var G__17256 = key;
          var G__17257 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__17251, G__17252, G__17253, G__17254, G__17255, G__17256, G__17257) : cljs.core.create_node.call(null, G__17251, G__17252, G__17253, G__17254, G__17255, G__17256, G__17257);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_17270 = 0;
      var j_17271 = 0;
      while (true) {
        if (i_17270 < 32) {
          if ((self__.bitmap >>> i_17270 & 1) === 0) {
            var G__17272 = i_17270 + 1;
            var G__17273 = j_17271;
            i_17270 = G__17272;
            j_17271 = G__17273;
            continue;
          } else {
            nodes[i_17270] = !(self__.arr[j_17271] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_17271]), self__.arr[j_17271], self__.arr[j_17271 + 1], added_leaf_QMARK_) : self__.arr[j_17271 + 1];
            var G__17274 = i_17270 + 1;
            var G__17275 = j_17271 + 2;
            i_17270 = G__17274;
            j_17271 = G__17275;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__17258 = shift + 5;
          var G__17259 = key_or_nil;
          var G__17260 = val_or_node;
          var G__17261 = hash;
          var G__17262 = key;
          var G__17263 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__17258, G__17259, G__17260, G__17261, G__17262, G__17263) : cljs.core.create_node.call(null, G__17258, G__17259, G__17260, G__17261, G__17262, G__17263);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__17276 = i + 1;
        var G__17277 = j + 2;
        var G__17278 = bitmap | 1 << i;
        i = G__17276;
        j = G__17277;
        bitmap = G__17278;
        continue;
      } else {
        var G__17279 = i + 1;
        var G__17280 = j;
        var G__17281 = bitmap;
        i = G__17279;
        j = G__17280;
        bitmap = G__17281;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__17282 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__17282) : cljs.core.create_array_node_seq.call(null, G__17282);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__17283 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17283) : cljs.core.deref.call(null, G__17283);
        } else {
          var G__17284 = i + 1;
          var G__17285 = init__$2;
          i = G__17284;
          init__$1 = G__17285;
          continue;
        }
      } else {
        var G__17286 = i + 1;
        var G__17287 = init__$1;
        i = G__17286;
        init__$1 = G__17287;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__17288 = i + 2;
        i = G__17288;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__17289 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__17289) : cljs.core.create_inode_seq.call(null, G__17289);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__17291 = arguments.length;
  switch(G__17291) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__17293 = self__.nodes;
    var G__17294 = self__.i + 2;
    var G__17295 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__17293, G__17294, G__17295) : cljs.core.create_inode_seq.call(null, G__17293, G__17294, G__17295);
  } else {
    var G__17296 = self__.nodes;
    var G__17297 = self__.i;
    var G__17298 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__17296, G__17297, G__17298) : cljs.core.create_inode_seq.call(null, G__17296, G__17297, G__17298);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__17300 = arguments.length;
  switch(G__17300) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4124__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var node = temp__4124__auto__;
            var temp__4124__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var node_seq = temp__4124__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__17302 = j + 2;
              j = G__17302;
              continue;
            }
          } else {
            var G__17303 = j + 2;
            j = G__17303;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__17304 = null;
  var G__17305 = self__.nodes;
  var G__17306 = self__.i;
  var G__17307 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__17304, G__17305, G__17306, G__17307) : cljs.core.create_array_node_seq.call(null, G__17304, G__17305, G__17306, G__17307);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__17309 = arguments.length;
  switch(G__17309) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4124__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4124__auto__)) {
          var nj = temp__4124__auto__;
          var temp__4124__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4124__auto____$1)) {
            var ns = temp__4124__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__17311 = j + 1;
            j = G__17311;
            continue;
          }
        } else {
          var G__17312 = j + 1;
          j = G__17312;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17314 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__17314) : cljs.core.keys.call(null, G__17314);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17315 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__17315) : cljs.core.vals.call(null, G__17315);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17316 = cljs.core.seq(coll);
  var chunk__17317 = null;
  var count__17318 = 0;
  var i__17319 = 0;
  while (true) {
    if (i__17319 < count__17318) {
      var vec__17320 = chunk__17317.cljs$core$IIndexed$_nth$arity$2(null, i__17319);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17320, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17320, 1, null);
      var G__17321_17332 = v;
      var G__17322_17333 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17321_17332, G__17322_17333) : f.call(null, G__17321_17332, G__17322_17333);
      var G__17334 = seq__17316;
      var G__17335 = chunk__17317;
      var G__17336 = count__17318;
      var G__17337 = i__17319 + 1;
      seq__17316 = G__17334;
      chunk__17317 = G__17335;
      count__17318 = G__17336;
      i__17319 = G__17337;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17316);
      if (temp__4126__auto__) {
        var seq__17316__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17316__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17316__$1);
          var G__17338 = cljs.core.chunk_rest(seq__17316__$1);
          var G__17339 = c__5059__auto__;
          var G__17340 = cljs.core.count(c__5059__auto__);
          var G__17341 = 0;
          seq__17316 = G__17338;
          chunk__17317 = G__17339;
          count__17318 = G__17340;
          i__17319 = G__17341;
          continue;
        } else {
          var vec__17323 = cljs.core.first(seq__17316__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17323, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17323, 1, null);
          var G__17324_17342 = v;
          var G__17325_17343 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17324_17342, G__17325_17343) : f.call(null, G__17324_17342, G__17325_17343);
          var G__17344 = cljs.core.next(seq__17316__$1);
          var G__17345 = null;
          var G__17346 = 0;
          var G__17347 = 0;
          seq__17316 = G__17344;
          chunk__17317 = G__17345;
          count__17318 = G__17346;
          i__17319 = G__17347;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__17326 = init;
    var G__17327 = null;
    var G__17328 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17326, G__17327, G__17328) : f.call(null, G__17326, G__17327, G__17328);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__17329 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17329) : cljs.core.deref.call(null, G__17329);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj17331 = {};
    return obj17331;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__17348 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__17349 = cljs.core.next(es);
          ret = G__17348;
          es = G__17349;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__17350 = null;
  var G__17350__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17350__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17350 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17350__2.call(this, self__, k);
      case 3:
        return G__17350__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17350.cljs$core$IFn$_invoke$arity$2 = G__17350__2;
  G__17350.cljs$core$IFn$_invoke$arity$3 = G__17350__3;
  return G__17350;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args17313) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17313)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__17351 = i + 2;
      var G__17352 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__17351;
      ret = G__17352;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__17353 = i + 1;
      var G__17354 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__17353;
      out = G__17354;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__17355 = o;
      if (G__17355) {
        var bit__4948__auto__ = G__17355.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4948__auto__ || G__17355.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17355.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17355);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17355);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__17356 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17356) : cljs.core.key.call(null, G__17356);
      }(), function() {
        var G__17357 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17357) : cljs.core.val.call(null, G__17357);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__17360 = cljs.core.next(es);
          var G__17361 = tcoll__$1.assoc_BANG_(function() {
            var G__17358 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17358) : cljs.core.key.call(null, G__17358);
          }(), function() {
            var G__17359 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17359) : cljs.core.val.call(null, G__17359);
          }());
          es = G__17360;
          tcoll__$1 = G__17361;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__17362 = ascending_QMARK_ ? t.left : t.right;
      var G__17363 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__17362;
      stack__$1 = G__17363;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__17376 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17376) : cljs.core.deref.call(null, G__17376);
  } else {
    var init__$2 = function() {
      var G__17377 = init__$1;
      var G__17378 = node.key;
      var G__17379 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17377, G__17378, G__17379) : f.call(null, G__17377, G__17378, G__17379);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__17380 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17380) : cljs.core.deref.call(null, G__17380);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__17381 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17381) : cljs.core.deref.call(null, G__17381);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__17383 = null;
  var G__17383__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17383__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17383 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17383__2.call(this, self__, k);
      case 3:
        return G__17383__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17383.cljs$core$IFn$_invoke$arity$2 = G__17383__2;
  G__17383.cljs$core$IFn$_invoke$arity$3 = G__17383__3;
  return G__17383;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args17382) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17382)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__17385 = null;
  var G__17385__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17385__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17385 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17385__2.call(this, self__, k);
      case 3:
        return G__17385__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17385.cljs$core$IFn$_invoke$arity$2 = G__17385__2;
  G__17385.cljs$core$IFn$_invoke$arity$3 = G__17385__3;
  return G__17385;
}();
cljs.core.RedNode.prototype.apply = function(self__, args17384) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17384)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__17398 = k;
      var G__17399 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17398, G__17399) : comp.call(null, G__17398, G__17399);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__17418 = k;
      var G__17419 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17418, G__17419) : comp.call(null, G__17418, G__17419);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__17430 = k;
    var G__17431 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17430, G__17431) : comp.call(null, G__17430, G__17431);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17433 = cljs.core.seq(coll);
  var chunk__17434 = null;
  var count__17435 = 0;
  var i__17436 = 0;
  while (true) {
    if (i__17436 < count__17435) {
      var vec__17437 = chunk__17434.cljs$core$IIndexed$_nth$arity$2(null, i__17436);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17437, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17437, 1, null);
      var G__17438_17450 = v;
      var G__17439_17451 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17438_17450, G__17439_17451) : f.call(null, G__17438_17450, G__17439_17451);
      var G__17452 = seq__17433;
      var G__17453 = chunk__17434;
      var G__17454 = count__17435;
      var G__17455 = i__17436 + 1;
      seq__17433 = G__17452;
      chunk__17434 = G__17453;
      count__17435 = G__17454;
      i__17436 = G__17455;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17433);
      if (temp__4126__auto__) {
        var seq__17433__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17433__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17433__$1);
          var G__17456 = cljs.core.chunk_rest(seq__17433__$1);
          var G__17457 = c__5059__auto__;
          var G__17458 = cljs.core.count(c__5059__auto__);
          var G__17459 = 0;
          seq__17433 = G__17456;
          chunk__17434 = G__17457;
          count__17435 = G__17458;
          i__17436 = G__17459;
          continue;
        } else {
          var vec__17440 = cljs.core.first(seq__17433__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17440, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17440, 1, null);
          var G__17441_17460 = v;
          var G__17442_17461 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17441_17460, G__17442_17461) : f.call(null, G__17441_17460, G__17442_17461);
          var G__17462 = cljs.core.next(seq__17433__$1);
          var G__17463 = null;
          var G__17464 = 0;
          var G__17465 = 0;
          seq__17433 = G__17462;
          chunk__17434 = G__17463;
          count__17435 = G__17464;
          i__17436 = G__17465;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17443 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__17443) : cljs.core.keys.call(null, G__17443);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17444 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__17444) : cljs.core.vals.call(null, G__17444);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__17445 = k;
        var G__17446 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__17445, G__17446) : self__.comp.call(null, G__17445, G__17446);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__17466 = t.left;
          t = G__17466;
          continue;
        } else {
          var G__17467 = t.right;
          t = G__17467;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__17468 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__17469 = cljs.core.next(es);
          ret = G__17468;
          es = G__17469;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__17470 = null;
  var G__17470__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17470__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17470 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17470__2.call(this, self__, k);
      case 3:
        return G__17470__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17470.cljs$core$IFn$_invoke$arity$2 = G__17470__2;
  G__17470.cljs$core$IFn$_invoke$arity$3 = G__17470__3;
  return G__17470;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args17432) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17432)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__17447 = k;
          var G__17448 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__17447, G__17448) : self__.comp.call(null, G__17447, G__17448);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__17471 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__17472 = t.left;
              stack = G__17471;
              t = G__17472;
              continue;
            } else {
              var G__17473 = stack;
              var G__17474 = t.right;
              stack = G__17473;
              t = G__17474;
              continue;
            }
          } else {
            if (c > 0) {
              var G__17475 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__17476 = t.right;
              stack = G__17475;
              t = G__17476;
              continue;
            } else {
              var G__17477 = stack;
              var G__17478 = t.left;
              stack = G__17477;
              t = G__17478;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__17449 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17449) : cljs.core.key.call(null, G__17449);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__17480 = cljs.core.nnext(in$);
      var G__17481 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__17480;
      out = G__17481;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq17479) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17479));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq17482) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17482));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj17485 = {};
    return obj17485;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__17486 = cljs.core.nnext(kvs);
      kvs = G__17486;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq17483) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17483));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__17488 = cljs.core.nnext(in$);
      var G__17489 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__17488;
      out = G__17489;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq17487) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17487));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__17492 = cljs.core.nnext(in$);
      var G__17493 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__17492;
      out = G__17493;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq17490) {
  var G__17491 = cljs.core.first(seq17490);
  var seq17490__$1 = cljs.core.next(seq17490);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__17491, seq17490__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17494 = self__.mseq;
    if (G__17494) {
      var bit__4948__auto__ = G__17494.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4948__auto__ || G__17494.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17494.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17494);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17494);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17495 = self__.mseq;
    if (G__17495) {
      var bit__4948__auto__ = G__17495.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4948__auto__ || G__17495.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17495.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17495);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17495);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17496 = self__.mseq;
    if (G__17496) {
      var bit__4948__auto__ = G__17496.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4948__auto__ || G__17496.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17496.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17496);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17496);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17497 = self__.mseq;
    if (G__17497) {
      var bit__4948__auto__ = G__17497.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4948__auto__ || G__17497.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17497.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17497);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17497);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__17498_SHARP_, p2__17499_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4274__auto__ = p1__17498_SHARP_;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__17499_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq17500) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17500));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__17503 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__17504 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17503, G__17504) : f.call(null, G__17503, G__17504);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4274__auto__ = m1;
          if (cljs.core.truth_(or__4274__auto__)) {
            return or__4274__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq17501) {
  var G__17502 = cljs.core.first(seq17501);
  var seq17501__$1 = cljs.core.next(seq17501);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__17502, seq17501__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__17505 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__17506 = cljs.core.next(keys);
      ret = G__17505;
      keys = G__17506;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17509 = cljs.core.seq(coll);
  var chunk__17510 = null;
  var count__17511 = 0;
  var i__17512 = 0;
  while (true) {
    if (i__17512 < count__17511) {
      var vec__17513 = chunk__17510.cljs$core$IIndexed$_nth$arity$2(null, i__17512);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17513, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17513, 1, null);
      var G__17514_17519 = v;
      var G__17515_17520 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17514_17519, G__17515_17520) : f.call(null, G__17514_17519, G__17515_17520);
      var G__17521 = seq__17509;
      var G__17522 = chunk__17510;
      var G__17523 = count__17511;
      var G__17524 = i__17512 + 1;
      seq__17509 = G__17521;
      chunk__17510 = G__17522;
      count__17511 = G__17523;
      i__17512 = G__17524;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17509);
      if (temp__4126__auto__) {
        var seq__17509__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17509__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17509__$1);
          var G__17525 = cljs.core.chunk_rest(seq__17509__$1);
          var G__17526 = c__5059__auto__;
          var G__17527 = cljs.core.count(c__5059__auto__);
          var G__17528 = 0;
          seq__17509 = G__17525;
          chunk__17510 = G__17526;
          count__17511 = G__17527;
          i__17512 = G__17528;
          continue;
        } else {
          var vec__17516 = cljs.core.first(seq__17509__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17516, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17516, 1, null);
          var G__17517_17529 = v;
          var G__17518_17530 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17517_17529, G__17518_17530) : f.call(null, G__17517_17529, G__17518_17530);
          var G__17531 = cljs.core.next(seq__17509__$1);
          var G__17532 = null;
          var G__17533 = 0;
          var G__17534 = 0;
          seq__17509 = G__17531;
          chunk__17510 = G__17532;
          count__17511 = G__17533;
          i__17512 = G__17534;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__17507_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__17507_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__17535 = null;
  var G__17535__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17535__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17535 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17535__2.call(this, self__, k);
      case 3:
        return G__17535__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17535.cljs$core$IFn$_invoke$arity$2 = G__17535__2;
  G__17535.cljs$core$IFn$_invoke$arity$3 = G__17535__3;
  return G__17535;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args17508) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17508)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__17536 = i + 1;
        var G__17537 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__17536;
        out = G__17537;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__17538 = i + 1;
        var G__17539 = cljs.core._conj_BANG_(out, items[i]);
        i = G__17538;
        out = G__17539;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__17541 = null;
  var G__17541__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__17541__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__17541 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17541__2.call(this, self__, k);
      case 3:
        return G__17541__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17541.cljs$core$IFn$_invoke$arity$2 = G__17541__2;
  G__17541.cljs$core$IFn$_invoke$arity$3 = G__17541__3;
  return G__17541;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args17540) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17540)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17544 = cljs.core.seq(coll);
  var chunk__17545 = null;
  var count__17546 = 0;
  var i__17547 = 0;
  while (true) {
    if (i__17547 < count__17546) {
      var vec__17548 = chunk__17545.cljs$core$IIndexed$_nth$arity$2(null, i__17547);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17548, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17548, 1, null);
      var G__17549_17554 = v;
      var G__17550_17555 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17549_17554, G__17550_17555) : f.call(null, G__17549_17554, G__17550_17555);
      var G__17556 = seq__17544;
      var G__17557 = chunk__17545;
      var G__17558 = count__17546;
      var G__17559 = i__17547 + 1;
      seq__17544 = G__17556;
      chunk__17545 = G__17557;
      count__17546 = G__17558;
      i__17547 = G__17559;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17544);
      if (temp__4126__auto__) {
        var seq__17544__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17544__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17544__$1);
          var G__17560 = cljs.core.chunk_rest(seq__17544__$1);
          var G__17561 = c__5059__auto__;
          var G__17562 = cljs.core.count(c__5059__auto__);
          var G__17563 = 0;
          seq__17544 = G__17560;
          chunk__17545 = G__17561;
          count__17546 = G__17562;
          i__17547 = G__17563;
          continue;
        } else {
          var vec__17551 = cljs.core.first(seq__17544__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17551, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17551, 1, null);
          var G__17552_17564 = v;
          var G__17553_17565 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17552_17564, G__17553_17565) : f.call(null, G__17552_17564, G__17553_17565);
          var G__17566 = cljs.core.next(seq__17544__$1);
          var G__17567 = null;
          var G__17568 = 0;
          var G__17569 = 0;
          seq__17544 = G__17566;
          chunk__17545 = G__17567;
          count__17546 = G__17568;
          i__17547 = G__17569;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__17542_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__17542_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__17570 = null;
  var G__17570__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17570__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17570 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17570__2.call(this, self__, k);
      case 3:
        return G__17570__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17570.cljs$core$IFn$_invoke$arity$2 = G__17570__2;
  G__17570.cljs$core$IFn$_invoke$arity$3 = G__17570__3;
  return G__17570;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args17543) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17543)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5153__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5153__auto__.length) {
        var G__17571 = i + 1;
        var G__17572 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__17571;
        res = G__17572;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__17573 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__17574 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__17573;
          out = G__17574;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__17577 = arguments.length;
  switch(G__17577) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5326__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq17575) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17575));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq17579) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17579));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq17580) {
  var G__17581 = cljs.core.first(seq17580);
  var seq17580__$1 = cljs.core.next(seq17580);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__17581, seq17580__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__17585 = arguments.length;
  switch(G__17585) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__17582_SHARP_) {
    var temp__4124__auto__ = cljs.core.find(smap, p1__17582_SHARP_);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var e = temp__4124__auto__;
      return cljs.core.val(e);
    } else {
      return p1__17582_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__17583_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__17583_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second(e);
      } else {
        return p1__17583_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__17588 = arguments.length;
  switch(G__17588) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__17600 = null;
        var G__17600__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17600__1 = function(result) {
          var G__17589 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17589) : rf.call(null, G__17589);
        };
        var G__17600__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__17590 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17590) : cljs.core.deref.call(null, G__17590);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__17591 = result;
            var G__17592 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17591, G__17592) : rf.call(null, G__17591, G__17592);
          }
        };
        G__17600 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17600__0.call(this);
            case 1:
              return G__17600__1.call(this, result);
            case 2:
              return G__17600__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17600.cljs$core$IFn$_invoke$arity$0 = G__17600__0;
        G__17600.cljs$core$IFn$_invoke$arity$1 = G__17600__1;
        G__17600.cljs$core$IFn$_invoke$arity$2 = G__17600__2;
        return G__17600;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__17597, seen__$1) {
        while (true) {
          var vec__17598 = p__17597;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17598, 0, null);
          var xs__$1 = vec__17598;
          var temp__4126__auto__ = cljs.core.seq(xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__17601 = cljs.core.rest(s);
              var G__17602 = seen__$1;
              p__17597 = G__17601;
              seen__$1 = G__17602;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__17603 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__17604 = cljs.core.next(s__$1);
      ret = G__17603;
      s__$1 = G__17604;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__17606 = x;
    if (G__17606) {
      var bit__4941__auto__ = G__17606.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4941__auto__ || G__17606.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__17607 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__17608 = cljs.core.next(ks);
      var G__17609 = cljs.core.next(vs);
      map = G__17607;
      ks = G__17608;
      vs = G__17609;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__17617 = arguments.length;
  switch(G__17617) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__17618 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17618) : k.call(null, G__17618);
  }() > function() {
    var G__17619 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17619) : k.call(null, G__17619);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__17610_SHARP_, p2__17611_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__17610_SHARP_, p2__17611_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq17612) {
  var G__17613 = cljs.core.first(seq17612);
  var seq17612__$1 = cljs.core.next(seq17612);
  var G__17614 = cljs.core.first(seq17612__$1);
  var seq17612__$2 = cljs.core.next(seq17612__$1);
  var G__17615 = cljs.core.first(seq17612__$2);
  var seq17612__$3 = cljs.core.next(seq17612__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__17613, G__17614, G__17615, seq17612__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__17628 = arguments.length;
  switch(G__17628) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__17629 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17629) : k.call(null, G__17629);
  }() < function() {
    var G__17630 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17630) : k.call(null, G__17630);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__17621_SHARP_, p2__17622_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__17621_SHARP_, p2__17622_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq17623) {
  var G__17624 = cljs.core.first(seq17623);
  var seq17623__$1 = cljs.core.next(seq17623);
  var G__17625 = cljs.core.first(seq17623__$1);
  var seq17623__$2 = cljs.core.next(seq17623__$1);
  var G__17626 = cljs.core.first(seq17623__$2);
  var seq17623__$3 = cljs.core.next(seq17623__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__17624, G__17625, G__17626, seq17623__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__17633 = arguments.length;
  switch(G__17633) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__17640 = null;
        var G__17640__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17640__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__17634 = result;
              var G__17635 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17634, G__17635) : rf.call(null, G__17634, G__17635);
            }());
          }();
          var G__17636 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17636) : rf.call(null, G__17636);
        };
        var G__17640__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__17637 = result;
            var G__17638 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17637, G__17638) : rf.call(null, G__17637, G__17638);
          } else {
            return result;
          }
        };
        G__17640 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17640__0.call(this);
            case 1:
              return G__17640__1.call(this, result);
            case 2:
              return G__17640__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17640.cljs$core$IFn$_invoke$arity$0 = G__17640__0;
        G__17640.cljs$core$IFn$_invoke$arity$1 = G__17640__1;
        G__17640.cljs$core$IFn$_invoke$arity$2 = G__17640__2;
        return G__17640;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__17642 = arguments.length;
  switch(G__17642) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__17649 = null;
      var G__17649__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__17649__1 = function(result) {
        var G__17643 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17643) : rf.call(null, G__17643);
      };
      var G__17649__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__17644 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17644) : pred.call(null, G__17644);
        }())) {
          var G__17645 = result;
          var G__17646 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17645, G__17646) : rf.call(null, G__17645, G__17646);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__17649 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__17649__0.call(this);
          case 1:
            return G__17649__1.call(this, result);
          case 2:
            return G__17649__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17649.cljs$core$IFn$_invoke$arity$0 = G__17649__0;
      G__17649.cljs$core$IFn$_invoke$arity$1 = G__17649__1;
      G__17649.cljs$core$IFn$_invoke$arity$2 = G__17649__2;
      return G__17649;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(function() {
        var G__17647 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17647) : pred.call(null, G__17647);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__17654 = function() {
      var G__17656 = cljs.core._entry_key(sc, e);
      var G__17657 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17656, G__17657) : comp.call(null, G__17656, G__17657);
    }();
    var G__17655 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__17654, G__17655) : test.call(null, G__17654, G__17655);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__17659 = arguments.length;
  switch(G__17659) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__17660 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17660, 0, null);
      var s = vec__17660;
      if (cljs.core.truth_(function() {
        var G__17661 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__17661) : include.call(null, G__17661);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__17662 = temp__4126__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17662, 0, null);
    var s = vec__17662;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__17665 = arguments.length;
  switch(G__17665) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__17666 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17666, 0, null);
      var s = vec__17666;
      if (cljs.core.truth_(function() {
        var G__17667 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__17667) : include.call(null, G__17667);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var vec__17668 = temp__4126__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17668, 0, null);
    var s = vec__17668;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__17670 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__17670) : Math.ceil.call(null, G__17670);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__17671 = ret;
        var G__17672 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17671, G__17672) : f.call(null, G__17671, G__17672);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__17673 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17673) : cljs.core.deref.call(null, G__17673);
      } else {
        var G__17674 = i + self__.step;
        var G__17675 = ret__$1;
        i = G__17674;
        ret = G__17675;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__17677 = arguments.length;
  switch(G__17677) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__17680 = arguments.length;
  switch(G__17680) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__17685 = null;
        var G__17685__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17685__1 = function(result) {
          var G__17681 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17681) : rf.call(null, G__17681);
        };
        var G__17685__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__17682 = result;
            var G__17683 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17682, G__17683) : rf.call(null, G__17682, G__17683);
          } else {
            return result;
          }
        };
        G__17685 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17685__0.call(this);
            case 1:
              return G__17685__1.call(this, result);
            case 2:
              return G__17685__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17685.cljs$core$IFn$_invoke$arity$0 = G__17685__0;
        G__17685.cljs$core$IFn$_invoke$arity$1 = G__17685__1;
        G__17685.cljs$core$IFn$_invoke$arity$2 = G__17685__2;
        return G__17685;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__17688 = arguments.length;
  switch(G__17688) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__17699 = null;
        var G__17699__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17699__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__17689 = result;
              var G__17690 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17689, G__17690) : rf.call(null, G__17689, G__17690);
            }());
          }();
          var G__17691 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17691) : rf.call(null, G__17691);
        };
        var G__17699__2 = function(result, input) {
          var pval = function() {
            var G__17692 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17692) : cljs.core.deref.call(null, G__17692);
          }();
          var val = function() {
            var G__17693 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17693) : f.call(null, G__17693);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__17694 = result;
              var G__17695 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17694, G__17695) : rf.call(null, G__17694, G__17695);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__17699 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17699__0.call(this);
            case 1:
              return G__17699__1.call(this, result);
            case 2:
              return G__17699__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17699.cljs$core$IFn$_invoke$arity$0 = G__17699__0;
        G__17699.cljs$core$IFn$_invoke$arity$1 = G__17699__1;
        G__17699.cljs$core$IFn$_invoke$arity$2 = G__17699__2;
        return G__17699;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__17696 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17696) : f.call(null, G__17696);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
        return function(p1__17686_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__17697 = p1__17686_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17697) : f.call(null, G__17697);
          }());
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__17701 = arguments.length;
  switch(G__17701) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__17702 = init;
        var G__17703 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17702, G__17703) : f.call(null, G__17702, G__17703);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__17720 = arguments.length;
  switch(G__17720) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__17764 = null;
    var G__17764__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__17764__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17721 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17721) : f.call(null, G__17721);
      }()], null);
    };
    var G__17764__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17722 = x;
        var G__17723 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17722, G__17723) : f.call(null, G__17722, G__17723);
      }()], null);
    };
    var G__17764__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17724 = x;
        var G__17725 = y;
        var G__17726 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17724, G__17725, G__17726) : f.call(null, G__17724, G__17725, G__17726);
      }()], null);
    };
    var G__17764__4 = function() {
      var G__17765__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__17765 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17766__i = 0, G__17766__a = new Array(arguments.length - 3);
          while (G__17766__i < G__17766__a.length) {
            G__17766__a[G__17766__i] = arguments[G__17766__i + 3];
            ++G__17766__i;
          }
          args = new cljs.core.IndexedSeq(G__17766__a, 0);
        }
        return G__17765__delegate.call(this, x, y, z, args);
      };
      G__17765.cljs$lang$maxFixedArity = 3;
      G__17765.cljs$lang$applyTo = function(arglist__17767) {
        var x = cljs.core.first(arglist__17767);
        arglist__17767 = cljs.core.next(arglist__17767);
        var y = cljs.core.first(arglist__17767);
        arglist__17767 = cljs.core.next(arglist__17767);
        var z = cljs.core.first(arglist__17767);
        var args = cljs.core.rest(arglist__17767);
        return G__17765__delegate(x, y, z, args);
      };
      G__17765.cljs$core$IFn$_invoke$arity$variadic = G__17765__delegate;
      return G__17765;
    }();
    G__17764 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17764__0.call(this);
        case 1:
          return G__17764__1.call(this, x);
        case 2:
          return G__17764__2.call(this, x, y);
        case 3:
          return G__17764__3.call(this, x, y, z);
        default:
          var G__17768 = null;
          if (arguments.length > 3) {
            var G__17769__i = 0, G__17769__a = new Array(arguments.length - 3);
            while (G__17769__i < G__17769__a.length) {
              G__17769__a[G__17769__i] = arguments[G__17769__i + 3];
              ++G__17769__i;
            }
            G__17768 = new cljs.core.IndexedSeq(G__17769__a, 0);
          }
          return G__17764__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17768);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17764.cljs$lang$maxFixedArity = 3;
    G__17764.cljs$lang$applyTo = G__17764__4.cljs$lang$applyTo;
    G__17764.cljs$core$IFn$_invoke$arity$0 = G__17764__0;
    G__17764.cljs$core$IFn$_invoke$arity$1 = G__17764__1;
    G__17764.cljs$core$IFn$_invoke$arity$2 = G__17764__2;
    G__17764.cljs$core$IFn$_invoke$arity$3 = G__17764__3;
    G__17764.cljs$core$IFn$_invoke$arity$variadic = G__17764__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17764;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__17770 = null;
    var G__17770__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__17770__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17727 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17727) : f.call(null, G__17727);
      }(), function() {
        var G__17728 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17728) : g.call(null, G__17728);
      }()], null);
    };
    var G__17770__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17729 = x;
        var G__17730 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17729, G__17730) : f.call(null, G__17729, G__17730);
      }(), function() {
        var G__17731 = x;
        var G__17732 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17731, G__17732) : g.call(null, G__17731, G__17732);
      }()], null);
    };
    var G__17770__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17733 = x;
        var G__17734 = y;
        var G__17735 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17733, G__17734, G__17735) : f.call(null, G__17733, G__17734, G__17735);
      }(), function() {
        var G__17736 = x;
        var G__17737 = y;
        var G__17738 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17736, G__17737, G__17738) : g.call(null, G__17736, G__17737, G__17738);
      }()], null);
    };
    var G__17770__4 = function() {
      var G__17771__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__17771 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17772__i = 0, G__17772__a = new Array(arguments.length - 3);
          while (G__17772__i < G__17772__a.length) {
            G__17772__a[G__17772__i] = arguments[G__17772__i + 3];
            ++G__17772__i;
          }
          args = new cljs.core.IndexedSeq(G__17772__a, 0);
        }
        return G__17771__delegate.call(this, x, y, z, args);
      };
      G__17771.cljs$lang$maxFixedArity = 3;
      G__17771.cljs$lang$applyTo = function(arglist__17773) {
        var x = cljs.core.first(arglist__17773);
        arglist__17773 = cljs.core.next(arglist__17773);
        var y = cljs.core.first(arglist__17773);
        arglist__17773 = cljs.core.next(arglist__17773);
        var z = cljs.core.first(arglist__17773);
        var args = cljs.core.rest(arglist__17773);
        return G__17771__delegate(x, y, z, args);
      };
      G__17771.cljs$core$IFn$_invoke$arity$variadic = G__17771__delegate;
      return G__17771;
    }();
    G__17770 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17770__0.call(this);
        case 1:
          return G__17770__1.call(this, x);
        case 2:
          return G__17770__2.call(this, x, y);
        case 3:
          return G__17770__3.call(this, x, y, z);
        default:
          var G__17774 = null;
          if (arguments.length > 3) {
            var G__17775__i = 0, G__17775__a = new Array(arguments.length - 3);
            while (G__17775__i < G__17775__a.length) {
              G__17775__a[G__17775__i] = arguments[G__17775__i + 3];
              ++G__17775__i;
            }
            G__17774 = new cljs.core.IndexedSeq(G__17775__a, 0);
          }
          return G__17770__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17774);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17770.cljs$lang$maxFixedArity = 3;
    G__17770.cljs$lang$applyTo = G__17770__4.cljs$lang$applyTo;
    G__17770.cljs$core$IFn$_invoke$arity$0 = G__17770__0;
    G__17770.cljs$core$IFn$_invoke$arity$1 = G__17770__1;
    G__17770.cljs$core$IFn$_invoke$arity$2 = G__17770__2;
    G__17770.cljs$core$IFn$_invoke$arity$3 = G__17770__3;
    G__17770.cljs$core$IFn$_invoke$arity$variadic = G__17770__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17770;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__17776 = null;
    var G__17776__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__17776__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17739 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17739) : f.call(null, G__17739);
      }(), function() {
        var G__17740 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17740) : g.call(null, G__17740);
      }(), function() {
        var G__17741 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__17741) : h.call(null, G__17741);
      }()], null);
    };
    var G__17776__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17742 = x;
        var G__17743 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17742, G__17743) : f.call(null, G__17742, G__17743);
      }(), function() {
        var G__17744 = x;
        var G__17745 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17744, G__17745) : g.call(null, G__17744, G__17745);
      }(), function() {
        var G__17746 = x;
        var G__17747 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__17746, G__17747) : h.call(null, G__17746, G__17747);
      }()], null);
    };
    var G__17776__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17748 = x;
        var G__17749 = y;
        var G__17750 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17748, G__17749, G__17750) : f.call(null, G__17748, G__17749, G__17750);
      }(), function() {
        var G__17751 = x;
        var G__17752 = y;
        var G__17753 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17751, G__17752, G__17753) : g.call(null, G__17751, G__17752, G__17753);
      }(), function() {
        var G__17754 = x;
        var G__17755 = y;
        var G__17756 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__17754, G__17755, G__17756) : h.call(null, G__17754, G__17755, G__17756);
      }()], null);
    };
    var G__17776__4 = function() {
      var G__17777__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__17777 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17778__i = 0, G__17778__a = new Array(arguments.length - 3);
          while (G__17778__i < G__17778__a.length) {
            G__17778__a[G__17778__i] = arguments[G__17778__i + 3];
            ++G__17778__i;
          }
          args = new cljs.core.IndexedSeq(G__17778__a, 0);
        }
        return G__17777__delegate.call(this, x, y, z, args);
      };
      G__17777.cljs$lang$maxFixedArity = 3;
      G__17777.cljs$lang$applyTo = function(arglist__17779) {
        var x = cljs.core.first(arglist__17779);
        arglist__17779 = cljs.core.next(arglist__17779);
        var y = cljs.core.first(arglist__17779);
        arglist__17779 = cljs.core.next(arglist__17779);
        var z = cljs.core.first(arglist__17779);
        var args = cljs.core.rest(arglist__17779);
        return G__17777__delegate(x, y, z, args);
      };
      G__17777.cljs$core$IFn$_invoke$arity$variadic = G__17777__delegate;
      return G__17777;
    }();
    G__17776 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17776__0.call(this);
        case 1:
          return G__17776__1.call(this, x);
        case 2:
          return G__17776__2.call(this, x, y);
        case 3:
          return G__17776__3.call(this, x, y, z);
        default:
          var G__17780 = null;
          if (arguments.length > 3) {
            var G__17781__i = 0, G__17781__a = new Array(arguments.length - 3);
            while (G__17781__i < G__17781__a.length) {
              G__17781__a[G__17781__i] = arguments[G__17781__i + 3];
              ++G__17781__i;
            }
            G__17780 = new cljs.core.IndexedSeq(G__17781__a, 0);
          }
          return G__17776__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17780);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17776.cljs$lang$maxFixedArity = 3;
    G__17776.cljs$lang$applyTo = G__17776__4.cljs$lang$applyTo;
    G__17776.cljs$core$IFn$_invoke$arity$0 = G__17776__0;
    G__17776.cljs$core$IFn$_invoke$arity$1 = G__17776__1;
    G__17776.cljs$core$IFn$_invoke$arity$2 = G__17776__2;
    G__17776.cljs$core$IFn$_invoke$arity$3 = G__17776__3;
    G__17776.cljs$core$IFn$_invoke$arity$variadic = G__17776__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17776;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__17782 = null;
      var G__17782__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17705_SHARP_, p2__17706_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17705_SHARP_, function() {
              return p2__17706_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__17706_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__17706_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17782__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17707_SHARP_, p2__17708_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17707_SHARP_, function() {
              var G__17757 = x;
              return p2__17708_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__17708_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17757) : p2__17708_SHARP_.call(null, G__17757);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17782__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17709_SHARP_, p2__17710_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17709_SHARP_, function() {
              var G__17758 = x;
              var G__17759 = y;
              return p2__17710_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__17710_SHARP_.cljs$core$IFn$_invoke$arity$2(G__17758, G__17759) : p2__17710_SHARP_.call(null, G__17758, G__17759);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17782__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17711_SHARP_, p2__17712_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17711_SHARP_, function() {
              var G__17760 = x;
              var G__17761 = y;
              var G__17762 = z;
              return p2__17712_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__17712_SHARP_.cljs$core$IFn$_invoke$arity$3(G__17760, G__17761, G__17762) : p2__17712_SHARP_.call(null, G__17760, G__17761, G__17762);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17782__4 = function() {
        var G__17783__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__17713_SHARP_, p2__17714_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17713_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__17714_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17783 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17784__i = 0, G__17784__a = new Array(arguments.length - 3);
            while (G__17784__i < G__17784__a.length) {
              G__17784__a[G__17784__i] = arguments[G__17784__i + 3];
              ++G__17784__i;
            }
            args = new cljs.core.IndexedSeq(G__17784__a, 0);
          }
          return G__17783__delegate.call(this, x, y, z, args);
        };
        G__17783.cljs$lang$maxFixedArity = 3;
        G__17783.cljs$lang$applyTo = function(arglist__17785) {
          var x = cljs.core.first(arglist__17785);
          arglist__17785 = cljs.core.next(arglist__17785);
          var y = cljs.core.first(arglist__17785);
          arglist__17785 = cljs.core.next(arglist__17785);
          var z = cljs.core.first(arglist__17785);
          var args = cljs.core.rest(arglist__17785);
          return G__17783__delegate(x, y, z, args);
        };
        G__17783.cljs$core$IFn$_invoke$arity$variadic = G__17783__delegate;
        return G__17783;
      }();
      G__17782 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17782__0.call(this);
          case 1:
            return G__17782__1.call(this, x);
          case 2:
            return G__17782__2.call(this, x, y);
          case 3:
            return G__17782__3.call(this, x, y, z);
          default:
            var G__17786 = null;
            if (arguments.length > 3) {
              var G__17787__i = 0, G__17787__a = new Array(arguments.length - 3);
              while (G__17787__i < G__17787__a.length) {
                G__17787__a[G__17787__i] = arguments[G__17787__i + 3];
                ++G__17787__i;
              }
              G__17786 = new cljs.core.IndexedSeq(G__17787__a, 0);
            }
            return G__17782__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17786);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17782.cljs$lang$maxFixedArity = 3;
      G__17782.cljs$lang$applyTo = G__17782__4.cljs$lang$applyTo;
      G__17782.cljs$core$IFn$_invoke$arity$0 = G__17782__0;
      G__17782.cljs$core$IFn$_invoke$arity$1 = G__17782__1;
      G__17782.cljs$core$IFn$_invoke$arity$2 = G__17782__2;
      G__17782.cljs$core$IFn$_invoke$arity$3 = G__17782__3;
      G__17782.cljs$core$IFn$_invoke$arity$variadic = G__17782__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17782;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq17715) {
  var G__17716 = cljs.core.first(seq17715);
  var seq17715__$1 = cljs.core.next(seq17715);
  var G__17717 = cljs.core.first(seq17715__$1);
  var seq17715__$2 = cljs.core.next(seq17715__$1);
  var G__17718 = cljs.core.first(seq17715__$2);
  var seq17715__$3 = cljs.core.next(seq17715__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__17716, G__17717, G__17718, seq17715__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__17789 = arguments.length;
  switch(G__17789) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__17791 = cljs.core.next(coll);
      coll = G__17791;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__17792 = n - 1;
      var G__17793 = cljs.core.next(coll);
      n = G__17792;
      coll = G__17793;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__17795 = arguments.length;
  switch(G__17795) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__17800 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17800, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17800, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4274__auto__ = flags;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_17808 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4274__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__17809_17815 = cljs.core.first(coll);
          var G__17810_17816 = writer;
          var G__17811_17817 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17809_17815, G__17810_17816, G__17811_17817) : print_one.call(null, G__17809_17815, G__17810_17816, G__17811_17817);
        } else {
        }
        var coll_17818__$1 = cljs.core.next(coll);
        var n_17819 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_17818__$1 && (n_17819 == null || !(n_17819 === 0))) {
            cljs.core._write(writer, sep);
            var G__17812_17820 = cljs.core.first(coll_17818__$1);
            var G__17813_17821 = writer;
            var G__17814_17822 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17812_17820, G__17813_17821, G__17814_17822) : print_one.call(null, G__17812_17820, G__17813_17821, G__17814_17822);
            var G__17823 = cljs.core.next(coll_17818__$1);
            var G__17824 = n_17819 - 1;
            coll_17818__$1 = G__17823;
            n_17819 = G__17824;
            continue;
          } else {
            if (cljs.core.seq(coll_17818__$1) && n_17819 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4274__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4274__auto__)) {
                  return or__4274__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_17808;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__17827 = cljs.core.seq(ss);
  var chunk__17828 = null;
  var count__17829 = 0;
  var i__17830 = 0;
  while (true) {
    if (i__17830 < count__17829) {
      var s = chunk__17828.cljs$core$IIndexed$_nth$arity$2(null, i__17830);
      cljs.core._write(writer, s);
      var G__17831 = seq__17827;
      var G__17832 = chunk__17828;
      var G__17833 = count__17829;
      var G__17834 = i__17830 + 1;
      seq__17827 = G__17831;
      chunk__17828 = G__17832;
      count__17829 = G__17833;
      i__17830 = G__17834;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17827);
      if (temp__4126__auto__) {
        var seq__17827__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17827__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17827__$1);
          var G__17835 = cljs.core.chunk_rest(seq__17827__$1);
          var G__17836 = c__5059__auto__;
          var G__17837 = cljs.core.count(c__5059__auto__);
          var G__17838 = 0;
          seq__17827 = G__17835;
          chunk__17828 = G__17836;
          count__17829 = G__17837;
          i__17830 = G__17838;
          continue;
        } else {
          var s = cljs.core.first(seq__17827__$1);
          cljs.core._write(writer, s);
          var G__17839 = cljs.core.next(seq__17827__$1);
          var G__17840 = null;
          var G__17841 = 0;
          var G__17842 = 0;
          seq__17827 = G__17839;
          chunk__17828 = G__17840;
          count__17829 = G__17841;
          i__17830 = G__17842;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq17825) {
  var G__17826 = cljs.core.first(seq17825);
  var seq17825__$1 = cljs.core.next(seq17825);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__17826, seq17825__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj17844 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj17844;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__17847 = '[\\\\"\b\f\n\r\t]';
    var G__17848 = "g";
    return RegExp(G__17847, G__17848);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = function() {
            var G__17862 = obj;
            if (G__17862) {
              var bit__4948__auto__ = G__17862.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4948__auto__ || G__17862.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__17862.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17862);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17862);
            }
          }();
          if (and__4262__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__17863_17873 = cljs.core.meta(obj);
        var G__17864_17874 = writer;
        var G__17865_17875 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__17863_17873, G__17864_17874, G__17865_17875) : cljs.core.pr_writer.call(null, G__17863_17873, G__17864_17874, G__17865_17875);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__17866 = obj;
            if (G__17866) {
              var bit__4941__auto__ = G__17866.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4941__auto__ || G__17866.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__17867 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__17868 = cljs.core.pr_writer;
                var G__17869 = writer;
                var G__17870 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__17867, G__17868, G__17869, G__17870) : cljs.core.print_map.call(null, G__17867, G__17868, G__17869, G__17870);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__17871 = obj;
                    return goog.isString(G__17871);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__17876 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__17876;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__17872 = obj;
                            if (G__17872) {
                              var bit__4948__auto__ = G__17872.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4948__auto__ || G__17872.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__17872.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__17872);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__17872);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__17880 = obj;
    var G__17881 = writer;
    var G__17882 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__17880, G__17881, G__17882) : alt_impl.call(null, G__17880, G__17881, G__17882);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__17887 = cljs.core.seq(cljs.core.next(objs));
  var chunk__17888 = null;
  var count__17889 = 0;
  var i__17890 = 0;
  while (true) {
    if (i__17890 < count__17889) {
      var obj = chunk__17888.cljs$core$IIndexed$_nth$arity$2(null, i__17890);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__17891 = seq__17887;
      var G__17892 = chunk__17888;
      var G__17893 = count__17889;
      var G__17894 = i__17890 + 1;
      seq__17887 = G__17891;
      chunk__17888 = G__17892;
      count__17889 = G__17893;
      i__17890 = G__17894;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__17887);
      if (temp__4126__auto__) {
        var seq__17887__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17887__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first(seq__17887__$1);
          var G__17895 = cljs.core.chunk_rest(seq__17887__$1);
          var G__17896 = c__5059__auto__;
          var G__17897 = cljs.core.count(c__5059__auto__);
          var G__17898 = 0;
          seq__17887 = G__17895;
          chunk__17888 = G__17896;
          count__17889 = G__17897;
          i__17890 = G__17898;
          continue;
        } else {
          var obj = cljs.core.first(seq__17887__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__17899 = cljs.core.next(seq__17887__$1);
          var G__17900 = null;
          var G__17901 = 0;
          var G__17902 = 0;
          seq__17887 = G__17899;
          chunk__17888 = G__17900;
          count__17889 = G__17901;
          i__17890 = G__17902;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq17903) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17903));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq17904) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17904));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq17905) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17905));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__17906__i = 0, G__17906__a = new Array(arguments.length - 0);
      while (G__17906__i < G__17906__a.length) {
        G__17906__a[G__17906__i] = arguments[G__17906__i + 0];
        ++G__17906__i;
      }
      objs = new cljs.core.IndexedSeq(G__17906__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__17907) {
    var objs = cljs.core.seq(arglist__17907);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq17908) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17908));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq17909) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17909));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq17910) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17910));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq17911) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17911));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__17918_17924 = cljs.core.key(e);
    var G__17919_17925 = w;
    var G__17920_17926 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17918_17924, G__17919_17925, G__17920_17926) : print_one.call(null, G__17918_17924, G__17919_17925, G__17920_17926);
    cljs.core._write(w, " ");
    var G__17921 = cljs.core.val(e);
    var G__17922 = w;
    var G__17923 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17921, G__17922, G__17923) : print_one.call(null, G__17921, G__17922, G__17923);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq17927) {
  var G__17928 = cljs.core.first(seq17927);
  var seq17927__$1 = cljs.core.next(seq17927);
  var G__17929 = cljs.core.first(seq17927__$1);
  var seq17927__$2 = cljs.core.next(seq17927__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17928, G__17929, seq17927__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__17931 = arguments.length;
  switch(G__17931) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__17932 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__17932) : cljs.core.atom.call(null, G__17932);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__17935 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17935) : cljs.core.deref.call(null, G__17935);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__17936_SHARP_, p2__17937_SHARP_) {
    var ret = function() {
      var G__17940 = p1__17936_SHARP_;
      var G__17941 = p2__17937_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17940, G__17941) : rf.call(null, G__17940, G__17941);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__17944 = null;
      var G__17944__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__17944__1 = function(result) {
        var G__17943 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17943) : rf.call(null, G__17943);
      };
      var G__17944__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__17944 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__17944__0.call(this);
          case 1:
            return G__17944__1.call(this, result);
          case 2:
            return G__17944__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17944.cljs$core$IFn$_invoke$arity$0 = G__17944__0;
      G__17944.cljs$core$IFn$_invoke$arity$1 = G__17944__1;
      G__17944.cljs$core$IFn$_invoke$arity$2 = G__17944__2;
      return G__17944;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__17946 = arguments.length;
  switch(G__17946) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__17952 = null;
        var G__17952__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17952__1 = function(result) {
          var G__17947 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17947) : rf.call(null, G__17947);
        };
        var G__17952__2 = function(result, input) {
          var prior = function() {
            var G__17948 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17948) : cljs.core.deref.call(null, G__17948);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__17949 = result;
            var G__17950 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17949, G__17950) : rf.call(null, G__17949, G__17950);
          }
        };
        G__17952 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17952__0.call(this);
            case 1:
              return G__17952__1.call(this, result);
            case 2:
              return G__17952__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17952.cljs$core$IFn$_invoke$arity$0 = G__17952__0;
        G__17952.cljs$core$IFn$_invoke$arity$1 = G__17952__1;
        G__17952.cljs$core$IFn$_invoke$arity$2 = G__17952__2;
        return G__17952;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__17954 = arguments.length;
  switch(G__17954) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5250__auto__ = this;
  return cljs.core.es6_iterator(this__5250__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__17957_SHARP_, p2__17956_SHARP_) {
    var G__17959 = p2__17956_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__17959) : proc.call(null, G__17959);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj17961 = {};
  return obj17961;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = cljs.core._clj__GT_js[function() {
        var G__17965 = x__4910__auto__;
        return goog.typeOf(G__17965);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = cljs.core._key__GT_js[function() {
        var G__17969 = x__4910__auto__;
        return goog.typeOf(G__17969);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__17972 = k;
    if (G__17972) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__17972.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__17972.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17972);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17972);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__17973 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__17973) : cljs.core.clj__GT_js.call(null, G__17973);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__17989 = x;
      if (G__17989) {
        var bit__4948__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4274__auto__ = bit__4948__auto__;
          if (cljs.core.truth_(or__4274__auto__)) {
            return or__4274__auto__;
          } else {
            return G__17989.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__17989.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17989);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17989);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj17991 = {};
              return obj17991;
            }();
            var seq__17992_18002 = cljs.core.seq(x);
            var chunk__17993_18003 = null;
            var count__17994_18004 = 0;
            var i__17995_18005 = 0;
            while (true) {
              if (i__17995_18005 < count__17994_18004) {
                var vec__17996_18006 = chunk__17993_18003.cljs$core$IIndexed$_nth$arity$2(null, i__17995_18005);
                var k_18007 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17996_18006, 0, null);
                var v_18008 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17996_18006, 1, null);
                m[cljs.core.key__GT_js(k_18007)] = cljs$core$clj__GT_js(v_18008);
                var G__18009 = seq__17992_18002;
                var G__18010 = chunk__17993_18003;
                var G__18011 = count__17994_18004;
                var G__18012 = i__17995_18005 + 1;
                seq__17992_18002 = G__18009;
                chunk__17993_18003 = G__18010;
                count__17994_18004 = G__18011;
                i__17995_18005 = G__18012;
                continue;
              } else {
                var temp__4126__auto___18013 = cljs.core.seq(seq__17992_18002);
                if (temp__4126__auto___18013) {
                  var seq__17992_18014__$1 = temp__4126__auto___18013;
                  if (cljs.core.chunked_seq_QMARK_(seq__17992_18014__$1)) {
                    var c__5059__auto___18015 = cljs.core.chunk_first(seq__17992_18014__$1);
                    var G__18016 = cljs.core.chunk_rest(seq__17992_18014__$1);
                    var G__18017 = c__5059__auto___18015;
                    var G__18018 = cljs.core.count(c__5059__auto___18015);
                    var G__18019 = 0;
                    seq__17992_18002 = G__18016;
                    chunk__17993_18003 = G__18017;
                    count__17994_18004 = G__18018;
                    i__17995_18005 = G__18019;
                    continue;
                  } else {
                    var vec__17997_18020 = cljs.core.first(seq__17992_18014__$1);
                    var k_18021 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17997_18020, 0, null);
                    var v_18022 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17997_18020, 1, null);
                    m[cljs.core.key__GT_js(k_18021)] = cljs$core$clj__GT_js(v_18022);
                    var G__18023 = cljs.core.next(seq__17992_18014__$1);
                    var G__18024 = null;
                    var G__18025 = 0;
                    var G__18026 = 0;
                    seq__17992_18002 = G__18023;
                    chunk__17993_18003 = G__18024;
                    count__17994_18004 = G__18025;
                    i__17995_18005 = G__18026;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__17998_18027 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__17999_18028 = null;
              var count__18000_18029 = 0;
              var i__18001_18030 = 0;
              while (true) {
                if (i__18001_18030 < count__18000_18029) {
                  var x_18031__$1 = chunk__17999_18028.cljs$core$IIndexed$_nth$arity$2(null, i__18001_18030);
                  arr.push(x_18031__$1);
                  var G__18032 = seq__17998_18027;
                  var G__18033 = chunk__17999_18028;
                  var G__18034 = count__18000_18029;
                  var G__18035 = i__18001_18030 + 1;
                  seq__17998_18027 = G__18032;
                  chunk__17999_18028 = G__18033;
                  count__18000_18029 = G__18034;
                  i__18001_18030 = G__18035;
                  continue;
                } else {
                  var temp__4126__auto___18036 = cljs.core.seq(seq__17998_18027);
                  if (temp__4126__auto___18036) {
                    var seq__17998_18037__$1 = temp__4126__auto___18036;
                    if (cljs.core.chunked_seq_QMARK_(seq__17998_18037__$1)) {
                      var c__5059__auto___18038 = cljs.core.chunk_first(seq__17998_18037__$1);
                      var G__18039 = cljs.core.chunk_rest(seq__17998_18037__$1);
                      var G__18040 = c__5059__auto___18038;
                      var G__18041 = cljs.core.count(c__5059__auto___18038);
                      var G__18042 = 0;
                      seq__17998_18027 = G__18039;
                      chunk__17999_18028 = G__18040;
                      count__18000_18029 = G__18041;
                      i__18001_18030 = G__18042;
                      continue;
                    } else {
                      var x_18043__$1 = cljs.core.first(seq__17998_18037__$1);
                      arr.push(x_18043__$1);
                      var G__18044 = cljs.core.next(seq__17998_18037__$1);
                      var G__18045 = null;
                      var G__18046 = 0;
                      var G__18047 = 0;
                      seq__17998_18027 = G__18044;
                      chunk__17999_18028 = G__18045;
                      count__18000_18029 = G__18046;
                      i__18001_18030 = G__18047;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj18049 = {};
  return obj18049;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = cljs.core._js__GT_clj[function() {
        var G__18053 = x__4910__auto__;
        return goog.typeOf(G__18053);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__18057 = arguments.length;
  switch(G__18057) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5326__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__18058 = opts;
  var map__18058__$1 = cljs.core.seq_QMARK_(map__18058) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__18058) : map__18058;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18058__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__18058, map__18058__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__18074 = x__$1;
        if (G__18074) {
          var bit__4948__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4274__auto__ = bit__4948__auto__;
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              return G__18074.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__18074.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__18074);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__18074);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5028__auto__ = function(map__18058, map__18058__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__18075(s__18076) {
                      return new cljs.core.LazySeq(null, function(map__18058, map__18058__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__18076__$1 = s__18076;
                          while (true) {
                            var temp__4126__auto__ = cljs.core.seq(s__18076__$1);
                            if (temp__4126__auto__) {
                              var s__18076__$2 = temp__4126__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__18076__$2)) {
                                var c__5026__auto__ = cljs.core.chunk_first(s__18076__$2);
                                var size__5027__auto__ = cljs.core.count(c__5026__auto__);
                                var b__18078 = cljs.core.chunk_buffer(size__5027__auto__);
                                if (function() {
                                  var i__18077 = 0;
                                  while (true) {
                                    if (i__18077 < size__5027__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5026__auto__, i__18077);
                                      cljs.core.chunk_append(b__18078, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__18083 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__18083) : keyfn.call(null, G__18083);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__18086 = i__18077 + 1;
                                      i__18077 = G__18086;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__18078), cljs$core$thisfn_$_iter__18075(cljs.core.chunk_rest(s__18076__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__18078), null);
                                }
                              } else {
                                var k = cljs.core.first(s__18076__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__18084 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__18084) : keyfn.call(null, G__18084);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__18075(cljs.core.rest(s__18076__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__18058, map__18058__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__18058, map__18058__$1, keywordize_keys, keyfn);
                  return iter__5028__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__18058, map__18058__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq18054) {
  var G__18055 = cljs.core.first(seq18054);
  var seq18054__$1 = cljs.core.next(seq18054);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__18055, seq18054__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__18089 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__18089) : cljs.core.atom.call(null, G__18089);
  }();
  return function(mem) {
    return function() {
      var G__18091__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__18090 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18090) : cljs.core.deref.call(null, G__18090);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__18091 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__18092__i = 0, G__18092__a = new Array(arguments.length - 0);
          while (G__18092__i < G__18092__a.length) {
            G__18092__a[G__18092__i] = arguments[G__18092__i + 0];
            ++G__18092__i;
          }
          args = new cljs.core.IndexedSeq(G__18092__a, 0);
        }
        return G__18091__delegate.call(this, args);
      };
      G__18091.cljs$lang$maxFixedArity = 0;
      G__18091.cljs$lang$applyTo = function(arglist__18093) {
        var args = cljs.core.seq(arglist__18093);
        return G__18091__delegate(args);
      };
      G__18091.cljs$core$IFn$_invoke$arity$variadic = G__18091__delegate;
      return G__18091;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__18097 = arguments.length;
  switch(G__18097) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5326__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__18099 = ret;
      f = G__18099;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq18094) {
  var G__18095 = cljs.core.first(seq18094);
  var seq18094__$1 = cljs.core.next(seq18094);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__18095, seq18094__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__18101 = arguments.length;
  switch(G__18101) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__18104 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__18104) : Math.floor.call(null, G__18104);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__18106 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18106) : f.call(null, G__18106);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__18108 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__18108) : cljs.core.atom.call(null, G__18108);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq18109) {
  var G__18110 = cljs.core.first(seq18109);
  var seq18109__$1 = cljs.core.next(seq18109);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__18110, seq18109__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__18112 = arguments.length;
  switch(G__18112) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__18113 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18113) : cljs.core.deref.call(null, G__18113);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4274__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4274__auto__) {
    return or__4274__auto__;
  } else {
    var or__4274__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4274__auto____$1) {
      return or__4274__auto____$1;
    } else {
      var and__4262__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4262__auto__) {
        var and__4262__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4262__auto____$1) {
          var and__4262__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4262__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__18139 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__18136 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__18136) : child.call(null, G__18136);
                }(), function() {
                  var G__18137 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__18137) : parent.call(null, G__18137);
                }());
                var G__18140 = i + 1;
                ret = G__18139;
                i = G__18140;
                continue;
              }
              break;
            }
          } else {
            return and__4262__auto____$2;
          }
        } else {
          return and__4262__auto____$1;
        }
      } else {
        return and__4262__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__18142 = arguments.length;
  switch(G__18142) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18143 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18143) : cljs.core.deref.call(null, G__18143);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__18146 = arguments.length;
  switch(G__18146) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18147 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18147) : cljs.core.deref.call(null, G__18147);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__18150 = arguments.length;
  switch(G__18150) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18151 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18151) : cljs.core.deref.call(null, G__18151);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__18154 = arguments.length;
  switch(G__18154) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__18155 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__18155) : targets.call(null, G__18155);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__18156 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__18156) : sources.call(null, G__18156);
      }()));
    };
  }(tp, td, ta);
  var or__4274__auto__ = cljs.core.contains_QMARK_(function() {
    var G__18160 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__18160) : tp.call(null, G__18160);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__18161 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__18161) : ta.call(null, G__18161);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__18162 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__18162) : ta.call(null, G__18162);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__18168 = arguments.length;
  switch(G__18168) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__18169 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__18169) : parentMap.call(null, G__18169);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18170 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__18170) : parentMap.call(null, G__18170);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__18164_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__18164_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__18164_SHARP_), cljs.core.second(p1__18164_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__18171 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__18171) : parentMap.call(null, G__18171);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__18165_SHARP_, p2__18166_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__18165_SHARP_, p2__18166_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__18175 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18175) : cljs.core.deref.call(null, G__18175);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__18176 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18176) : cljs.core.deref.call(null, G__18176);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__18192 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18192) : cljs.core.deref.call(null, G__18192);
  }().call(null, x);
  var or__4274__auto__ = cljs.core.truth_(function() {
    var and__4262__auto__ = xprefs;
    if (cljs.core.truth_(and__4262__auto__)) {
      var G__18194 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__18194) : xprefs.call(null, G__18194);
    } else {
      return and__4262__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    var or__4274__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__18195 = cljs.core.rest(ps);
          ps = G__18195;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4274__auto____$1)) {
      return or__4274__auto____$1;
    } else {
      var or__4274__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__18196 = cljs.core.rest(ps);
            ps = G__18196;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4274__auto____$2)) {
        return or__4274__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4274__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__18210) {
    var vec__18211 = p__18210;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18211, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18211, 1, null);
    var e = vec__18211;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__18212 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18212) : cljs.core.deref.call(null, G__18212);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4274__auto__ = be == null;
        if (or__4274__auto__) {
          return or__4274__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__18213 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18213) : cljs.core.deref.call(null, G__18213);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__18214 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18214) : cljs.core.deref.call(null, G__18214);
    }(), function() {
      var G__18215 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18215) : cljs.core.deref.call(null, G__18215);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj18217 = {};
  return obj18217;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._reset[function() {
        var G__18221 = x__4910__auto__;
        return goog.typeOf(G__18221);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._reset["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._add_method[function() {
        var G__18225 = x__4910__auto__;
        return goog.typeOf(G__18225);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._add_method["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._remove_method[function() {
        var G__18229 = x__4910__auto__;
        return goog.typeOf(G__18229);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._remove_method["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._prefer_method[function() {
        var G__18233 = x__4910__auto__;
        return goog.typeOf(G__18233);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._get_method[function() {
        var G__18237 = x__4910__auto__;
        return goog.typeOf(G__18237);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._get_method["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._methods[function() {
        var G__18241 = x__4910__auto__;
        return goog.typeOf(G__18241);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._methods["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._prefers[function() {
        var G__18245 = x__4910__auto__;
        return goog.typeOf(G__18245);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._prefers["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._default_dispatch_val[function() {
        var G__18249 = x__4910__auto__;
        return goog.typeOf(G__18249);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4262__auto__ = mf;
    if (and__4262__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4910__auto__ = mf == null ? null : mf;
    return function() {
      var or__4274__auto__ = cljs.core._dispatch_fn[function() {
        var G__18253 = x__4910__auto__;
        return goog.typeOf(G__18253);
      }()];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__18255 = this$__$1;
  return goog.getUid(G__18255);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__18256 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18256) : cljs.core.deref.call(null, G__18256);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__18257 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18257) : cljs.core.deref.call(null, G__18257);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18258 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18258) : cljs.core.deref.call(null, G__18258);
  }(), function() {
    var G__18259 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18259) : cljs.core.deref.call(null, G__18259);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__18260 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18260) : cljs.core.deref.call(null, G__18260);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__18261 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18261) : cljs.core.deref.call(null, G__18261);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.call = function() {
  var G__19102 = null;
  var G__19102__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__19102__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18262 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__18262) : self__.dispatch_fn.call(null, G__18262);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18263 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__18263) : target_fn.call(null, G__18263);
  };
  var G__19102__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18264 = a;
      var G__18265 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__18264, G__18265) : self__.dispatch_fn.call(null, G__18264, G__18265);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18266 = a;
    var G__18267 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__18266, G__18267) : target_fn.call(null, G__18266, G__18267);
  };
  var G__19102__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18268 = a;
      var G__18269 = b;
      var G__18270 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__18268, G__18269, G__18270) : self__.dispatch_fn.call(null, G__18268, G__18269, G__18270);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18271 = a;
    var G__18272 = b;
    var G__18273 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__18271, G__18272, G__18273) : target_fn.call(null, G__18271, G__18272, G__18273);
  };
  var G__19102__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18274 = a;
      var G__18275 = b;
      var G__18276 = c;
      var G__18277 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__18274, G__18275, G__18276, G__18277) : self__.dispatch_fn.call(null, G__18274, G__18275, G__18276, G__18277);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18278 = a;
    var G__18279 = b;
    var G__18280 = c;
    var G__18281 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__18278, G__18279, G__18280, G__18281) : target_fn.call(null, G__18278, G__18279, G__18280, G__18281);
  };
  var G__19102__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18282 = a;
      var G__18283 = b;
      var G__18284 = c;
      var G__18285 = d;
      var G__18286 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__18282, G__18283, G__18284, G__18285, G__18286) : self__.dispatch_fn.call(null, G__18282, G__18283, G__18284, G__18285, G__18286);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18287 = a;
    var G__18288 = b;
    var G__18289 = c;
    var G__18290 = d;
    var G__18291 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__18287, G__18288, G__18289, G__18290, G__18291) : target_fn.call(null, G__18287, G__18288, G__18289, G__18290, G__18291);
  };
  var G__19102__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18292 = a;
      var G__18293 = b;
      var G__18294 = c;
      var G__18295 = d;
      var G__18296 = e;
      var G__18297 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__18292, G__18293, G__18294, G__18295, G__18296, G__18297) : self__.dispatch_fn.call(null, G__18292, G__18293, G__18294, G__18295, G__18296, G__18297);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18298 = a;
    var G__18299 = b;
    var G__18300 = c;
    var G__18301 = d;
    var G__18302 = e;
    var G__18303 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__18298, G__18299, G__18300, G__18301, G__18302, G__18303) : target_fn.call(null, G__18298, G__18299, G__18300, G__18301, G__18302, G__18303);
  };
  var G__19102__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18304 = a;
      var G__18305 = b;
      var G__18306 = c;
      var G__18307 = d;
      var G__18308 = e;
      var G__18309 = f;
      var G__18310 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__18304, G__18305, G__18306, G__18307, G__18308, G__18309, G__18310) : self__.dispatch_fn.call(null, G__18304, G__18305, G__18306, G__18307, G__18308, G__18309, G__18310);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18311 = a;
    var G__18312 = b;
    var G__18313 = c;
    var G__18314 = d;
    var G__18315 = e;
    var G__18316 = f;
    var G__18317 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__18311, G__18312, G__18313, G__18314, G__18315, G__18316, G__18317) : target_fn.call(null, G__18311, G__18312, G__18313, G__18314, G__18315, G__18316, G__18317);
  };
  var G__19102__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18318 = a;
      var G__18319 = b;
      var G__18320 = c;
      var G__18321 = d;
      var G__18322 = e;
      var G__18323 = f;
      var G__18324 = g;
      var G__18325 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__18318, G__18319, G__18320, G__18321, G__18322, G__18323, G__18324, G__18325) : self__.dispatch_fn.call(null, G__18318, G__18319, G__18320, G__18321, G__18322, G__18323, G__18324, G__18325);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18326 = a;
    var G__18327 = b;
    var G__18328 = c;
    var G__18329 = d;
    var G__18330 = e;
    var G__18331 = f;
    var G__18332 = g;
    var G__18333 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__18326, G__18327, G__18328, G__18329, G__18330, G__18331, G__18332, G__18333) : target_fn.call(null, G__18326, G__18327, G__18328, G__18329, G__18330, G__18331, G__18332, G__18333);
  };
  var G__19102__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18334 = a;
      var G__18335 = b;
      var G__18336 = c;
      var G__18337 = d;
      var G__18338 = e;
      var G__18339 = f;
      var G__18340 = g;
      var G__18341 = h;
      var G__18342 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__18334, G__18335, G__18336, G__18337, G__18338, G__18339, G__18340, G__18341, G__18342) : self__.dispatch_fn.call(null, G__18334, G__18335, G__18336, G__18337, G__18338, G__18339, G__18340, G__18341, G__18342);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18343 = a;
    var G__18344 = b;
    var G__18345 = c;
    var G__18346 = d;
    var G__18347 = e;
    var G__18348 = f;
    var G__18349 = g;
    var G__18350 = h;
    var G__18351 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__18343, G__18344, G__18345, G__18346, G__18347, G__18348, G__18349, G__18350, G__18351) : target_fn.call(null, G__18343, G__18344, G__18345, G__18346, G__18347, G__18348, G__18349, G__18350, G__18351);
  };
  var G__19102__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18352 = a;
      var G__18353 = b;
      var G__18354 = c;
      var G__18355 = d;
      var G__18356 = e;
      var G__18357 = f;
      var G__18358 = g;
      var G__18359 = h;
      var G__18360 = i;
      var G__18361 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__18352, G__18353, G__18354, G__18355, G__18356, G__18357, G__18358, G__18359, G__18360, G__18361) : self__.dispatch_fn.call(null, G__18352, G__18353, G__18354, G__18355, G__18356, G__18357, G__18358, G__18359, G__18360, G__18361);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18362 = a;
    var G__18363 = b;
    var G__18364 = c;
    var G__18365 = d;
    var G__18366 = e;
    var G__18367 = f;
    var G__18368 = g;
    var G__18369 = h;
    var G__18370 = i;
    var G__18371 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__18362, G__18363, G__18364, G__18365, G__18366, G__18367, G__18368, G__18369, G__18370, G__18371) : target_fn.call(null, G__18362, G__18363, G__18364, G__18365, G__18366, G__18367, G__18368, G__18369, G__18370, G__18371);
  };
  var G__19102__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18372 = a;
      var G__18373 = b;
      var G__18374 = c;
      var G__18375 = d;
      var G__18376 = e;
      var G__18377 = f;
      var G__18378 = g;
      var G__18379 = h;
      var G__18380 = i;
      var G__18381 = j;
      var G__18382 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__18372, G__18373, G__18374, G__18375, G__18376, G__18377, G__18378, G__18379, G__18380, G__18381, G__18382) : self__.dispatch_fn.call(null, G__18372, G__18373, G__18374, G__18375, G__18376, G__18377, G__18378, G__18379, G__18380, G__18381, G__18382);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18383 = a;
    var G__18384 = b;
    var G__18385 = c;
    var G__18386 = d;
    var G__18387 = e;
    var G__18388 = f;
    var G__18389 = g;
    var G__18390 = h;
    var G__18391 = i;
    var G__18392 = j;
    var G__18393 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__18383, G__18384, G__18385, G__18386, G__18387, G__18388, G__18389, G__18390, G__18391, G__18392, G__18393) : target_fn.call(null, G__18383, G__18384, G__18385, G__18386, G__18387, G__18388, G__18389, G__18390, G__18391, G__18392, G__18393);
  };
  var G__19102__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18394 = a;
      var G__18395 = b;
      var G__18396 = c;
      var G__18397 = d;
      var G__18398 = e;
      var G__18399 = f;
      var G__18400 = g;
      var G__18401 = h;
      var G__18402 = i;
      var G__18403 = j;
      var G__18404 = k;
      var G__18405 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__18394, G__18395, G__18396, G__18397, G__18398, G__18399, G__18400, G__18401, G__18402, G__18403, G__18404, G__18405) : self__.dispatch_fn.call(null, G__18394, G__18395, G__18396, G__18397, G__18398, G__18399, G__18400, G__18401, G__18402, G__18403, G__18404, G__18405);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18406 = a;
    var G__18407 = b;
    var G__18408 = c;
    var G__18409 = d;
    var G__18410 = e;
    var G__18411 = f;
    var G__18412 = g;
    var G__18413 = h;
    var G__18414 = i;
    var G__18415 = j;
    var G__18416 = k;
    var G__18417 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__18406, G__18407, G__18408, G__18409, G__18410, G__18411, G__18412, G__18413, G__18414, G__18415, G__18416, G__18417) : target_fn.call(null, G__18406, G__18407, G__18408, G__18409, G__18410, G__18411, G__18412, G__18413, G__18414, G__18415, G__18416, G__18417);
  };
  var G__19102__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18418 = a;
      var G__18419 = b;
      var G__18420 = c;
      var G__18421 = d;
      var G__18422 = e;
      var G__18423 = f;
      var G__18424 = g;
      var G__18425 = h;
      var G__18426 = i;
      var G__18427 = j;
      var G__18428 = k;
      var G__18429 = l;
      var G__18430 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__18418, G__18419, G__18420, G__18421, G__18422, G__18423, G__18424, G__18425, G__18426, G__18427, G__18428, G__18429, G__18430) : self__.dispatch_fn.call(null, G__18418, G__18419, G__18420, G__18421, G__18422, G__18423, G__18424, G__18425, G__18426, G__18427, G__18428, G__18429, G__18430);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18431 = a;
    var G__18432 = b;
    var G__18433 = c;
    var G__18434 = d;
    var G__18435 = e;
    var G__18436 = f;
    var G__18437 = g;
    var G__18438 = h;
    var G__18439 = i;
    var G__18440 = j;
    var G__18441 = k;
    var G__18442 = l;
    var G__18443 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__18431, G__18432, G__18433, G__18434, G__18435, G__18436, G__18437, G__18438, G__18439, G__18440, G__18441, G__18442, G__18443) : target_fn.call(null, G__18431, G__18432, G__18433, G__18434, G__18435, G__18436, G__18437, G__18438, G__18439, G__18440, G__18441, G__18442, G__18443);
  };
  var G__19102__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18444 = a;
      var G__18445 = b;
      var G__18446 = c;
      var G__18447 = d;
      var G__18448 = e;
      var G__18449 = f;
      var G__18450 = g;
      var G__18451 = h;
      var G__18452 = i;
      var G__18453 = j;
      var G__18454 = k;
      var G__18455 = l;
      var G__18456 = m;
      var G__18457 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__18444, G__18445, G__18446, G__18447, G__18448, G__18449, G__18450, G__18451, G__18452, G__18453, G__18454, G__18455, G__18456, G__18457) : self__.dispatch_fn.call(null, G__18444, G__18445, G__18446, G__18447, G__18448, G__18449, G__18450, G__18451, G__18452, G__18453, G__18454, G__18455, G__18456, G__18457);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18458 = a;
    var G__18459 = b;
    var G__18460 = c;
    var G__18461 = d;
    var G__18462 = e;
    var G__18463 = f;
    var G__18464 = g;
    var G__18465 = h;
    var G__18466 = i;
    var G__18467 = j;
    var G__18468 = k;
    var G__18469 = l;
    var G__18470 = m;
    var G__18471 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__18458, G__18459, G__18460, G__18461, G__18462, G__18463, G__18464, G__18465, G__18466, G__18467, G__18468, G__18469, G__18470, G__18471) : target_fn.call(null, G__18458, G__18459, G__18460, G__18461, G__18462, G__18463, G__18464, G__18465, G__18466, G__18467, G__18468, G__18469, G__18470, G__18471);
  };
  var G__19102__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18472 = a;
      var G__18473 = b;
      var G__18474 = c;
      var G__18475 = d;
      var G__18476 = e;
      var G__18477 = f;
      var G__18478 = g;
      var G__18479 = h;
      var G__18480 = i;
      var G__18481 = j;
      var G__18482 = k;
      var G__18483 = l;
      var G__18484 = m;
      var G__18485 = n;
      var G__18486 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__18472, G__18473, G__18474, G__18475, G__18476, G__18477, G__18478, G__18479, G__18480, G__18481, G__18482, G__18483, G__18484, G__18485, G__18486) : self__.dispatch_fn.call(null, G__18472, G__18473, G__18474, G__18475, G__18476, G__18477, G__18478, G__18479, G__18480, G__18481, G__18482, G__18483, G__18484, G__18485, G__18486);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18487 = a;
    var G__18488 = b;
    var G__18489 = c;
    var G__18490 = d;
    var G__18491 = e;
    var G__18492 = f;
    var G__18493 = g;
    var G__18494 = h;
    var G__18495 = i;
    var G__18496 = j;
    var G__18497 = k;
    var G__18498 = l;
    var G__18499 = m;
    var G__18500 = n;
    var G__18501 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__18487, G__18488, G__18489, G__18490, G__18491, G__18492, G__18493, G__18494, G__18495, G__18496, G__18497, G__18498, G__18499, G__18500, G__18501) : target_fn.call(null, G__18487, G__18488, G__18489, G__18490, G__18491, G__18492, G__18493, G__18494, G__18495, G__18496, G__18497, G__18498, G__18499, G__18500, G__18501);
  };
  var G__19102__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18502 = a;
      var G__18503 = b;
      var G__18504 = c;
      var G__18505 = d;
      var G__18506 = e;
      var G__18507 = f;
      var G__18508 = g;
      var G__18509 = h;
      var G__18510 = i;
      var G__18511 = j;
      var G__18512 = k;
      var G__18513 = l;
      var G__18514 = m;
      var G__18515 = n;
      var G__18516 = o;
      var G__18517 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__18502, G__18503, G__18504, G__18505, G__18506, G__18507, G__18508, G__18509, G__18510, G__18511, G__18512, G__18513, G__18514, G__18515, G__18516, G__18517) : self__.dispatch_fn.call(null, G__18502, G__18503, G__18504, G__18505, G__18506, G__18507, G__18508, G__18509, G__18510, G__18511, G__18512, G__18513, G__18514, G__18515, G__18516, G__18517);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18518 = a;
    var G__18519 = b;
    var G__18520 = c;
    var G__18521 = d;
    var G__18522 = e;
    var G__18523 = f;
    var G__18524 = g;
    var G__18525 = h;
    var G__18526 = i;
    var G__18527 = j;
    var G__18528 = k;
    var G__18529 = l;
    var G__18530 = m;
    var G__18531 = n;
    var G__18532 = o;
    var G__18533 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__18518, G__18519, G__18520, G__18521, G__18522, G__18523, G__18524, G__18525, G__18526, G__18527, G__18528, G__18529, G__18530, G__18531, G__18532, G__18533) : target_fn.call(null, G__18518, G__18519, G__18520, G__18521, G__18522, G__18523, G__18524, G__18525, G__18526, G__18527, G__18528, G__18529, G__18530, G__18531, G__18532, G__18533);
  };
  var G__19102__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18534 = a;
      var G__18535 = b;
      var G__18536 = c;
      var G__18537 = d;
      var G__18538 = e;
      var G__18539 = f;
      var G__18540 = g;
      var G__18541 = h;
      var G__18542 = i;
      var G__18543 = j;
      var G__18544 = k;
      var G__18545 = l;
      var G__18546 = m;
      var G__18547 = n;
      var G__18548 = o;
      var G__18549 = p;
      var G__18550 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__18534, G__18535, G__18536, G__18537, G__18538, G__18539, G__18540, G__18541, G__18542, G__18543, G__18544, G__18545, G__18546, G__18547, G__18548, G__18549, G__18550) : self__.dispatch_fn.call(null, G__18534, G__18535, G__18536, G__18537, G__18538, G__18539, G__18540, G__18541, G__18542, G__18543, G__18544, G__18545, G__18546, G__18547, G__18548, G__18549, G__18550);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18551 = a;
    var G__18552 = b;
    var G__18553 = c;
    var G__18554 = d;
    var G__18555 = e;
    var G__18556 = f;
    var G__18557 = g;
    var G__18558 = h;
    var G__18559 = i;
    var G__18560 = j;
    var G__18561 = k;
    var G__18562 = l;
    var G__18563 = m;
    var G__18564 = n;
    var G__18565 = o;
    var G__18566 = p;
    var G__18567 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__18551, G__18552, G__18553, G__18554, G__18555, G__18556, G__18557, G__18558, G__18559, G__18560, G__18561, G__18562, G__18563, G__18564, G__18565, G__18566, G__18567) : target_fn.call(null, G__18551, G__18552, G__18553, G__18554, G__18555, G__18556, G__18557, G__18558, G__18559, G__18560, G__18561, G__18562, G__18563, G__18564, G__18565, G__18566, G__18567);
  };
  var G__19102__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18568 = a;
      var G__18569 = b;
      var G__18570 = c;
      var G__18571 = d;
      var G__18572 = e;
      var G__18573 = f;
      var G__18574 = g;
      var G__18575 = h;
      var G__18576 = i;
      var G__18577 = j;
      var G__18578 = k;
      var G__18579 = l;
      var G__18580 = m;
      var G__18581 = n;
      var G__18582 = o;
      var G__18583 = p;
      var G__18584 = q;
      var G__18585 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__18568, G__18569, G__18570, G__18571, G__18572, G__18573, G__18574, G__18575, G__18576, G__18577, G__18578, G__18579, G__18580, G__18581, G__18582, G__18583, G__18584, G__18585) : self__.dispatch_fn.call(null, G__18568, G__18569, G__18570, G__18571, G__18572, G__18573, G__18574, G__18575, G__18576, G__18577, G__18578, G__18579, G__18580, G__18581, G__18582, G__18583, G__18584, G__18585);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18586 = a;
    var G__18587 = b;
    var G__18588 = c;
    var G__18589 = d;
    var G__18590 = e;
    var G__18591 = f;
    var G__18592 = g;
    var G__18593 = h;
    var G__18594 = i;
    var G__18595 = j;
    var G__18596 = k;
    var G__18597 = l;
    var G__18598 = m;
    var G__18599 = n;
    var G__18600 = o;
    var G__18601 = p;
    var G__18602 = q;
    var G__18603 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__18586, G__18587, G__18588, G__18589, G__18590, G__18591, G__18592, G__18593, G__18594, G__18595, G__18596, G__18597, G__18598, G__18599, G__18600, G__18601, G__18602, G__18603) : target_fn.call(null, G__18586, G__18587, G__18588, G__18589, G__18590, G__18591, G__18592, G__18593, G__18594, G__18595, G__18596, G__18597, G__18598, G__18599, G__18600, G__18601, G__18602, G__18603);
  };
  var G__19102__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18604 = a;
      var G__18605 = b;
      var G__18606 = c;
      var G__18607 = d;
      var G__18608 = e;
      var G__18609 = f;
      var G__18610 = g;
      var G__18611 = h;
      var G__18612 = i;
      var G__18613 = j;
      var G__18614 = k;
      var G__18615 = l;
      var G__18616 = m;
      var G__18617 = n;
      var G__18618 = o;
      var G__18619 = p;
      var G__18620 = q;
      var G__18621 = r;
      var G__18622 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__18604, G__18605, G__18606, G__18607, G__18608, G__18609, G__18610, G__18611, G__18612, G__18613, G__18614, G__18615, G__18616, G__18617, G__18618, G__18619, G__18620, G__18621, G__18622) : self__.dispatch_fn.call(null, G__18604, G__18605, G__18606, G__18607, G__18608, G__18609, G__18610, G__18611, G__18612, G__18613, G__18614, G__18615, G__18616, G__18617, G__18618, G__18619, G__18620, 
      G__18621, G__18622);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18623 = a;
    var G__18624 = b;
    var G__18625 = c;
    var G__18626 = d;
    var G__18627 = e;
    var G__18628 = f;
    var G__18629 = g;
    var G__18630 = h;
    var G__18631 = i;
    var G__18632 = j;
    var G__18633 = k;
    var G__18634 = l;
    var G__18635 = m;
    var G__18636 = n;
    var G__18637 = o;
    var G__18638 = p;
    var G__18639 = q;
    var G__18640 = r;
    var G__18641 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__18623, G__18624, G__18625, G__18626, G__18627, G__18628, G__18629, G__18630, G__18631, G__18632, G__18633, G__18634, G__18635, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641) : target_fn.call(null, G__18623, G__18624, G__18625, G__18626, G__18627, G__18628, G__18629, G__18630, G__18631, G__18632, G__18633, G__18634, G__18635, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641);
  };
  var G__19102__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18642 = a;
      var G__18643 = b;
      var G__18644 = c;
      var G__18645 = d;
      var G__18646 = e;
      var G__18647 = f;
      var G__18648 = g;
      var G__18649 = h;
      var G__18650 = i;
      var G__18651 = j;
      var G__18652 = k;
      var G__18653 = l;
      var G__18654 = m;
      var G__18655 = n;
      var G__18656 = o;
      var G__18657 = p;
      var G__18658 = q;
      var G__18659 = r;
      var G__18660 = s;
      var G__18661 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__18642, G__18643, G__18644, G__18645, G__18646, G__18647, G__18648, G__18649, G__18650, G__18651, G__18652, G__18653, G__18654, G__18655, G__18656, G__18657, G__18658, G__18659, G__18660, G__18661) : self__.dispatch_fn.call(null, G__18642, G__18643, G__18644, G__18645, G__18646, G__18647, G__18648, G__18649, G__18650, G__18651, G__18652, G__18653, G__18654, G__18655, G__18656, G__18657, 
      G__18658, G__18659, G__18660, G__18661);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18662 = a;
    var G__18663 = b;
    var G__18664 = c;
    var G__18665 = d;
    var G__18666 = e;
    var G__18667 = f;
    var G__18668 = g;
    var G__18669 = h;
    var G__18670 = i;
    var G__18671 = j;
    var G__18672 = k;
    var G__18673 = l;
    var G__18674 = m;
    var G__18675 = n;
    var G__18676 = o;
    var G__18677 = p;
    var G__18678 = q;
    var G__18679 = r;
    var G__18680 = s;
    var G__18681 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__18662, G__18663, G__18664, G__18665, G__18666, G__18667, G__18668, G__18669, G__18670, G__18671, G__18672, G__18673, G__18674, G__18675, G__18676, G__18677, G__18678, G__18679, G__18680, G__18681) : target_fn.call(null, G__18662, G__18663, G__18664, G__18665, G__18666, G__18667, G__18668, G__18669, G__18670, G__18671, G__18672, G__18673, G__18674, G__18675, G__18676, G__18677, G__18678, G__18679, G__18680, 
    G__18681);
  };
  var G__19102__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__19102 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__19102__1.call(this, self__);
      case 2:
        return G__19102__2.call(this, self__, a);
      case 3:
        return G__19102__3.call(this, self__, a, b);
      case 4:
        return G__19102__4.call(this, self__, a, b, c);
      case 5:
        return G__19102__5.call(this, self__, a, b, c, d);
      case 6:
        return G__19102__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__19102__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__19102__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__19102__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__19102__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__19102__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__19102__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__19102__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__19102__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__19102__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__19102__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__19102__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__19102__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__19102__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__19102__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__19102__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__19102__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19102.cljs$core$IFn$_invoke$arity$1 = G__19102__1;
  G__19102.cljs$core$IFn$_invoke$arity$2 = G__19102__2;
  G__19102.cljs$core$IFn$_invoke$arity$3 = G__19102__3;
  G__19102.cljs$core$IFn$_invoke$arity$4 = G__19102__4;
  G__19102.cljs$core$IFn$_invoke$arity$5 = G__19102__5;
  G__19102.cljs$core$IFn$_invoke$arity$6 = G__19102__6;
  G__19102.cljs$core$IFn$_invoke$arity$7 = G__19102__7;
  G__19102.cljs$core$IFn$_invoke$arity$8 = G__19102__8;
  G__19102.cljs$core$IFn$_invoke$arity$9 = G__19102__9;
  G__19102.cljs$core$IFn$_invoke$arity$10 = G__19102__10;
  G__19102.cljs$core$IFn$_invoke$arity$11 = G__19102__11;
  G__19102.cljs$core$IFn$_invoke$arity$12 = G__19102__12;
  G__19102.cljs$core$IFn$_invoke$arity$13 = G__19102__13;
  G__19102.cljs$core$IFn$_invoke$arity$14 = G__19102__14;
  G__19102.cljs$core$IFn$_invoke$arity$15 = G__19102__15;
  G__19102.cljs$core$IFn$_invoke$arity$16 = G__19102__16;
  G__19102.cljs$core$IFn$_invoke$arity$17 = G__19102__17;
  G__19102.cljs$core$IFn$_invoke$arity$18 = G__19102__18;
  G__19102.cljs$core$IFn$_invoke$arity$19 = G__19102__19;
  G__19102.cljs$core$IFn$_invoke$arity$20 = G__19102__20;
  G__19102.cljs$core$IFn$_invoke$arity$21 = G__19102__21;
  G__19102.cljs$core$IFn$_invoke$arity$22 = G__19102__22;
  return G__19102;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args18254) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18254)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18682 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__18682) : self__.dispatch_fn.call(null, G__18682);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18683 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__18683) : target_fn.call(null, G__18683);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18684 = a;
    var G__18685 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__18684, G__18685) : self__.dispatch_fn.call(null, G__18684, G__18685);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18686 = a;
  var G__18687 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__18686, G__18687) : target_fn.call(null, G__18686, G__18687);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18688 = a;
    var G__18689 = b;
    var G__18690 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__18688, G__18689, G__18690) : self__.dispatch_fn.call(null, G__18688, G__18689, G__18690);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18691 = a;
  var G__18692 = b;
  var G__18693 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__18691, G__18692, G__18693) : target_fn.call(null, G__18691, G__18692, G__18693);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18694 = a;
    var G__18695 = b;
    var G__18696 = c;
    var G__18697 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__18694, G__18695, G__18696, G__18697) : self__.dispatch_fn.call(null, G__18694, G__18695, G__18696, G__18697);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18698 = a;
  var G__18699 = b;
  var G__18700 = c;
  var G__18701 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__18698, G__18699, G__18700, G__18701) : target_fn.call(null, G__18698, G__18699, G__18700, G__18701);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18702 = a;
    var G__18703 = b;
    var G__18704 = c;
    var G__18705 = d;
    var G__18706 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__18702, G__18703, G__18704, G__18705, G__18706) : self__.dispatch_fn.call(null, G__18702, G__18703, G__18704, G__18705, G__18706);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18707 = a;
  var G__18708 = b;
  var G__18709 = c;
  var G__18710 = d;
  var G__18711 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__18707, G__18708, G__18709, G__18710, G__18711) : target_fn.call(null, G__18707, G__18708, G__18709, G__18710, G__18711);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18712 = a;
    var G__18713 = b;
    var G__18714 = c;
    var G__18715 = d;
    var G__18716 = e;
    var G__18717 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__18712, G__18713, G__18714, G__18715, G__18716, G__18717) : self__.dispatch_fn.call(null, G__18712, G__18713, G__18714, G__18715, G__18716, G__18717);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18718 = a;
  var G__18719 = b;
  var G__18720 = c;
  var G__18721 = d;
  var G__18722 = e;
  var G__18723 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__18718, G__18719, G__18720, G__18721, G__18722, G__18723) : target_fn.call(null, G__18718, G__18719, G__18720, G__18721, G__18722, G__18723);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18724 = a;
    var G__18725 = b;
    var G__18726 = c;
    var G__18727 = d;
    var G__18728 = e;
    var G__18729 = f;
    var G__18730 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__18724, G__18725, G__18726, G__18727, G__18728, G__18729, G__18730) : self__.dispatch_fn.call(null, G__18724, G__18725, G__18726, G__18727, G__18728, G__18729, G__18730);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18731 = a;
  var G__18732 = b;
  var G__18733 = c;
  var G__18734 = d;
  var G__18735 = e;
  var G__18736 = f;
  var G__18737 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__18731, G__18732, G__18733, G__18734, G__18735, G__18736, G__18737) : target_fn.call(null, G__18731, G__18732, G__18733, G__18734, G__18735, G__18736, G__18737);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18738 = a;
    var G__18739 = b;
    var G__18740 = c;
    var G__18741 = d;
    var G__18742 = e;
    var G__18743 = f;
    var G__18744 = g;
    var G__18745 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__18738, G__18739, G__18740, G__18741, G__18742, G__18743, G__18744, G__18745) : self__.dispatch_fn.call(null, G__18738, G__18739, G__18740, G__18741, G__18742, G__18743, G__18744, G__18745);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18746 = a;
  var G__18747 = b;
  var G__18748 = c;
  var G__18749 = d;
  var G__18750 = e;
  var G__18751 = f;
  var G__18752 = g;
  var G__18753 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__18746, G__18747, G__18748, G__18749, G__18750, G__18751, G__18752, G__18753) : target_fn.call(null, G__18746, G__18747, G__18748, G__18749, G__18750, G__18751, G__18752, G__18753);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18754 = a;
    var G__18755 = b;
    var G__18756 = c;
    var G__18757 = d;
    var G__18758 = e;
    var G__18759 = f;
    var G__18760 = g;
    var G__18761 = h;
    var G__18762 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__18754, G__18755, G__18756, G__18757, G__18758, G__18759, G__18760, G__18761, G__18762) : self__.dispatch_fn.call(null, G__18754, G__18755, G__18756, G__18757, G__18758, G__18759, G__18760, G__18761, G__18762);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18763 = a;
  var G__18764 = b;
  var G__18765 = c;
  var G__18766 = d;
  var G__18767 = e;
  var G__18768 = f;
  var G__18769 = g;
  var G__18770 = h;
  var G__18771 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__18763, G__18764, G__18765, G__18766, G__18767, G__18768, G__18769, G__18770, G__18771) : target_fn.call(null, G__18763, G__18764, G__18765, G__18766, G__18767, G__18768, G__18769, G__18770, G__18771);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18772 = a;
    var G__18773 = b;
    var G__18774 = c;
    var G__18775 = d;
    var G__18776 = e;
    var G__18777 = f;
    var G__18778 = g;
    var G__18779 = h;
    var G__18780 = i;
    var G__18781 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__18772, G__18773, G__18774, G__18775, G__18776, G__18777, G__18778, G__18779, G__18780, G__18781) : self__.dispatch_fn.call(null, G__18772, G__18773, G__18774, G__18775, G__18776, G__18777, G__18778, G__18779, G__18780, G__18781);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18782 = a;
  var G__18783 = b;
  var G__18784 = c;
  var G__18785 = d;
  var G__18786 = e;
  var G__18787 = f;
  var G__18788 = g;
  var G__18789 = h;
  var G__18790 = i;
  var G__18791 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__18782, G__18783, G__18784, G__18785, G__18786, G__18787, G__18788, G__18789, G__18790, G__18791) : target_fn.call(null, G__18782, G__18783, G__18784, G__18785, G__18786, G__18787, G__18788, G__18789, G__18790, G__18791);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18792 = a;
    var G__18793 = b;
    var G__18794 = c;
    var G__18795 = d;
    var G__18796 = e;
    var G__18797 = f;
    var G__18798 = g;
    var G__18799 = h;
    var G__18800 = i;
    var G__18801 = j;
    var G__18802 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__18792, G__18793, G__18794, G__18795, G__18796, G__18797, G__18798, G__18799, G__18800, G__18801, G__18802) : self__.dispatch_fn.call(null, G__18792, G__18793, G__18794, G__18795, G__18796, G__18797, G__18798, G__18799, G__18800, G__18801, G__18802);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18803 = a;
  var G__18804 = b;
  var G__18805 = c;
  var G__18806 = d;
  var G__18807 = e;
  var G__18808 = f;
  var G__18809 = g;
  var G__18810 = h;
  var G__18811 = i;
  var G__18812 = j;
  var G__18813 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__18803, G__18804, G__18805, G__18806, G__18807, G__18808, G__18809, G__18810, G__18811, G__18812, G__18813) : target_fn.call(null, G__18803, G__18804, G__18805, G__18806, G__18807, G__18808, G__18809, G__18810, G__18811, G__18812, G__18813);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18814 = a;
    var G__18815 = b;
    var G__18816 = c;
    var G__18817 = d;
    var G__18818 = e;
    var G__18819 = f;
    var G__18820 = g;
    var G__18821 = h;
    var G__18822 = i;
    var G__18823 = j;
    var G__18824 = k;
    var G__18825 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__18814, G__18815, G__18816, G__18817, G__18818, G__18819, G__18820, G__18821, G__18822, G__18823, G__18824, G__18825) : self__.dispatch_fn.call(null, G__18814, G__18815, G__18816, G__18817, G__18818, G__18819, G__18820, G__18821, G__18822, G__18823, G__18824, G__18825);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18826 = a;
  var G__18827 = b;
  var G__18828 = c;
  var G__18829 = d;
  var G__18830 = e;
  var G__18831 = f;
  var G__18832 = g;
  var G__18833 = h;
  var G__18834 = i;
  var G__18835 = j;
  var G__18836 = k;
  var G__18837 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__18826, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833, G__18834, G__18835, G__18836, G__18837) : target_fn.call(null, G__18826, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833, G__18834, G__18835, G__18836, G__18837);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18838 = a;
    var G__18839 = b;
    var G__18840 = c;
    var G__18841 = d;
    var G__18842 = e;
    var G__18843 = f;
    var G__18844 = g;
    var G__18845 = h;
    var G__18846 = i;
    var G__18847 = j;
    var G__18848 = k;
    var G__18849 = l;
    var G__18850 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__18838, G__18839, G__18840, G__18841, G__18842, G__18843, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850) : self__.dispatch_fn.call(null, G__18838, G__18839, G__18840, G__18841, G__18842, G__18843, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18851 = a;
  var G__18852 = b;
  var G__18853 = c;
  var G__18854 = d;
  var G__18855 = e;
  var G__18856 = f;
  var G__18857 = g;
  var G__18858 = h;
  var G__18859 = i;
  var G__18860 = j;
  var G__18861 = k;
  var G__18862 = l;
  var G__18863 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, G__18860, G__18861, G__18862, G__18863) : target_fn.call(null, G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, G__18860, G__18861, G__18862, G__18863);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18864 = a;
    var G__18865 = b;
    var G__18866 = c;
    var G__18867 = d;
    var G__18868 = e;
    var G__18869 = f;
    var G__18870 = g;
    var G__18871 = h;
    var G__18872 = i;
    var G__18873 = j;
    var G__18874 = k;
    var G__18875 = l;
    var G__18876 = m;
    var G__18877 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__18864, G__18865, G__18866, G__18867, G__18868, G__18869, G__18870, G__18871, G__18872, G__18873, G__18874, G__18875, G__18876, G__18877) : self__.dispatch_fn.call(null, G__18864, G__18865, G__18866, G__18867, G__18868, G__18869, G__18870, G__18871, G__18872, G__18873, G__18874, G__18875, G__18876, G__18877);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18878 = a;
  var G__18879 = b;
  var G__18880 = c;
  var G__18881 = d;
  var G__18882 = e;
  var G__18883 = f;
  var G__18884 = g;
  var G__18885 = h;
  var G__18886 = i;
  var G__18887 = j;
  var G__18888 = k;
  var G__18889 = l;
  var G__18890 = m;
  var G__18891 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__18878, G__18879, G__18880, G__18881, G__18882, G__18883, G__18884, G__18885, G__18886, G__18887, G__18888, G__18889, G__18890, G__18891) : target_fn.call(null, G__18878, G__18879, G__18880, G__18881, G__18882, G__18883, G__18884, G__18885, G__18886, G__18887, G__18888, G__18889, G__18890, G__18891);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18892 = a;
    var G__18893 = b;
    var G__18894 = c;
    var G__18895 = d;
    var G__18896 = e;
    var G__18897 = f;
    var G__18898 = g;
    var G__18899 = h;
    var G__18900 = i;
    var G__18901 = j;
    var G__18902 = k;
    var G__18903 = l;
    var G__18904 = m;
    var G__18905 = n;
    var G__18906 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__18892, G__18893, G__18894, G__18895, G__18896, G__18897, G__18898, G__18899, G__18900, G__18901, G__18902, G__18903, G__18904, G__18905, G__18906) : self__.dispatch_fn.call(null, G__18892, G__18893, G__18894, G__18895, G__18896, G__18897, G__18898, G__18899, G__18900, G__18901, G__18902, G__18903, G__18904, G__18905, G__18906);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18907 = a;
  var G__18908 = b;
  var G__18909 = c;
  var G__18910 = d;
  var G__18911 = e;
  var G__18912 = f;
  var G__18913 = g;
  var G__18914 = h;
  var G__18915 = i;
  var G__18916 = j;
  var G__18917 = k;
  var G__18918 = l;
  var G__18919 = m;
  var G__18920 = n;
  var G__18921 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__18907, G__18908, G__18909, G__18910, G__18911, G__18912, G__18913, G__18914, G__18915, G__18916, G__18917, G__18918, G__18919, G__18920, G__18921) : target_fn.call(null, G__18907, G__18908, G__18909, G__18910, G__18911, G__18912, G__18913, G__18914, G__18915, G__18916, G__18917, G__18918, G__18919, G__18920, G__18921);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18922 = a;
    var G__18923 = b;
    var G__18924 = c;
    var G__18925 = d;
    var G__18926 = e;
    var G__18927 = f;
    var G__18928 = g;
    var G__18929 = h;
    var G__18930 = i;
    var G__18931 = j;
    var G__18932 = k;
    var G__18933 = l;
    var G__18934 = m;
    var G__18935 = n;
    var G__18936 = o;
    var G__18937 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__18922, G__18923, G__18924, G__18925, G__18926, G__18927, G__18928, G__18929, G__18930, G__18931, G__18932, G__18933, G__18934, G__18935, G__18936, G__18937) : self__.dispatch_fn.call(null, G__18922, G__18923, G__18924, G__18925, G__18926, G__18927, G__18928, G__18929, G__18930, G__18931, G__18932, G__18933, G__18934, G__18935, G__18936, G__18937);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18938 = a;
  var G__18939 = b;
  var G__18940 = c;
  var G__18941 = d;
  var G__18942 = e;
  var G__18943 = f;
  var G__18944 = g;
  var G__18945 = h;
  var G__18946 = i;
  var G__18947 = j;
  var G__18948 = k;
  var G__18949 = l;
  var G__18950 = m;
  var G__18951 = n;
  var G__18952 = o;
  var G__18953 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__18938, G__18939, G__18940, G__18941, G__18942, G__18943, G__18944, G__18945, G__18946, G__18947, G__18948, G__18949, G__18950, G__18951, G__18952, G__18953) : target_fn.call(null, G__18938, G__18939, G__18940, G__18941, G__18942, G__18943, G__18944, G__18945, G__18946, G__18947, G__18948, G__18949, G__18950, G__18951, G__18952, G__18953);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18954 = a;
    var G__18955 = b;
    var G__18956 = c;
    var G__18957 = d;
    var G__18958 = e;
    var G__18959 = f;
    var G__18960 = g;
    var G__18961 = h;
    var G__18962 = i;
    var G__18963 = j;
    var G__18964 = k;
    var G__18965 = l;
    var G__18966 = m;
    var G__18967 = n;
    var G__18968 = o;
    var G__18969 = p;
    var G__18970 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__18954, G__18955, G__18956, G__18957, G__18958, G__18959, G__18960, G__18961, G__18962, G__18963, G__18964, G__18965, G__18966, G__18967, G__18968, G__18969, G__18970) : self__.dispatch_fn.call(null, G__18954, G__18955, G__18956, G__18957, G__18958, G__18959, G__18960, G__18961, G__18962, G__18963, G__18964, G__18965, G__18966, G__18967, G__18968, G__18969, G__18970);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18971 = a;
  var G__18972 = b;
  var G__18973 = c;
  var G__18974 = d;
  var G__18975 = e;
  var G__18976 = f;
  var G__18977 = g;
  var G__18978 = h;
  var G__18979 = i;
  var G__18980 = j;
  var G__18981 = k;
  var G__18982 = l;
  var G__18983 = m;
  var G__18984 = n;
  var G__18985 = o;
  var G__18986 = p;
  var G__18987 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__18971, G__18972, G__18973, G__18974, G__18975, G__18976, G__18977, G__18978, G__18979, G__18980, G__18981, G__18982, G__18983, G__18984, G__18985, G__18986, G__18987) : target_fn.call(null, G__18971, G__18972, G__18973, G__18974, G__18975, G__18976, G__18977, G__18978, G__18979, G__18980, G__18981, G__18982, G__18983, G__18984, G__18985, G__18986, G__18987);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18988 = a;
    var G__18989 = b;
    var G__18990 = c;
    var G__18991 = d;
    var G__18992 = e;
    var G__18993 = f;
    var G__18994 = g;
    var G__18995 = h;
    var G__18996 = i;
    var G__18997 = j;
    var G__18998 = k;
    var G__18999 = l;
    var G__19000 = m;
    var G__19001 = n;
    var G__19002 = o;
    var G__19003 = p;
    var G__19004 = q;
    var G__19005 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__18988, G__18989, G__18990, G__18991, G__18992, G__18993, G__18994, G__18995, G__18996, G__18997, G__18998, G__18999, G__19000, G__19001, G__19002, G__19003, G__19004, G__19005) : self__.dispatch_fn.call(null, G__18988, G__18989, G__18990, G__18991, G__18992, G__18993, G__18994, G__18995, G__18996, G__18997, G__18998, G__18999, G__19000, G__19001, G__19002, G__19003, G__19004, G__19005);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__19006 = a;
  var G__19007 = b;
  var G__19008 = c;
  var G__19009 = d;
  var G__19010 = e;
  var G__19011 = f;
  var G__19012 = g;
  var G__19013 = h;
  var G__19014 = i;
  var G__19015 = j;
  var G__19016 = k;
  var G__19017 = l;
  var G__19018 = m;
  var G__19019 = n;
  var G__19020 = o;
  var G__19021 = p;
  var G__19022 = q;
  var G__19023 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__19006, G__19007, G__19008, G__19009, G__19010, G__19011, G__19012, G__19013, G__19014, G__19015, G__19016, G__19017, G__19018, G__19019, G__19020, G__19021, G__19022, G__19023) : target_fn.call(null, G__19006, G__19007, G__19008, G__19009, G__19010, G__19011, G__19012, G__19013, G__19014, G__19015, G__19016, G__19017, G__19018, G__19019, G__19020, G__19021, G__19022, G__19023);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__19024 = a;
    var G__19025 = b;
    var G__19026 = c;
    var G__19027 = d;
    var G__19028 = e;
    var G__19029 = f;
    var G__19030 = g;
    var G__19031 = h;
    var G__19032 = i;
    var G__19033 = j;
    var G__19034 = k;
    var G__19035 = l;
    var G__19036 = m;
    var G__19037 = n;
    var G__19038 = o;
    var G__19039 = p;
    var G__19040 = q;
    var G__19041 = r;
    var G__19042 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__19024, G__19025, G__19026, G__19027, G__19028, G__19029, G__19030, G__19031, G__19032, G__19033, G__19034, G__19035, G__19036, G__19037, G__19038, G__19039, G__19040, G__19041, G__19042) : self__.dispatch_fn.call(null, G__19024, G__19025, G__19026, G__19027, G__19028, G__19029, G__19030, G__19031, G__19032, G__19033, G__19034, G__19035, G__19036, G__19037, G__19038, G__19039, G__19040, 
    G__19041, G__19042);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__19043 = a;
  var G__19044 = b;
  var G__19045 = c;
  var G__19046 = d;
  var G__19047 = e;
  var G__19048 = f;
  var G__19049 = g;
  var G__19050 = h;
  var G__19051 = i;
  var G__19052 = j;
  var G__19053 = k;
  var G__19054 = l;
  var G__19055 = m;
  var G__19056 = n;
  var G__19057 = o;
  var G__19058 = p;
  var G__19059 = q;
  var G__19060 = r;
  var G__19061 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__19043, G__19044, G__19045, G__19046, G__19047, G__19048, G__19049, G__19050, G__19051, G__19052, G__19053, G__19054, G__19055, G__19056, G__19057, G__19058, G__19059, G__19060, G__19061) : target_fn.call(null, G__19043, G__19044, G__19045, G__19046, G__19047, G__19048, G__19049, G__19050, G__19051, G__19052, G__19053, G__19054, G__19055, G__19056, G__19057, G__19058, G__19059, G__19060, G__19061);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__19062 = a;
    var G__19063 = b;
    var G__19064 = c;
    var G__19065 = d;
    var G__19066 = e;
    var G__19067 = f;
    var G__19068 = g;
    var G__19069 = h;
    var G__19070 = i;
    var G__19071 = j;
    var G__19072 = k;
    var G__19073 = l;
    var G__19074 = m;
    var G__19075 = n;
    var G__19076 = o;
    var G__19077 = p;
    var G__19078 = q;
    var G__19079 = r;
    var G__19080 = s;
    var G__19081 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__19062, G__19063, G__19064, G__19065, G__19066, G__19067, G__19068, G__19069, G__19070, G__19071, G__19072, G__19073, G__19074, G__19075, G__19076, G__19077, G__19078, G__19079, G__19080, G__19081) : self__.dispatch_fn.call(null, G__19062, G__19063, G__19064, G__19065, G__19066, G__19067, G__19068, G__19069, G__19070, G__19071, G__19072, G__19073, G__19074, G__19075, G__19076, G__19077, 
    G__19078, G__19079, G__19080, G__19081);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__19082 = a;
  var G__19083 = b;
  var G__19084 = c;
  var G__19085 = d;
  var G__19086 = e;
  var G__19087 = f;
  var G__19088 = g;
  var G__19089 = h;
  var G__19090 = i;
  var G__19091 = j;
  var G__19092 = k;
  var G__19093 = l;
  var G__19094 = m;
  var G__19095 = n;
  var G__19096 = o;
  var G__19097 = p;
  var G__19098 = q;
  var G__19099 = r;
  var G__19100 = s;
  var G__19101 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__19082, G__19083, G__19084, G__19085, G__19086, G__19087, G__19088, G__19089, G__19090, G__19091, G__19092, G__19093, G__19094, G__19095, G__19096, G__19097, G__19098, G__19099, G__19100, G__19101) : target_fn.call(null, G__19082, G__19083, G__19084, G__19085, G__19086, G__19087, G__19088, G__19089, G__19090, G__19091, G__19092, G__19093, G__19094, G__19095, G__19096, G__19097, G__19098, G__19099, G__19100, 
  G__19101);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__19103 = self__.uuid;
  var G__19104 = other.uuid;
  return goog.array.defaultCompare(G__19103, G__19104);
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__19105 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__19105);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write(writer__4854__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__19107 = arguments.length;
  switch(G__19107) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__19113 = x;
      var G__19114 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__19113, G__19114) : pred.call(null, G__19113, G__19114);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__19115 = y;
        var G__19116 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__19115, G__19116) : pred.call(null, G__19115, G__19116);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj13777 = {};
  return obj13777;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4262__auto__ = port;
    if (and__4262__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4910__auto__ = port == null ? null : port;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj13779 = {};
  return obj13779;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4262__auto__ = port;
    if (and__4262__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4910__auto__ = port == null ? null : port;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj13781 = {};
  return obj13781;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4262__auto__ = chan;
    if (and__4262__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4910__auto__ = chan == null ? null : chan;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4262__auto__ = chan;
    if (and__4262__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4910__auto__ = chan == null ? null : chan;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj13783 = {};
  return obj13783;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4262__auto__ = h;
    if (and__4262__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4910__auto__ = h == null ? null : h;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4262__auto__ = h;
    if (and__4262__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4910__auto__ = h == null ? null : h;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj13785 = {};
  return obj13785;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4262__auto__ = b;
    if (and__4262__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4910__auto__ = b == null ? null : b;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4262__auto__ = b;
    if (and__4262__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4910__auto__ = b == null ? null : b;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4262__auto__ = b;
    if (and__4262__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4910__auto__ = b == null ? null : b;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__13787 = arguments.length;
  switch(G__13787) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj13790 = {};
  return obj13790;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__13793 = cnt + 1;
      cnt = G__13793;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5159__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5159__auto__) {
      var v_13794 = this$.pop();
      if (keep_QMARK_.call(null, v_13794)) {
        this$.unshift(v_13794);
      } else {
      }
      var G__13795 = x + 1;
      x = G__13795;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_13798 = 0;
  while (true) {
    var m_13799 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_13799 == null) {
    } else {
      m_13799.call(null);
      if (count_13798 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__13800 = count_13798 + 1;
        count_13798 = G__13800;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4262__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4262__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t13806 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t13806 = function(val, box, meta13807) {
      this.val = val;
      this.box = box;
      this.meta13807 = meta13807;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t13806.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t13806.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13808) {
      var self__ = this;
      var _13808__$1 = this;
      return self__.meta13807;
    };
    cljs.core.async.impl.channels.t13806.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13808, meta13807__$1) {
      var self__ = this;
      var _13808__$1 = this;
      return new cljs.core.async.impl.channels.t13806(self__.val, self__.box, meta13807__$1);
    };
    cljs.core.async.impl.channels.t13806.cljs$lang$type = true;
    cljs.core.async.impl.channels.t13806.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t13806";
    cljs.core.async.impl.channels.t13806.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.channels/t13806");
    };
    cljs.core.async.impl.channels.__GT_t13806 = function cljs$core$async$impl$channels$box_$___GT_t13806(val__$1, box__$1, meta13807) {
      return new cljs.core.async.impl.channels.t13806(val__$1, box__$1, meta13807);
    };
  }
  return new cljs.core.async.impl.channels.t13806(val, cljs$core$async$impl$channels$box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj13810 = {};
  return obj13810;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = self__.buf;
      if (cljs.core.truth_(and__4262__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4262__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_13811 = self__.takes.pop();
      if (taker_13811 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13811)) {
          var take_cb_13812 = cljs.core.async.impl.protocols.commit.call(null, taker_13811);
          var val_13813 = cljs.core.truth_(function() {
            var and__4262__auto__ = self__.buf;
            if (cljs.core.truth_(and__4262__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4262__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13812, val_13813, taker_13811, this$__$1) {
            return function() {
              return take_cb_13812.call(null, val_13813);
            };
          }(take_cb_13812, val_13813, taker_13811, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_13814 = self__.puts.pop();
          if (putter_13814 == null) {
          } else {
            var put_handler_13815 = putter_13814.handler;
            var val_13816 = putter_13814.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13815)) {
              var put_cb_13817 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13815);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13817, put_handler_13815, val_13816, putter_13814, _, retval, this$__$1) {
                return function() {
                  return put_cb_13817.call(null, true);
                };
              }(put_cb_13817, put_handler_13815, val_13816, putter_13814, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_13816))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4262__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4262__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4262__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4262__auto__ = self__.buf;
              if (cljs.core.truth_(and__4262__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4262__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = self__.buf;
      if (cljs.core.truth_(and__4262__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4262__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_13818 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13818)) {
            var take_cb_13819 = cljs.core.async.impl.protocols.commit.call(null, taker_13818);
            var val_13820__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13819, val_13820__$1, taker_13818, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_13819.call(null, val_13820__$1);
              };
            }(take_cb_13819, val_13820__$1, taker_13818, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_13821 = self__.puts.pop();
    if (putter_13821 == null) {
    } else {
      var put_handler_13822 = putter_13821.handler;
      var val_13823 = putter_13821.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13822)) {
        var put_cb_13824 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13822);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13824, put_handler_13822, val_13823, putter_13821, this$__$1) {
          return function() {
            return put_cb_13824.call(null, true);
          };
        }(put_cb_13824, put_handler_13822, val_13823, putter_13821, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4274__auto__ = exh;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__13826 = arguments.length;
  switch(G__13826) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__13830 = null;
        var G__13830__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e13827) {
            var t = e13827;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__13830__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e13828) {
            var t = e13828;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__13830 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__13830__1.call(this, buf__$1);
            case 2:
              return G__13830__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13830.cljs$core$IFn$_invoke$arity$1 = G__13830__1;
        G__13830.cljs$core$IFn$_invoke$arity$2 = G__13830__2;
        return G__13830;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t13735 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t13735 = function(f, fn_handler, meta13736) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta13736 = meta13736;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t13735.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t13735.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t13735.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t13735.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13737) {
      var self__ = this;
      var _13737__$1 = this;
      return self__.meta13736;
    };
    cljs.core.async.impl.ioc_helpers.t13735.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13737, meta13736__$1) {
      var self__ = this;
      var _13737__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t13735(self__.f, self__.fn_handler, meta13736__$1);
    };
    cljs.core.async.impl.ioc_helpers.t13735.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t13735.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t13735";
    cljs.core.async.impl.ioc_helpers.t13735.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.ioc-helpers/t13735");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t13735 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t13735(f__$1, fn_handler__$1, meta13736) {
      return new cljs.core.async.impl.ioc_helpers.t13735(f__$1, fn_handler__$1, meta13736);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t13735(f, cljs$core$async$impl$ioc_helpers$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e13739) {
    if (e13739 instanceof Object) {
      var ex = e13739;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e13739;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_13742_13744 = state;
    statearr_13742_13744[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_13742_13744[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_13743_13745 = state;
    statearr_13743_13745[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13743_13745[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_13748_13750 = state;
    statearr_13748_13750[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_13748_13750[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_13749_13751 = state;
    statearr_13749_13751[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13749_13751[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4869__auto__, k__4870__auto__) {
  var self__ = this;
  var this__4869__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4869__auto____$1, k__4870__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4871__auto__, k13753, else__4872__auto__) {
  var self__ = this;
  var this__4871__auto____$1 = this;
  var G__13755 = k13753 instanceof cljs.core.Keyword ? k13753.fqn : null;
  switch(G__13755) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k13753, else__4872__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4883__auto__, writer__4884__auto__, opts__4885__auto__) {
  var self__ = this;
  var this__4883__auto____$1 = this;
  var pr_pair__4886__auto__ = function(this__4883__auto____$1) {
    return function(keyval__4887__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4884__auto__, cljs.core.pr_writer, "", " ", "", opts__4885__auto__, keyval__4887__auto__);
    };
  }(this__4883__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4884__auto__, pr_pair__4886__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4885__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4867__auto__) {
  var self__ = this;
  var this__4867__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4863__auto__) {
  var self__ = this;
  var this__4863__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4873__auto__) {
  var self__ = this;
  var this__4873__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4864__auto__) {
  var self__ = this;
  var this__4864__auto____$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_imap.call(null, this__4864__auto____$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4865__auto__, other__4866__auto__) {
  var self__ = this;
  var this__4865__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = other__4866__auto__;
    if (cljs.core.truth_(and__4262__auto__)) {
      var and__4262__auto____$1 = this__4865__auto____$1.constructor === other__4866__auto__.constructor;
      if (and__4262__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4865__auto____$1, other__4866__auto__);
      } else {
        return and__4262__auto____$1;
      }
    } else {
      return and__4262__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4878__auto__, k__4879__auto__) {
  var self__ = this;
  var this__4878__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4879__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4878__auto____$1), self__.__meta), k__4879__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4879__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4876__auto__, k__4877__auto__, G__13752) {
  var self__ = this;
  var this__4876__auto____$1 = this;
  var pred__13756 = cljs.core.keyword_identical_QMARK_;
  var expr__13757 = k__4877__auto__;
  if (cljs.core.truth_(pred__13756.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__13757))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__13752, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13756.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__13757))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__13752, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13756.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__13757))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__13752, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13756.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__13757))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__13752, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13756.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__13757))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__13752, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4877__auto__, G__13752), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4881__auto__) {
  var self__ = this;
  var this__4881__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4868__auto__, G__13752) {
  var self__ = this;
  var this__4868__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__13752, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4874__auto__, entry__4875__auto__) {
  var self__ = this;
  var this__4874__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4875__auto__)) {
    return cljs.core._assoc.call(null, this__4874__auto____$1, cljs.core._nth.call(null, entry__4875__auto__, 0), cljs.core._nth.call(null, entry__4875__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4874__auto____$1, entry__4875__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4903__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4903__auto__, writer__4904__auto__) {
  return cljs.core._write.call(null, writer__4904__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__13754) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__13754), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__13754), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__13754), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__13754), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__13754), null, cljs.core.dissoc.call(null, G__13754, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_13761 = state;
  statearr_13761[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_13761;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = exception;
      if (cljs.core.truth_(and__4262__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4262__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = exception;
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4262__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }())) {
        var statearr_13767 = state;
        statearr_13767[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_13767[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_13767[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_13767[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_13767;
      } else {
        if (cljs.core.truth_(function() {
          var and__4262__auto__ = exception;
          if (cljs.core.truth_(and__4262__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4262__auto__;
          }
        }())) {
          var statearr_13768_13772 = state;
          statearr_13768_13772[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__13773 = state;
          state = G__13773;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4262__auto__ = exception;
            if (cljs.core.truth_(and__4262__auto__)) {
              var and__4262__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4262__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4262__auto____$1;
              }
            } else {
              return and__4262__auto__;
            }
          }())) {
            var statearr_13769 = state;
            statearr_13769[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_13769[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_13769;
          } else {
            if (cljs.core.truth_(function() {
              var and__4262__auto__ = cljs.core.not.call(null, exception);
              if (and__4262__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4262__auto__;
              }
            }())) {
              var statearr_13770 = state;
              statearr_13770[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_13770[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_13770;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_13771 = state;
                statearr_13771[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_13771[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_13771;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__13698 = arguments.length;
  switch(G__13698) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__13700 = level + 1;
      level = G__13700;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__13702 = arguments.length;
  switch(G__13702) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_13704 = 0;
  while (true) {
    if (i_13704 < arr.length) {
      arr[i_13704] = null;
      var G__13705 = i_13704 + 1;
      i_13704 = G__13705;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__13707 = arguments.length;
  switch(G__13707) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4124__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var x_SINGLEQUOTE_ = temp__4124__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__13709 = x_SINGLEQUOTE_;
              x__$1 = G__13709;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__13710 = x__$1;
      var G__13711 = k;
      var G__13712 = level - 1;
      var G__13713 = update;
      x = G__13710;
      k = G__13711;
      level = G__13712;
      update = G__13713;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_13714 = self__.level + 1;
      while (true) {
        if (i_13714 <= new_level + 1) {
          update[i_13714] = self__.header;
          var G__13715 = i_13714 + 1;
          i_13714 = G__13715;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_13716 = 0;
    while (true) {
      if (i_13716 <= self__.level) {
        var links_13717 = update[i_13716].forward;
        if (links_13717[i_13716] === x__$1) {
          links_13717[i_13716] = x__$1.forward[i_13716];
          var G__13718 = i_13716 + 1;
          i_13716 = G__13718;
          continue;
        } else {
          var G__13719 = i_13716 + 1;
          i_13716 = G__13719;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__13720 = x_SINGLEQUOTE_;
              x__$1 = G__13720;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__13721 = nx;
        var G__13722 = level__$1 - 1;
        x = G__13721;
        level__$1 = G__13722;
        continue;
      } else {
        var G__13723 = x;
        var G__13724 = level__$1 - 1;
        x = G__13723;
        level__$1 = G__13724;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__13725 = x_SINGLEQUOTE_;
              x__$1 = G__13725;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__13726 = nx;
        var G__13727 = level__$1 - 1;
        x = G__13726;
        level__$1 = G__13727;
        continue;
      } else {
        var G__13728 = x;
        var G__13729 = level__$1 - 1;
        x = G__13728;
        level__$1 = G__13729;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4274__auto__ = cljs.core.truth_(function() {
    var and__4262__auto__ = me;
    if (cljs.core.truth_(and__4262__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4262__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4274__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4274__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t11204 !== "undefined") {
  } else {
    cljs.core.async.t11204 = function(f, fn_handler, meta11205) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta11205 = meta11205;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t11204.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11204.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t11204.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t11204.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11206) {
      var self__ = this;
      var _11206__$1 = this;
      return self__.meta11205;
    };
    cljs.core.async.t11204.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11206, meta11205__$1) {
      var self__ = this;
      var _11206__$1 = this;
      return new cljs.core.async.t11204(self__.f, self__.fn_handler, meta11205__$1);
    };
    cljs.core.async.t11204.cljs$lang$type = true;
    cljs.core.async.t11204.cljs$lang$ctorStr = "cljs.core.async/t11204";
    cljs.core.async.t11204.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t11204");
    };
    cljs.core.async.__GT_t11204 = function cljs$core$async$fn_handler_$___GT_t11204(f__$1, fn_handler__$1, meta11205) {
      return new cljs.core.async.t11204(f__$1, fn_handler__$1, meta11205);
    };
  }
  return new cljs.core.async.t11204(f, cljs$core$async$fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__11208 = buff;
  if (G__11208) {
    var bit__4948__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = bit__4948__auto__;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return G__11208.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__11208.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__11208);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__11208);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__11210 = arguments.length;
  switch(G__11210) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__11213 = arguments.length;
  switch(G__11213) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_11215 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_11215);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_11215, ret) {
        return function() {
          return fn1.call(null, val_11215);
        };
      }(val_11215, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__11217 = arguments.length;
  switch(G__11217) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var ret = temp__4124__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var retb = temp__4124__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4124__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5159__auto___11219 = n;
  var x_11220 = 0;
  while (true) {
    if (x_11220 < n__5159__auto___11219) {
      a[x_11220] = 0;
      var G__11221 = x_11220 + 1;
      x_11220 = G__11221;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__11222 = i + 1;
      i = G__11222;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t11226 !== "undefined") {
  } else {
    cljs.core.async.t11226 = function(flag, alt_flag, meta11227) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta11227 = meta11227;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t11226.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11226.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t11226.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t11226.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_11228) {
        var self__ = this;
        var _11228__$1 = this;
        return self__.meta11227;
      };
    }(flag);
    cljs.core.async.t11226.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_11228, meta11227__$1) {
        var self__ = this;
        var _11228__$1 = this;
        return new cljs.core.async.t11226(self__.flag, self__.alt_flag, meta11227__$1);
      };
    }(flag);
    cljs.core.async.t11226.cljs$lang$type = true;
    cljs.core.async.t11226.cljs$lang$ctorStr = "cljs.core.async/t11226";
    cljs.core.async.t11226.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
        return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t11226");
      };
    }(flag);
    cljs.core.async.__GT_t11226 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t11226(flag__$1, alt_flag__$1, meta11227) {
        return new cljs.core.async.t11226(flag__$1, alt_flag__$1, meta11227);
      };
    }(flag);
  }
  return new cljs.core.async.t11226(flag, cljs$core$async$alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t11232 !== "undefined") {
  } else {
    cljs.core.async.t11232 = function(cb, flag, alt_handler, meta11233) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta11233 = meta11233;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t11232.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11232.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t11232.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t11232.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11234) {
      var self__ = this;
      var _11234__$1 = this;
      return self__.meta11233;
    };
    cljs.core.async.t11232.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11234, meta11233__$1) {
      var self__ = this;
      var _11234__$1 = this;
      return new cljs.core.async.t11232(self__.cb, self__.flag, self__.alt_handler, meta11233__$1);
    };
    cljs.core.async.t11232.cljs$lang$type = true;
    cljs.core.async.t11232.cljs$lang$ctorStr = "cljs.core.async/t11232";
    cljs.core.async.t11232.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t11232");
    };
    cljs.core.async.__GT_t11232 = function cljs$core$async$alt_handler_$___GT_t11232(cb__$1, flag__$1, alt_handler__$1, meta11233) {
      return new cljs.core.async.t11232(cb__$1, flag__$1, alt_handler__$1, meta11233);
    };
  }
  return new cljs.core.async.t11232(cb, flag, cljs$core$async$alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__11235_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11235_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__11236_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11236_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4274__auto__ = wport;
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__11237 = i + 1;
          i = G__11237;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4274__auto__ = ret;
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__4262__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4262__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4262__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__11240) {
  var map__11241 = p__11240;
  var map__11241__$1 = cljs.core.seq_QMARK_.call(null, map__11241) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11241) : map__11241;
  var opts = map__11241__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq11238) {
  var G__11239 = cljs.core.first.call(null, seq11238);
  var seq11238__$1 = cljs.core.next.call(null, seq11238);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11239, seq11238__$1);
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__11243 = arguments.length;
  switch(G__11243) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__6569__auto___11292 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11292) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___11292) {
          return function(state_11267) {
            var state_val_11268 = state_11267[1];
            if (state_val_11268 === 7) {
              var inst_11263 = state_11267[2];
              var state_11267__$1 = state_11267;
              var statearr_11269_11293 = state_11267__$1;
              statearr_11269_11293[2] = inst_11263;
              statearr_11269_11293[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11268 === 1) {
                var state_11267__$1 = state_11267;
                var statearr_11270_11294 = state_11267__$1;
                statearr_11270_11294[2] = null;
                statearr_11270_11294[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11268 === 4) {
                  var inst_11246 = state_11267[7];
                  var inst_11246__$1 = state_11267[2];
                  var inst_11247 = inst_11246__$1 == null;
                  var state_11267__$1 = function() {
                    var statearr_11271 = state_11267;
                    statearr_11271[7] = inst_11246__$1;
                    return statearr_11271;
                  }();
                  if (cljs.core.truth_(inst_11247)) {
                    var statearr_11272_11295 = state_11267__$1;
                    statearr_11272_11295[1] = 5;
                  } else {
                    var statearr_11273_11296 = state_11267__$1;
                    statearr_11273_11296[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11268 === 13) {
                    var state_11267__$1 = state_11267;
                    var statearr_11274_11297 = state_11267__$1;
                    statearr_11274_11297[2] = null;
                    statearr_11274_11297[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11268 === 6) {
                      var inst_11246 = state_11267[7];
                      var state_11267__$1 = state_11267;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11267__$1, 11, to, inst_11246);
                    } else {
                      if (state_val_11268 === 3) {
                        var inst_11265 = state_11267[2];
                        var state_11267__$1 = state_11267;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11267__$1, inst_11265);
                      } else {
                        if (state_val_11268 === 12) {
                          var state_11267__$1 = state_11267;
                          var statearr_11275_11298 = state_11267__$1;
                          statearr_11275_11298[2] = null;
                          statearr_11275_11298[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11268 === 2) {
                            var state_11267__$1 = state_11267;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11267__$1, 4, from);
                          } else {
                            if (state_val_11268 === 11) {
                              var inst_11256 = state_11267[2];
                              var state_11267__$1 = state_11267;
                              if (cljs.core.truth_(inst_11256)) {
                                var statearr_11276_11299 = state_11267__$1;
                                statearr_11276_11299[1] = 12;
                              } else {
                                var statearr_11277_11300 = state_11267__$1;
                                statearr_11277_11300[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11268 === 9) {
                                var state_11267__$1 = state_11267;
                                var statearr_11278_11301 = state_11267__$1;
                                statearr_11278_11301[2] = null;
                                statearr_11278_11301[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11268 === 5) {
                                  var state_11267__$1 = state_11267;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_11279_11302 = state_11267__$1;
                                    statearr_11279_11302[1] = 8;
                                  } else {
                                    var statearr_11280_11303 = state_11267__$1;
                                    statearr_11280_11303[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11268 === 14) {
                                    var inst_11261 = state_11267[2];
                                    var state_11267__$1 = state_11267;
                                    var statearr_11281_11304 = state_11267__$1;
                                    statearr_11281_11304[2] = inst_11261;
                                    statearr_11281_11304[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11268 === 10) {
                                      var inst_11253 = state_11267[2];
                                      var state_11267__$1 = state_11267;
                                      var statearr_11282_11305 = state_11267__$1;
                                      statearr_11282_11305[2] = inst_11253;
                                      statearr_11282_11305[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11268 === 8) {
                                        var inst_11250 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_11267__$1 = state_11267;
                                        var statearr_11283_11306 = state_11267__$1;
                                        statearr_11283_11306[2] = inst_11250;
                                        statearr_11283_11306[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___11292);
        return function(switch__6548__auto__, c__6569__auto___11292) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_11287 = [null, null, null, null, null, null, null, null];
              statearr_11287[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_11287[1] = 1;
              return statearr_11287;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_11267) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_11267);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e11288) {
                    if (e11288 instanceof Object) {
                      var ex__6552__auto__ = e11288;
                      var statearr_11289_11307 = state_11267;
                      statearr_11289_11307[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11267);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11288;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11308 = state_11267;
                  state_11267 = G__11308;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_11267) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_11267);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___11292);
      }();
      var state__6571__auto__ = function() {
        var statearr_11290 = f__6570__auto__.call(null);
        statearr_11290[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11292;
        return statearr_11290;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___11292));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__11492) {
      var vec__11493 = p__11492;
      var v = cljs.core.nth.call(null, vec__11493, 0, null);
      var p = cljs.core.nth.call(null, vec__11493, 1, null);
      var job = vec__11493;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__6569__auto___11675 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11675, res, vec__11493, v, p, job, jobs, results) {
          return function() {
            var f__6570__auto__ = function() {
              var switch__6548__auto__ = function(c__6569__auto___11675, res, vec__11493, v, p, job, jobs, results) {
                return function(state_11498) {
                  var state_val_11499 = state_11498[1];
                  if (state_val_11499 === 2) {
                    var inst_11495 = state_11498[2];
                    var inst_11496 = cljs.core.async.close_BANG_.call(null, res);
                    var state_11498__$1 = function() {
                      var statearr_11500 = state_11498;
                      statearr_11500[7] = inst_11495;
                      return statearr_11500;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11498__$1, inst_11496);
                  } else {
                    if (state_val_11499 === 1) {
                      var state_11498__$1 = state_11498;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11498__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__6569__auto___11675, res, vec__11493, v, p, job, jobs, results);
              return function(switch__6548__auto__, c__6569__auto___11675, res, vec__11493, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0 = function() {
                    var statearr_11504 = [null, null, null, null, null, null, null, null];
                    statearr_11504[0] = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
                    statearr_11504[1] = 1;
                    return statearr_11504;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1 = function(state_11498) {
                    while (true) {
                      var ret_value__6550__auto__ = function() {
                        try {
                          while (true) {
                            var result__6551__auto__ = switch__6548__auto__.call(null, state_11498);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__6551__auto__;
                            }
                            break;
                          }
                        } catch (e11505) {
                          if (e11505 instanceof Object) {
                            var ex__6552__auto__ = e11505;
                            var statearr_11506_11676 = state_11498;
                            statearr_11506_11676[5] = ex__6552__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11498);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e11505;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__11677 = state_11498;
                        state_11498 = G__11677;
                        continue;
                      } else {
                        return ret_value__6550__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = function(state_11498) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1.call(this, state_11498);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
                }();
              }(switch__6548__auto__, c__6569__auto___11675, res, vec__11493, v, p, job, jobs, results);
            }();
            var state__6571__auto__ = function() {
              var statearr_11507 = f__6570__auto__.call(null);
              statearr_11507[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11675;
              return statearr_11507;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
          };
        }(c__6569__auto___11675, res, vec__11493, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__11508) {
      var vec__11509 = p__11508;
      var v = cljs.core.nth.call(null, vec__11509, 0, null);
      var p = cljs.core.nth.call(null, vec__11509, 1, null);
      var job = vec__11509;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5159__auto___11678 = n;
  var __11679 = 0;
  while (true) {
    if (__11679 < n__5159__auto___11678) {
      var G__11510_11680 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__11510_11680) {
        case "async":
          var c__6569__auto___11682 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11679, c__6569__auto___11682, G__11510_11680, n__5159__auto___11678, jobs, results, process, async) {
            return function() {
              var f__6570__auto__ = function() {
                var switch__6548__auto__ = function(__11679, c__6569__auto___11682, G__11510_11680, n__5159__auto___11678, jobs, results, process, async) {
                  return function(state_11523) {
                    var state_val_11524 = state_11523[1];
                    if (state_val_11524 === 7) {
                      var inst_11519 = state_11523[2];
                      var state_11523__$1 = state_11523;
                      var statearr_11525_11683 = state_11523__$1;
                      statearr_11525_11683[2] = inst_11519;
                      statearr_11525_11683[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11524 === 6) {
                        var state_11523__$1 = state_11523;
                        var statearr_11526_11684 = state_11523__$1;
                        statearr_11526_11684[2] = null;
                        statearr_11526_11684[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11524 === 5) {
                          var state_11523__$1 = state_11523;
                          var statearr_11527_11685 = state_11523__$1;
                          statearr_11527_11685[2] = null;
                          statearr_11527_11685[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11524 === 4) {
                            var inst_11513 = state_11523[2];
                            var inst_11514 = async.call(null, inst_11513);
                            var state_11523__$1 = state_11523;
                            if (cljs.core.truth_(inst_11514)) {
                              var statearr_11528_11686 = state_11523__$1;
                              statearr_11528_11686[1] = 5;
                            } else {
                              var statearr_11529_11687 = state_11523__$1;
                              statearr_11529_11687[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11524 === 3) {
                              var inst_11521 = state_11523[2];
                              var state_11523__$1 = state_11523;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11523__$1, inst_11521);
                            } else {
                              if (state_val_11524 === 2) {
                                var state_11523__$1 = state_11523;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11523__$1, 4, jobs);
                              } else {
                                if (state_val_11524 === 1) {
                                  var state_11523__$1 = state_11523;
                                  var statearr_11530_11688 = state_11523__$1;
                                  statearr_11530_11688[2] = null;
                                  statearr_11530_11688[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11679, c__6569__auto___11682, G__11510_11680, n__5159__auto___11678, jobs, results, process, async);
                return function(__11679, switch__6548__auto__, c__6569__auto___11682, G__11510_11680, n__5159__auto___11678, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0 = function() {
                      var statearr_11534 = [null, null, null, null, null, null, null];
                      statearr_11534[0] = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
                      statearr_11534[1] = 1;
                      return statearr_11534;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1 = function(state_11523) {
                      while (true) {
                        var ret_value__6550__auto__ = function() {
                          try {
                            while (true) {
                              var result__6551__auto__ = switch__6548__auto__.call(null, state_11523);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6551__auto__;
                              }
                              break;
                            }
                          } catch (e11535) {
                            if (e11535 instanceof Object) {
                              var ex__6552__auto__ = e11535;
                              var statearr_11536_11689 = state_11523;
                              statearr_11536_11689[5] = ex__6552__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11523);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11535;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11690 = state_11523;
                          state_11523 = G__11690;
                          continue;
                        } else {
                          return ret_value__6550__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = function(state_11523) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1.call(this, state_11523);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
                  }();
                }(__11679, switch__6548__auto__, c__6569__auto___11682, G__11510_11680, n__5159__auto___11678, jobs, results, process, async);
              }();
              var state__6571__auto__ = function() {
                var statearr_11537 = f__6570__auto__.call(null);
                statearr_11537[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11682;
                return statearr_11537;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
            };
          }(__11679, c__6569__auto___11682, G__11510_11680, n__5159__auto___11678, jobs, results, process, async));
          break;
        case "compute":
          var c__6569__auto___11691 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11679, c__6569__auto___11691, G__11510_11680, n__5159__auto___11678, jobs, results, process, async) {
            return function() {
              var f__6570__auto__ = function() {
                var switch__6548__auto__ = function(__11679, c__6569__auto___11691, G__11510_11680, n__5159__auto___11678, jobs, results, process, async) {
                  return function(state_11550) {
                    var state_val_11551 = state_11550[1];
                    if (state_val_11551 === 7) {
                      var inst_11546 = state_11550[2];
                      var state_11550__$1 = state_11550;
                      var statearr_11552_11692 = state_11550__$1;
                      statearr_11552_11692[2] = inst_11546;
                      statearr_11552_11692[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11551 === 6) {
                        var state_11550__$1 = state_11550;
                        var statearr_11553_11693 = state_11550__$1;
                        statearr_11553_11693[2] = null;
                        statearr_11553_11693[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11551 === 5) {
                          var state_11550__$1 = state_11550;
                          var statearr_11554_11694 = state_11550__$1;
                          statearr_11554_11694[2] = null;
                          statearr_11554_11694[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11551 === 4) {
                            var inst_11540 = state_11550[2];
                            var inst_11541 = process.call(null, inst_11540);
                            var state_11550__$1 = state_11550;
                            if (cljs.core.truth_(inst_11541)) {
                              var statearr_11555_11695 = state_11550__$1;
                              statearr_11555_11695[1] = 5;
                            } else {
                              var statearr_11556_11696 = state_11550__$1;
                              statearr_11556_11696[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11551 === 3) {
                              var inst_11548 = state_11550[2];
                              var state_11550__$1 = state_11550;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11550__$1, inst_11548);
                            } else {
                              if (state_val_11551 === 2) {
                                var state_11550__$1 = state_11550;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11550__$1, 4, jobs);
                              } else {
                                if (state_val_11551 === 1) {
                                  var state_11550__$1 = state_11550;
                                  var statearr_11557_11697 = state_11550__$1;
                                  statearr_11557_11697[2] = null;
                                  statearr_11557_11697[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11679, c__6569__auto___11691, G__11510_11680, n__5159__auto___11678, jobs, results, process, async);
                return function(__11679, switch__6548__auto__, c__6569__auto___11691, G__11510_11680, n__5159__auto___11678, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0 = function() {
                      var statearr_11561 = [null, null, null, null, null, null, null];
                      statearr_11561[0] = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
                      statearr_11561[1] = 1;
                      return statearr_11561;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1 = function(state_11550) {
                      while (true) {
                        var ret_value__6550__auto__ = function() {
                          try {
                            while (true) {
                              var result__6551__auto__ = switch__6548__auto__.call(null, state_11550);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6551__auto__;
                              }
                              break;
                            }
                          } catch (e11562) {
                            if (e11562 instanceof Object) {
                              var ex__6552__auto__ = e11562;
                              var statearr_11563_11698 = state_11550;
                              statearr_11563_11698[5] = ex__6552__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11550);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11562;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11699 = state_11550;
                          state_11550 = G__11699;
                          continue;
                        } else {
                          return ret_value__6550__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = function(state_11550) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1.call(this, state_11550);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
                  }();
                }(__11679, switch__6548__auto__, c__6569__auto___11691, G__11510_11680, n__5159__auto___11678, jobs, results, process, async);
              }();
              var state__6571__auto__ = function() {
                var statearr_11564 = f__6570__auto__.call(null);
                statearr_11564[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11691;
                return statearr_11564;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
            };
          }(__11679, c__6569__auto___11691, G__11510_11680, n__5159__auto___11678, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__11700 = __11679 + 1;
      __11679 = G__11700;
      continue;
    } else {
    }
    break;
  }
  var c__6569__auto___11701 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11701, jobs, results, process, async) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___11701, jobs, results, process, async) {
          return function(state_11586) {
            var state_val_11587 = state_11586[1];
            if (state_val_11587 === 9) {
              var inst_11579 = state_11586[2];
              var state_11586__$1 = function() {
                var statearr_11588 = state_11586;
                statearr_11588[7] = inst_11579;
                return statearr_11588;
              }();
              var statearr_11589_11702 = state_11586__$1;
              statearr_11589_11702[2] = null;
              statearr_11589_11702[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11587 === 8) {
                var inst_11572 = state_11586[8];
                var inst_11577 = state_11586[2];
                var state_11586__$1 = function() {
                  var statearr_11590 = state_11586;
                  statearr_11590[9] = inst_11577;
                  return statearr_11590;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11586__$1, 9, results, inst_11572);
              } else {
                if (state_val_11587 === 7) {
                  var inst_11582 = state_11586[2];
                  var state_11586__$1 = state_11586;
                  var statearr_11591_11703 = state_11586__$1;
                  statearr_11591_11703[2] = inst_11582;
                  statearr_11591_11703[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11587 === 6) {
                    var inst_11572 = state_11586[8];
                    var inst_11567 = state_11586[10];
                    var inst_11572__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_11573 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_11574 = [inst_11567, inst_11572__$1];
                    var inst_11575 = new cljs.core.PersistentVector(null, 2, 5, inst_11573, inst_11574, null);
                    var state_11586__$1 = function() {
                      var statearr_11592 = state_11586;
                      statearr_11592[8] = inst_11572__$1;
                      return statearr_11592;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11586__$1, 8, jobs, inst_11575);
                  } else {
                    if (state_val_11587 === 5) {
                      var inst_11570 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_11586__$1 = state_11586;
                      var statearr_11593_11704 = state_11586__$1;
                      statearr_11593_11704[2] = inst_11570;
                      statearr_11593_11704[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11587 === 4) {
                        var inst_11567 = state_11586[10];
                        var inst_11567__$1 = state_11586[2];
                        var inst_11568 = inst_11567__$1 == null;
                        var state_11586__$1 = function() {
                          var statearr_11594 = state_11586;
                          statearr_11594[10] = inst_11567__$1;
                          return statearr_11594;
                        }();
                        if (cljs.core.truth_(inst_11568)) {
                          var statearr_11595_11705 = state_11586__$1;
                          statearr_11595_11705[1] = 5;
                        } else {
                          var statearr_11596_11706 = state_11586__$1;
                          statearr_11596_11706[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11587 === 3) {
                          var inst_11584 = state_11586[2];
                          var state_11586__$1 = state_11586;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11586__$1, inst_11584);
                        } else {
                          if (state_val_11587 === 2) {
                            var state_11586__$1 = state_11586;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11586__$1, 4, from);
                          } else {
                            if (state_val_11587 === 1) {
                              var state_11586__$1 = state_11586;
                              var statearr_11597_11707 = state_11586__$1;
                              statearr_11597_11707[2] = null;
                              statearr_11597_11707[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___11701, jobs, results, process, async);
        return function(switch__6548__auto__, c__6569__auto___11701, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0 = function() {
              var statearr_11601 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11601[0] = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
              statearr_11601[1] = 1;
              return statearr_11601;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1 = function(state_11586) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_11586);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e11602) {
                    if (e11602 instanceof Object) {
                      var ex__6552__auto__ = e11602;
                      var statearr_11603_11708 = state_11586;
                      statearr_11603_11708[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11586);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11602;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11709 = state_11586;
                  state_11586 = G__11709;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = function(state_11586) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1.call(this, state_11586);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___11701, jobs, results, process, async);
      }();
      var state__6571__auto__ = function() {
        var statearr_11604 = f__6570__auto__.call(null);
        statearr_11604[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11701;
        return statearr_11604;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___11701, jobs, results, process, async));
  var c__6569__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto__, jobs, results, process, async) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto__, jobs, results, process, async) {
          return function(state_11642) {
            var state_val_11643 = state_11642[1];
            if (state_val_11643 === 7) {
              var inst_11638 = state_11642[2];
              var state_11642__$1 = state_11642;
              var statearr_11644_11710 = state_11642__$1;
              statearr_11644_11710[2] = inst_11638;
              statearr_11644_11710[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11643 === 20) {
                var state_11642__$1 = state_11642;
                var statearr_11645_11711 = state_11642__$1;
                statearr_11645_11711[2] = null;
                statearr_11645_11711[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11643 === 1) {
                  var state_11642__$1 = state_11642;
                  var statearr_11646_11712 = state_11642__$1;
                  statearr_11646_11712[2] = null;
                  statearr_11646_11712[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11643 === 4) {
                    var inst_11607 = state_11642[7];
                    var inst_11607__$1 = state_11642[2];
                    var inst_11608 = inst_11607__$1 == null;
                    var state_11642__$1 = function() {
                      var statearr_11647 = state_11642;
                      statearr_11647[7] = inst_11607__$1;
                      return statearr_11647;
                    }();
                    if (cljs.core.truth_(inst_11608)) {
                      var statearr_11648_11713 = state_11642__$1;
                      statearr_11648_11713[1] = 5;
                    } else {
                      var statearr_11649_11714 = state_11642__$1;
                      statearr_11649_11714[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11643 === 15) {
                      var inst_11620 = state_11642[8];
                      var state_11642__$1 = state_11642;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11642__$1, 18, to, inst_11620);
                    } else {
                      if (state_val_11643 === 21) {
                        var inst_11633 = state_11642[2];
                        var state_11642__$1 = state_11642;
                        var statearr_11650_11715 = state_11642__$1;
                        statearr_11650_11715[2] = inst_11633;
                        statearr_11650_11715[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11643 === 13) {
                          var inst_11635 = state_11642[2];
                          var state_11642__$1 = function() {
                            var statearr_11651 = state_11642;
                            statearr_11651[9] = inst_11635;
                            return statearr_11651;
                          }();
                          var statearr_11652_11716 = state_11642__$1;
                          statearr_11652_11716[2] = null;
                          statearr_11652_11716[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11643 === 6) {
                            var inst_11607 = state_11642[7];
                            var state_11642__$1 = state_11642;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11642__$1, 11, inst_11607);
                          } else {
                            if (state_val_11643 === 17) {
                              var inst_11628 = state_11642[2];
                              var state_11642__$1 = state_11642;
                              if (cljs.core.truth_(inst_11628)) {
                                var statearr_11653_11717 = state_11642__$1;
                                statearr_11653_11717[1] = 19;
                              } else {
                                var statearr_11654_11718 = state_11642__$1;
                                statearr_11654_11718[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11643 === 3) {
                                var inst_11640 = state_11642[2];
                                var state_11642__$1 = state_11642;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11642__$1, inst_11640);
                              } else {
                                if (state_val_11643 === 12) {
                                  var inst_11617 = state_11642[10];
                                  var state_11642__$1 = state_11642;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11642__$1, 14, inst_11617);
                                } else {
                                  if (state_val_11643 === 2) {
                                    var state_11642__$1 = state_11642;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11642__$1, 4, results);
                                  } else {
                                    if (state_val_11643 === 19) {
                                      var state_11642__$1 = state_11642;
                                      var statearr_11655_11719 = state_11642__$1;
                                      statearr_11655_11719[2] = null;
                                      statearr_11655_11719[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11643 === 11) {
                                        var inst_11617 = state_11642[2];
                                        var state_11642__$1 = function() {
                                          var statearr_11656 = state_11642;
                                          statearr_11656[10] = inst_11617;
                                          return statearr_11656;
                                        }();
                                        var statearr_11657_11720 = state_11642__$1;
                                        statearr_11657_11720[2] = null;
                                        statearr_11657_11720[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11643 === 9) {
                                          var state_11642__$1 = state_11642;
                                          var statearr_11658_11721 = state_11642__$1;
                                          statearr_11658_11721[2] = null;
                                          statearr_11658_11721[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11643 === 5) {
                                            var state_11642__$1 = state_11642;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_11659_11722 = state_11642__$1;
                                              statearr_11659_11722[1] = 8;
                                            } else {
                                              var statearr_11660_11723 = state_11642__$1;
                                              statearr_11660_11723[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11643 === 14) {
                                              var inst_11620 = state_11642[8];
                                              var inst_11622 = state_11642[11];
                                              var inst_11620__$1 = state_11642[2];
                                              var inst_11621 = inst_11620__$1 == null;
                                              var inst_11622__$1 = cljs.core.not.call(null, inst_11621);
                                              var state_11642__$1 = function() {
                                                var statearr_11661 = state_11642;
                                                statearr_11661[8] = inst_11620__$1;
                                                statearr_11661[11] = inst_11622__$1;
                                                return statearr_11661;
                                              }();
                                              if (inst_11622__$1) {
                                                var statearr_11662_11724 = state_11642__$1;
                                                statearr_11662_11724[1] = 15;
                                              } else {
                                                var statearr_11663_11725 = state_11642__$1;
                                                statearr_11663_11725[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11643 === 16) {
                                                var inst_11622 = state_11642[11];
                                                var state_11642__$1 = state_11642;
                                                var statearr_11664_11726 = state_11642__$1;
                                                statearr_11664_11726[2] = inst_11622;
                                                statearr_11664_11726[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11643 === 10) {
                                                  var inst_11614 = state_11642[2];
                                                  var state_11642__$1 = state_11642;
                                                  var statearr_11665_11727 = state_11642__$1;
                                                  statearr_11665_11727[2] = inst_11614;
                                                  statearr_11665_11727[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11643 === 18) {
                                                    var inst_11625 = state_11642[2];
                                                    var state_11642__$1 = state_11642;
                                                    var statearr_11666_11728 = state_11642__$1;
                                                    statearr_11666_11728[2] = inst_11625;
                                                    statearr_11666_11728[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11643 === 8) {
                                                      var inst_11611 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_11642__$1 = state_11642;
                                                      var statearr_11667_11729 = state_11642__$1;
                                                      statearr_11667_11729[2] = inst_11611;
                                                      statearr_11667_11729[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto__, jobs, results, process, async);
        return function(switch__6548__auto__, c__6569__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0 = function() {
              var statearr_11671 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11671[0] = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
              statearr_11671[1] = 1;
              return statearr_11671;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1 = function(state_11642) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_11642);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e11672) {
                    if (e11672 instanceof Object) {
                      var ex__6552__auto__ = e11672;
                      var statearr_11673_11730 = state_11642;
                      statearr_11673_11730[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11642);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11672;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11731 = state_11642;
                  state_11642 = G__11731;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__ = function(state_11642) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1.call(this, state_11642);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__6549__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto__, jobs, results, process, async);
      }();
      var state__6571__auto__ = function() {
        var statearr_11674 = f__6570__auto__.call(null);
        statearr_11674[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto__;
        return statearr_11674;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto__, jobs, results, process, async));
  return c__6569__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__11733 = arguments.length;
  switch(G__11733) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__11736 = arguments.length;
  switch(G__11736) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__11739 = arguments.length;
  switch(G__11739) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__6569__auto___11791 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11791, tc, fc) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___11791, tc, fc) {
          return function(state_11765) {
            var state_val_11766 = state_11765[1];
            if (state_val_11766 === 7) {
              var inst_11761 = state_11765[2];
              var state_11765__$1 = state_11765;
              var statearr_11767_11792 = state_11765__$1;
              statearr_11767_11792[2] = inst_11761;
              statearr_11767_11792[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11766 === 1) {
                var state_11765__$1 = state_11765;
                var statearr_11768_11793 = state_11765__$1;
                statearr_11768_11793[2] = null;
                statearr_11768_11793[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11766 === 4) {
                  var inst_11742 = state_11765[7];
                  var inst_11742__$1 = state_11765[2];
                  var inst_11743 = inst_11742__$1 == null;
                  var state_11765__$1 = function() {
                    var statearr_11769 = state_11765;
                    statearr_11769[7] = inst_11742__$1;
                    return statearr_11769;
                  }();
                  if (cljs.core.truth_(inst_11743)) {
                    var statearr_11770_11794 = state_11765__$1;
                    statearr_11770_11794[1] = 5;
                  } else {
                    var statearr_11771_11795 = state_11765__$1;
                    statearr_11771_11795[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11766 === 13) {
                    var state_11765__$1 = state_11765;
                    var statearr_11772_11796 = state_11765__$1;
                    statearr_11772_11796[2] = null;
                    statearr_11772_11796[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11766 === 6) {
                      var inst_11742 = state_11765[7];
                      var inst_11748 = p.call(null, inst_11742);
                      var state_11765__$1 = state_11765;
                      if (cljs.core.truth_(inst_11748)) {
                        var statearr_11773_11797 = state_11765__$1;
                        statearr_11773_11797[1] = 9;
                      } else {
                        var statearr_11774_11798 = state_11765__$1;
                        statearr_11774_11798[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11766 === 3) {
                        var inst_11763 = state_11765[2];
                        var state_11765__$1 = state_11765;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11765__$1, inst_11763);
                      } else {
                        if (state_val_11766 === 12) {
                          var state_11765__$1 = state_11765;
                          var statearr_11775_11799 = state_11765__$1;
                          statearr_11775_11799[2] = null;
                          statearr_11775_11799[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11766 === 2) {
                            var state_11765__$1 = state_11765;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11765__$1, 4, ch);
                          } else {
                            if (state_val_11766 === 11) {
                              var inst_11742 = state_11765[7];
                              var inst_11752 = state_11765[2];
                              var state_11765__$1 = state_11765;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11765__$1, 8, inst_11752, inst_11742);
                            } else {
                              if (state_val_11766 === 9) {
                                var state_11765__$1 = state_11765;
                                var statearr_11776_11800 = state_11765__$1;
                                statearr_11776_11800[2] = tc;
                                statearr_11776_11800[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11766 === 5) {
                                  var inst_11745 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_11746 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_11765__$1 = function() {
                                    var statearr_11777 = state_11765;
                                    statearr_11777[8] = inst_11745;
                                    return statearr_11777;
                                  }();
                                  var statearr_11778_11801 = state_11765__$1;
                                  statearr_11778_11801[2] = inst_11746;
                                  statearr_11778_11801[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11766 === 14) {
                                    var inst_11759 = state_11765[2];
                                    var state_11765__$1 = state_11765;
                                    var statearr_11779_11802 = state_11765__$1;
                                    statearr_11779_11802[2] = inst_11759;
                                    statearr_11779_11802[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11766 === 10) {
                                      var state_11765__$1 = state_11765;
                                      var statearr_11780_11803 = state_11765__$1;
                                      statearr_11780_11803[2] = fc;
                                      statearr_11780_11803[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11766 === 8) {
                                        var inst_11754 = state_11765[2];
                                        var state_11765__$1 = state_11765;
                                        if (cljs.core.truth_(inst_11754)) {
                                          var statearr_11781_11804 = state_11765__$1;
                                          statearr_11781_11804[1] = 12;
                                        } else {
                                          var statearr_11782_11805 = state_11765__$1;
                                          statearr_11782_11805[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___11791, tc, fc);
        return function(switch__6548__auto__, c__6569__auto___11791, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_11786 = [null, null, null, null, null, null, null, null, null];
              statearr_11786[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_11786[1] = 1;
              return statearr_11786;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_11765) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_11765);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e11787) {
                    if (e11787 instanceof Object) {
                      var ex__6552__auto__ = e11787;
                      var statearr_11788_11806 = state_11765;
                      statearr_11788_11806[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11765);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11787;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11807 = state_11765;
                  state_11765 = G__11807;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_11765) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_11765);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___11791, tc, fc);
      }();
      var state__6571__auto__ = function() {
        var statearr_11789 = f__6570__auto__.call(null);
        statearr_11789[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11791;
        return statearr_11789;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___11791, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__6569__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto__) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto__) {
          return function(state_11854) {
            var state_val_11855 = state_11854[1];
            if (state_val_11855 === 7) {
              var inst_11850 = state_11854[2];
              var state_11854__$1 = state_11854;
              var statearr_11856_11872 = state_11854__$1;
              statearr_11856_11872[2] = inst_11850;
              statearr_11856_11872[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11855 === 6) {
                var inst_11843 = state_11854[7];
                var inst_11840 = state_11854[8];
                var inst_11847 = f.call(null, inst_11840, inst_11843);
                var inst_11840__$1 = inst_11847;
                var state_11854__$1 = function() {
                  var statearr_11857 = state_11854;
                  statearr_11857[8] = inst_11840__$1;
                  return statearr_11857;
                }();
                var statearr_11858_11873 = state_11854__$1;
                statearr_11858_11873[2] = null;
                statearr_11858_11873[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11855 === 5) {
                  var inst_11840 = state_11854[8];
                  var state_11854__$1 = state_11854;
                  var statearr_11859_11874 = state_11854__$1;
                  statearr_11859_11874[2] = inst_11840;
                  statearr_11859_11874[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11855 === 4) {
                    var inst_11843 = state_11854[7];
                    var inst_11843__$1 = state_11854[2];
                    var inst_11844 = inst_11843__$1 == null;
                    var state_11854__$1 = function() {
                      var statearr_11860 = state_11854;
                      statearr_11860[7] = inst_11843__$1;
                      return statearr_11860;
                    }();
                    if (cljs.core.truth_(inst_11844)) {
                      var statearr_11861_11875 = state_11854__$1;
                      statearr_11861_11875[1] = 5;
                    } else {
                      var statearr_11862_11876 = state_11854__$1;
                      statearr_11862_11876[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11855 === 3) {
                      var inst_11852 = state_11854[2];
                      var state_11854__$1 = state_11854;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11854__$1, inst_11852);
                    } else {
                      if (state_val_11855 === 2) {
                        var state_11854__$1 = state_11854;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11854__$1, 4, ch);
                      } else {
                        if (state_val_11855 === 1) {
                          var inst_11840 = init;
                          var state_11854__$1 = function() {
                            var statearr_11863 = state_11854;
                            statearr_11863[8] = inst_11840;
                            return statearr_11863;
                          }();
                          var statearr_11864_11877 = state_11854__$1;
                          statearr_11864_11877[2] = null;
                          statearr_11864_11877[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto__);
        return function(switch__6548__auto__, c__6569__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__6549__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__6549__auto____0 = function() {
              var statearr_11868 = [null, null, null, null, null, null, null, null, null];
              statearr_11868[0] = cljs$core$async$reduce_$_state_machine__6549__auto__;
              statearr_11868[1] = 1;
              return statearr_11868;
            };
            var cljs$core$async$reduce_$_state_machine__6549__auto____1 = function(state_11854) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_11854);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e11869) {
                    if (e11869 instanceof Object) {
                      var ex__6552__auto__ = e11869;
                      var statearr_11870_11878 = state_11854;
                      statearr_11870_11878[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11854);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11869;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11879 = state_11854;
                  state_11854 = G__11879;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__6549__auto__ = function(state_11854) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__6549__auto____1.call(this, state_11854);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__6549__auto____0;
            cljs$core$async$reduce_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__6549__auto____1;
            return cljs$core$async$reduce_$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto__);
      }();
      var state__6571__auto__ = function() {
        var statearr_11871 = f__6570__auto__.call(null);
        statearr_11871[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto__;
        return statearr_11871;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto__));
  return c__6569__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__11881 = arguments.length;
  switch(G__11881) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__6569__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto__) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto__) {
          return function(state_11906) {
            var state_val_11907 = state_11906[1];
            if (state_val_11907 === 7) {
              var inst_11888 = state_11906[2];
              var state_11906__$1 = state_11906;
              var statearr_11908_11932 = state_11906__$1;
              statearr_11908_11932[2] = inst_11888;
              statearr_11908_11932[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11907 === 1) {
                var inst_11882 = cljs.core.seq.call(null, coll);
                var inst_11883 = inst_11882;
                var state_11906__$1 = function() {
                  var statearr_11909 = state_11906;
                  statearr_11909[7] = inst_11883;
                  return statearr_11909;
                }();
                var statearr_11910_11933 = state_11906__$1;
                statearr_11910_11933[2] = null;
                statearr_11910_11933[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11907 === 4) {
                  var inst_11883 = state_11906[7];
                  var inst_11886 = cljs.core.first.call(null, inst_11883);
                  var state_11906__$1 = state_11906;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11906__$1, 7, ch, inst_11886);
                } else {
                  if (state_val_11907 === 13) {
                    var inst_11900 = state_11906[2];
                    var state_11906__$1 = state_11906;
                    var statearr_11911_11934 = state_11906__$1;
                    statearr_11911_11934[2] = inst_11900;
                    statearr_11911_11934[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11907 === 6) {
                      var inst_11891 = state_11906[2];
                      var state_11906__$1 = state_11906;
                      if (cljs.core.truth_(inst_11891)) {
                        var statearr_11912_11935 = state_11906__$1;
                        statearr_11912_11935[1] = 8;
                      } else {
                        var statearr_11913_11936 = state_11906__$1;
                        statearr_11913_11936[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11907 === 3) {
                        var inst_11904 = state_11906[2];
                        var state_11906__$1 = state_11906;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11906__$1, inst_11904);
                      } else {
                        if (state_val_11907 === 12) {
                          var state_11906__$1 = state_11906;
                          var statearr_11914_11937 = state_11906__$1;
                          statearr_11914_11937[2] = null;
                          statearr_11914_11937[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11907 === 2) {
                            var inst_11883 = state_11906[7];
                            var state_11906__$1 = state_11906;
                            if (cljs.core.truth_(inst_11883)) {
                              var statearr_11915_11938 = state_11906__$1;
                              statearr_11915_11938[1] = 4;
                            } else {
                              var statearr_11916_11939 = state_11906__$1;
                              statearr_11916_11939[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11907 === 11) {
                              var inst_11897 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_11906__$1 = state_11906;
                              var statearr_11917_11940 = state_11906__$1;
                              statearr_11917_11940[2] = inst_11897;
                              statearr_11917_11940[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11907 === 9) {
                                var state_11906__$1 = state_11906;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_11918_11941 = state_11906__$1;
                                  statearr_11918_11941[1] = 11;
                                } else {
                                  var statearr_11919_11942 = state_11906__$1;
                                  statearr_11919_11942[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11907 === 5) {
                                  var inst_11883 = state_11906[7];
                                  var state_11906__$1 = state_11906;
                                  var statearr_11920_11943 = state_11906__$1;
                                  statearr_11920_11943[2] = inst_11883;
                                  statearr_11920_11943[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11907 === 10) {
                                    var inst_11902 = state_11906[2];
                                    var state_11906__$1 = state_11906;
                                    var statearr_11921_11944 = state_11906__$1;
                                    statearr_11921_11944[2] = inst_11902;
                                    statearr_11921_11944[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11907 === 8) {
                                      var inst_11883 = state_11906[7];
                                      var inst_11893 = cljs.core.next.call(null, inst_11883);
                                      var inst_11883__$1 = inst_11893;
                                      var state_11906__$1 = function() {
                                        var statearr_11922 = state_11906;
                                        statearr_11922[7] = inst_11883__$1;
                                        return statearr_11922;
                                      }();
                                      var statearr_11923_11945 = state_11906__$1;
                                      statearr_11923_11945[2] = null;
                                      statearr_11923_11945[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto__);
        return function(switch__6548__auto__, c__6569__auto__) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_11927 = [null, null, null, null, null, null, null, null];
              statearr_11927[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_11927[1] = 1;
              return statearr_11927;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_11906) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_11906);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e11928) {
                    if (e11928 instanceof Object) {
                      var ex__6552__auto__ = e11928;
                      var statearr_11929_11946 = state_11906;
                      statearr_11929_11946[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11906);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11928;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11947 = state_11906;
                  state_11906 = G__11947;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_11906) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_11906);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto__);
      }();
      var state__6571__auto__ = function() {
        var statearr_11930 = f__6570__auto__.call(null);
        statearr_11930[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto__;
        return statearr_11930;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto__));
  return c__6569__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj11949 = {};
  return obj11949;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4262__auto__ = _;
    if (and__4262__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4910__auto__ = _ == null ? null : _;
    return function() {
      var or__4274__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj11951 = {};
  return obj11951;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t12173 !== "undefined") {
    } else {
      cljs.core.async.t12173 = function(cs, ch, mult, meta12174) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta12174 = meta12174;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t12173.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t12173.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t12173.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t12173.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t12173.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t12173.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t12173.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_12175) {
          var self__ = this;
          var _12175__$1 = this;
          return self__.meta12174;
        };
      }(cs);
      cljs.core.async.t12173.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_12175, meta12174__$1) {
          var self__ = this;
          var _12175__$1 = this;
          return new cljs.core.async.t12173(self__.cs, self__.ch, self__.mult, meta12174__$1);
        };
      }(cs);
      cljs.core.async.t12173.cljs$lang$type = true;
      cljs.core.async.t12173.cljs$lang$ctorStr = "cljs.core.async/t12173";
      cljs.core.async.t12173.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
          return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t12173");
        };
      }(cs);
      cljs.core.async.__GT_t12173 = function(cs) {
        return function cljs$core$async$mult_$___GT_t12173(cs__$1, ch__$1, mult__$1, meta12174) {
          return new cljs.core.async.t12173(cs__$1, ch__$1, mult__$1, meta12174);
        };
      }(cs);
    }
    return new cljs.core.async.t12173(cs, ch, cljs$core$async$mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6569__auto___12394 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___12394, cs, m, dchan, dctr, done) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___12394, cs, m, dchan, dctr, done) {
          return function(state_12306) {
            var state_val_12307 = state_12306[1];
            if (state_val_12307 === 7) {
              var inst_12302 = state_12306[2];
              var state_12306__$1 = state_12306;
              var statearr_12308_12395 = state_12306__$1;
              statearr_12308_12395[2] = inst_12302;
              statearr_12308_12395[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12307 === 20) {
                var inst_12207 = state_12306[7];
                var inst_12217 = cljs.core.first.call(null, inst_12207);
                var inst_12218 = cljs.core.nth.call(null, inst_12217, 0, null);
                var inst_12219 = cljs.core.nth.call(null, inst_12217, 1, null);
                var state_12306__$1 = function() {
                  var statearr_12309 = state_12306;
                  statearr_12309[8] = inst_12218;
                  return statearr_12309;
                }();
                if (cljs.core.truth_(inst_12219)) {
                  var statearr_12310_12396 = state_12306__$1;
                  statearr_12310_12396[1] = 22;
                } else {
                  var statearr_12311_12397 = state_12306__$1;
                  statearr_12311_12397[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12307 === 27) {
                  var inst_12247 = state_12306[9];
                  var inst_12254 = state_12306[10];
                  var inst_12249 = state_12306[11];
                  var inst_12178 = state_12306[12];
                  var inst_12254__$1 = cljs.core._nth.call(null, inst_12247, inst_12249);
                  var inst_12255 = cljs.core.async.put_BANG_.call(null, inst_12254__$1, inst_12178, done);
                  var state_12306__$1 = function() {
                    var statearr_12312 = state_12306;
                    statearr_12312[10] = inst_12254__$1;
                    return statearr_12312;
                  }();
                  if (cljs.core.truth_(inst_12255)) {
                    var statearr_12313_12398 = state_12306__$1;
                    statearr_12313_12398[1] = 30;
                  } else {
                    var statearr_12314_12399 = state_12306__$1;
                    statearr_12314_12399[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12307 === 1) {
                    var state_12306__$1 = state_12306;
                    var statearr_12315_12400 = state_12306__$1;
                    statearr_12315_12400[2] = null;
                    statearr_12315_12400[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12307 === 24) {
                      var inst_12207 = state_12306[7];
                      var inst_12224 = state_12306[2];
                      var inst_12225 = cljs.core.next.call(null, inst_12207);
                      var inst_12187 = inst_12225;
                      var inst_12188 = null;
                      var inst_12189 = 0;
                      var inst_12190 = 0;
                      var state_12306__$1 = function() {
                        var statearr_12316 = state_12306;
                        statearr_12316[13] = inst_12187;
                        statearr_12316[14] = inst_12190;
                        statearr_12316[15] = inst_12224;
                        statearr_12316[16] = inst_12189;
                        statearr_12316[17] = inst_12188;
                        return statearr_12316;
                      }();
                      var statearr_12317_12401 = state_12306__$1;
                      statearr_12317_12401[2] = null;
                      statearr_12317_12401[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12307 === 39) {
                        var state_12306__$1 = state_12306;
                        var statearr_12321_12402 = state_12306__$1;
                        statearr_12321_12402[2] = null;
                        statearr_12321_12402[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12307 === 4) {
                          var inst_12178 = state_12306[12];
                          var inst_12178__$1 = state_12306[2];
                          var inst_12179 = inst_12178__$1 == null;
                          var state_12306__$1 = function() {
                            var statearr_12322 = state_12306;
                            statearr_12322[12] = inst_12178__$1;
                            return statearr_12322;
                          }();
                          if (cljs.core.truth_(inst_12179)) {
                            var statearr_12323_12403 = state_12306__$1;
                            statearr_12323_12403[1] = 5;
                          } else {
                            var statearr_12324_12404 = state_12306__$1;
                            statearr_12324_12404[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12307 === 15) {
                            var inst_12187 = state_12306[13];
                            var inst_12190 = state_12306[14];
                            var inst_12189 = state_12306[16];
                            var inst_12188 = state_12306[17];
                            var inst_12203 = state_12306[2];
                            var inst_12204 = inst_12190 + 1;
                            var tmp12318 = inst_12187;
                            var tmp12319 = inst_12189;
                            var tmp12320 = inst_12188;
                            var inst_12187__$1 = tmp12318;
                            var inst_12188__$1 = tmp12320;
                            var inst_12189__$1 = tmp12319;
                            var inst_12190__$1 = inst_12204;
                            var state_12306__$1 = function() {
                              var statearr_12325 = state_12306;
                              statearr_12325[13] = inst_12187__$1;
                              statearr_12325[14] = inst_12190__$1;
                              statearr_12325[16] = inst_12189__$1;
                              statearr_12325[17] = inst_12188__$1;
                              statearr_12325[18] = inst_12203;
                              return statearr_12325;
                            }();
                            var statearr_12326_12405 = state_12306__$1;
                            statearr_12326_12405[2] = null;
                            statearr_12326_12405[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12307 === 21) {
                              var inst_12228 = state_12306[2];
                              var state_12306__$1 = state_12306;
                              var statearr_12330_12406 = state_12306__$1;
                              statearr_12330_12406[2] = inst_12228;
                              statearr_12330_12406[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12307 === 31) {
                                var inst_12254 = state_12306[10];
                                var inst_12258 = done.call(null, null);
                                var inst_12259 = cljs.core.async.untap_STAR_.call(null, m, inst_12254);
                                var state_12306__$1 = function() {
                                  var statearr_12331 = state_12306;
                                  statearr_12331[19] = inst_12258;
                                  return statearr_12331;
                                }();
                                var statearr_12332_12407 = state_12306__$1;
                                statearr_12332_12407[2] = inst_12259;
                                statearr_12332_12407[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12307 === 32) {
                                  var inst_12246 = state_12306[20];
                                  var inst_12248 = state_12306[21];
                                  var inst_12247 = state_12306[9];
                                  var inst_12249 = state_12306[11];
                                  var inst_12261 = state_12306[2];
                                  var inst_12262 = inst_12249 + 1;
                                  var tmp12327 = inst_12246;
                                  var tmp12328 = inst_12248;
                                  var tmp12329 = inst_12247;
                                  var inst_12246__$1 = tmp12327;
                                  var inst_12247__$1 = tmp12329;
                                  var inst_12248__$1 = tmp12328;
                                  var inst_12249__$1 = inst_12262;
                                  var state_12306__$1 = function() {
                                    var statearr_12333 = state_12306;
                                    statearr_12333[20] = inst_12246__$1;
                                    statearr_12333[22] = inst_12261;
                                    statearr_12333[21] = inst_12248__$1;
                                    statearr_12333[9] = inst_12247__$1;
                                    statearr_12333[11] = inst_12249__$1;
                                    return statearr_12333;
                                  }();
                                  var statearr_12334_12408 = state_12306__$1;
                                  statearr_12334_12408[2] = null;
                                  statearr_12334_12408[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12307 === 40) {
                                    var inst_12274 = state_12306[23];
                                    var inst_12278 = done.call(null, null);
                                    var inst_12279 = cljs.core.async.untap_STAR_.call(null, m, inst_12274);
                                    var state_12306__$1 = function() {
                                      var statearr_12335 = state_12306;
                                      statearr_12335[24] = inst_12278;
                                      return statearr_12335;
                                    }();
                                    var statearr_12336_12409 = state_12306__$1;
                                    statearr_12336_12409[2] = inst_12279;
                                    statearr_12336_12409[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12307 === 33) {
                                      var inst_12265 = state_12306[25];
                                      var inst_12267 = cljs.core.chunked_seq_QMARK_.call(null, inst_12265);
                                      var state_12306__$1 = state_12306;
                                      if (inst_12267) {
                                        var statearr_12337_12410 = state_12306__$1;
                                        statearr_12337_12410[1] = 36;
                                      } else {
                                        var statearr_12338_12411 = state_12306__$1;
                                        statearr_12338_12411[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12307 === 13) {
                                        var inst_12197 = state_12306[26];
                                        var inst_12200 = cljs.core.async.close_BANG_.call(null, inst_12197);
                                        var state_12306__$1 = state_12306;
                                        var statearr_12339_12412 = state_12306__$1;
                                        statearr_12339_12412[2] = inst_12200;
                                        statearr_12339_12412[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12307 === 22) {
                                          var inst_12218 = state_12306[8];
                                          var inst_12221 = cljs.core.async.close_BANG_.call(null, inst_12218);
                                          var state_12306__$1 = state_12306;
                                          var statearr_12340_12413 = state_12306__$1;
                                          statearr_12340_12413[2] = inst_12221;
                                          statearr_12340_12413[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12307 === 36) {
                                            var inst_12265 = state_12306[25];
                                            var inst_12269 = cljs.core.chunk_first.call(null, inst_12265);
                                            var inst_12270 = cljs.core.chunk_rest.call(null, inst_12265);
                                            var inst_12271 = cljs.core.count.call(null, inst_12269);
                                            var inst_12246 = inst_12270;
                                            var inst_12247 = inst_12269;
                                            var inst_12248 = inst_12271;
                                            var inst_12249 = 0;
                                            var state_12306__$1 = function() {
                                              var statearr_12341 = state_12306;
                                              statearr_12341[20] = inst_12246;
                                              statearr_12341[21] = inst_12248;
                                              statearr_12341[9] = inst_12247;
                                              statearr_12341[11] = inst_12249;
                                              return statearr_12341;
                                            }();
                                            var statearr_12342_12414 = state_12306__$1;
                                            statearr_12342_12414[2] = null;
                                            statearr_12342_12414[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12307 === 41) {
                                              var inst_12265 = state_12306[25];
                                              var inst_12281 = state_12306[2];
                                              var inst_12282 = cljs.core.next.call(null, inst_12265);
                                              var inst_12246 = inst_12282;
                                              var inst_12247 = null;
                                              var inst_12248 = 0;
                                              var inst_12249 = 0;
                                              var state_12306__$1 = function() {
                                                var statearr_12343 = state_12306;
                                                statearr_12343[27] = inst_12281;
                                                statearr_12343[20] = inst_12246;
                                                statearr_12343[21] = inst_12248;
                                                statearr_12343[9] = inst_12247;
                                                statearr_12343[11] = inst_12249;
                                                return statearr_12343;
                                              }();
                                              var statearr_12344_12415 = state_12306__$1;
                                              statearr_12344_12415[2] = null;
                                              statearr_12344_12415[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12307 === 43) {
                                                var state_12306__$1 = state_12306;
                                                var statearr_12345_12416 = state_12306__$1;
                                                statearr_12345_12416[2] = null;
                                                statearr_12345_12416[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12307 === 29) {
                                                  var inst_12290 = state_12306[2];
                                                  var state_12306__$1 = state_12306;
                                                  var statearr_12346_12417 = state_12306__$1;
                                                  statearr_12346_12417[2] = inst_12290;
                                                  statearr_12346_12417[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12307 === 44) {
                                                    var inst_12299 = state_12306[2];
                                                    var state_12306__$1 = function() {
                                                      var statearr_12347 = state_12306;
                                                      statearr_12347[28] = inst_12299;
                                                      return statearr_12347;
                                                    }();
                                                    var statearr_12348_12418 = state_12306__$1;
                                                    statearr_12348_12418[2] = null;
                                                    statearr_12348_12418[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12307 === 6) {
                                                      var inst_12238 = state_12306[29];
                                                      var inst_12237 = cljs.core.deref.call(null, cs);
                                                      var inst_12238__$1 = cljs.core.keys.call(null, inst_12237);
                                                      var inst_12239 = cljs.core.count.call(null, inst_12238__$1);
                                                      var inst_12240 = cljs.core.reset_BANG_.call(null, dctr, inst_12239);
                                                      var inst_12245 = cljs.core.seq.call(null, inst_12238__$1);
                                                      var inst_12246 = inst_12245;
                                                      var inst_12247 = null;
                                                      var inst_12248 = 0;
                                                      var inst_12249 = 0;
                                                      var state_12306__$1 = function() {
                                                        var statearr_12349 = state_12306;
                                                        statearr_12349[30] = inst_12240;
                                                        statearr_12349[20] = inst_12246;
                                                        statearr_12349[21] = inst_12248;
                                                        statearr_12349[9] = inst_12247;
                                                        statearr_12349[11] = inst_12249;
                                                        statearr_12349[29] = inst_12238__$1;
                                                        return statearr_12349;
                                                      }();
                                                      var statearr_12350_12419 = state_12306__$1;
                                                      statearr_12350_12419[2] = null;
                                                      statearr_12350_12419[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12307 === 28) {
                                                        var inst_12246 = state_12306[20];
                                                        var inst_12265 = state_12306[25];
                                                        var inst_12265__$1 = cljs.core.seq.call(null, inst_12246);
                                                        var state_12306__$1 = function() {
                                                          var statearr_12351 = state_12306;
                                                          statearr_12351[25] = inst_12265__$1;
                                                          return statearr_12351;
                                                        }();
                                                        if (inst_12265__$1) {
                                                          var statearr_12352_12420 = state_12306__$1;
                                                          statearr_12352_12420[1] = 33;
                                                        } else {
                                                          var statearr_12353_12421 = state_12306__$1;
                                                          statearr_12353_12421[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12307 === 25) {
                                                          var inst_12248 = state_12306[21];
                                                          var inst_12249 = state_12306[11];
                                                          var inst_12251 = inst_12249 < inst_12248;
                                                          var inst_12252 = inst_12251;
                                                          var state_12306__$1 = state_12306;
                                                          if (cljs.core.truth_(inst_12252)) {
                                                            var statearr_12354_12422 = state_12306__$1;
                                                            statearr_12354_12422[1] = 27;
                                                          } else {
                                                            var statearr_12355_12423 = state_12306__$1;
                                                            statearr_12355_12423[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12307 === 34) {
                                                            var state_12306__$1 = state_12306;
                                                            var statearr_12356_12424 = state_12306__$1;
                                                            statearr_12356_12424[2] = null;
                                                            statearr_12356_12424[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12307 === 17) {
                                                              var state_12306__$1 = state_12306;
                                                              var statearr_12357_12425 = state_12306__$1;
                                                              statearr_12357_12425[2] = null;
                                                              statearr_12357_12425[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12307 === 3) {
                                                                var inst_12304 = state_12306[2];
                                                                var state_12306__$1 = state_12306;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12306__$1, inst_12304);
                                                              } else {
                                                                if (state_val_12307 === 12) {
                                                                  var inst_12233 = state_12306[2];
                                                                  var state_12306__$1 = state_12306;
                                                                  var statearr_12358_12426 = state_12306__$1;
                                                                  statearr_12358_12426[2] = inst_12233;
                                                                  statearr_12358_12426[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_12307 === 2) {
                                                                    var state_12306__$1 = state_12306;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12306__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_12307 === 23) {
                                                                      var state_12306__$1 = state_12306;
                                                                      var statearr_12359_12427 = state_12306__$1;
                                                                      statearr_12359_12427[2] = null;
                                                                      statearr_12359_12427[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_12307 === 35) {
                                                                        var inst_12288 = state_12306[2];
                                                                        var state_12306__$1 = state_12306;
                                                                        var statearr_12360_12428 = state_12306__$1;
                                                                        statearr_12360_12428[2] = inst_12288;
                                                                        statearr_12360_12428[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_12307 === 19) {
                                                                          var inst_12207 = state_12306[7];
                                                                          var inst_12211 = cljs.core.chunk_first.call(null, inst_12207);
                                                                          var inst_12212 = cljs.core.chunk_rest.call(null, inst_12207);
                                                                          var inst_12213 = cljs.core.count.call(null, inst_12211);
                                                                          var inst_12187 = inst_12212;
                                                                          var inst_12188 = inst_12211;
                                                                          var inst_12189 = inst_12213;
                                                                          var inst_12190 = 0;
                                                                          var state_12306__$1 = function() {
                                                                            var statearr_12361 = state_12306;
                                                                            statearr_12361[13] = inst_12187;
                                                                            statearr_12361[14] = inst_12190;
                                                                            statearr_12361[16] = inst_12189;
                                                                            statearr_12361[17] = inst_12188;
                                                                            return statearr_12361;
                                                                          }();
                                                                          var statearr_12362_12429 = state_12306__$1;
                                                                          statearr_12362_12429[2] = null;
                                                                          statearr_12362_12429[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_12307 === 11) {
                                                                            var inst_12187 = state_12306[13];
                                                                            var inst_12207 = state_12306[7];
                                                                            var inst_12207__$1 = cljs.core.seq.call(null, inst_12187);
                                                                            var state_12306__$1 = function() {
                                                                              var statearr_12363 = state_12306;
                                                                              statearr_12363[7] = inst_12207__$1;
                                                                              return statearr_12363;
                                                                            }();
                                                                            if (inst_12207__$1) {
                                                                              var statearr_12364_12430 = state_12306__$1;
                                                                              statearr_12364_12430[1] = 16;
                                                                            } else {
                                                                              var statearr_12365_12431 = state_12306__$1;
                                                                              statearr_12365_12431[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_12307 === 9) {
                                                                              var inst_12235 = state_12306[2];
                                                                              var state_12306__$1 = state_12306;
                                                                              var statearr_12366_12432 = state_12306__$1;
                                                                              statearr_12366_12432[2] = inst_12235;
                                                                              statearr_12366_12432[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_12307 === 5) {
                                                                                var inst_12185 = cljs.core.deref.call(null, cs);
                                                                                var inst_12186 = cljs.core.seq.call(null, inst_12185);
                                                                                var inst_12187 = inst_12186;
                                                                                var inst_12188 = null;
                                                                                var inst_12189 = 0;
                                                                                var inst_12190 = 0;
                                                                                var state_12306__$1 = function() {
                                                                                  var statearr_12367 = state_12306;
                                                                                  statearr_12367[13] = inst_12187;
                                                                                  statearr_12367[14] = inst_12190;
                                                                                  statearr_12367[16] = inst_12189;
                                                                                  statearr_12367[17] = inst_12188;
                                                                                  return statearr_12367;
                                                                                }();
                                                                                var statearr_12368_12433 = state_12306__$1;
                                                                                statearr_12368_12433[2] = null;
                                                                                statearr_12368_12433[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_12307 === 14) {
                                                                                  var state_12306__$1 = state_12306;
                                                                                  var statearr_12369_12434 = state_12306__$1;
                                                                                  statearr_12369_12434[2] = null;
                                                                                  statearr_12369_12434[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_12307 === 45) {
                                                                                    var inst_12296 = state_12306[2];
                                                                                    var state_12306__$1 = state_12306;
                                                                                    var statearr_12370_12435 = state_12306__$1;
                                                                                    statearr_12370_12435[2] = inst_12296;
                                                                                    statearr_12370_12435[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_12307 === 26) {
                                                                                      var inst_12238 = state_12306[29];
                                                                                      var inst_12292 = state_12306[2];
                                                                                      var inst_12293 = cljs.core.seq.call(null, inst_12238);
                                                                                      var state_12306__$1 = function() {
                                                                                        var statearr_12371 = state_12306;
                                                                                        statearr_12371[31] = inst_12292;
                                                                                        return statearr_12371;
                                                                                      }();
                                                                                      if (inst_12293) {
                                                                                        var statearr_12372_12436 = state_12306__$1;
                                                                                        statearr_12372_12436[1] = 42;
                                                                                      } else {
                                                                                        var statearr_12373_12437 = state_12306__$1;
                                                                                        statearr_12373_12437[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_12307 === 16) {
                                                                                        var inst_12207 = state_12306[7];
                                                                                        var inst_12209 = cljs.core.chunked_seq_QMARK_.call(null, inst_12207);
                                                                                        var state_12306__$1 = state_12306;
                                                                                        if (inst_12209) {
                                                                                          var statearr_12374_12438 = state_12306__$1;
                                                                                          statearr_12374_12438[1] = 19;
                                                                                        } else {
                                                                                          var statearr_12375_12439 = state_12306__$1;
                                                                                          statearr_12375_12439[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_12307 === 38) {
                                                                                          var inst_12285 = state_12306[2];
                                                                                          var state_12306__$1 = state_12306;
                                                                                          var statearr_12376_12440 = state_12306__$1;
                                                                                          statearr_12376_12440[2] = inst_12285;
                                                                                          statearr_12376_12440[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_12307 === 30) {
                                                                                            var state_12306__$1 = state_12306;
                                                                                            var statearr_12377_12441 = state_12306__$1;
                                                                                            statearr_12377_12441[2] = null;
                                                                                            statearr_12377_12441[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_12307 === 10) {
                                                                                              var inst_12190 = state_12306[14];
                                                                                              var inst_12188 = state_12306[17];
                                                                                              var inst_12196 = cljs.core._nth.call(null, inst_12188, inst_12190);
                                                                                              var inst_12197 = cljs.core.nth.call(null, inst_12196, 0, null);
                                                                                              var inst_12198 = cljs.core.nth.call(null, inst_12196, 1, null);
                                                                                              var state_12306__$1 = function() {
                                                                                                var statearr_12378 = state_12306;
                                                                                                statearr_12378[26] = inst_12197;
                                                                                                return statearr_12378;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_12198)) {
                                                                                                var statearr_12379_12442 = state_12306__$1;
                                                                                                statearr_12379_12442[1] = 13;
                                                                                              } else {
                                                                                                var statearr_12380_12443 = state_12306__$1;
                                                                                                statearr_12380_12443[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_12307 === 18) {
                                                                                                var inst_12231 = state_12306[2];
                                                                                                var state_12306__$1 = state_12306;
                                                                                                var statearr_12381_12444 = state_12306__$1;
                                                                                                statearr_12381_12444[2] = inst_12231;
                                                                                                statearr_12381_12444[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_12307 === 42) {
                                                                                                  var state_12306__$1 = state_12306;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12306__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_12307 === 37) {
                                                                                                    var inst_12274 = state_12306[23];
                                                                                                    var inst_12265 = state_12306[25];
                                                                                                    var inst_12178 = state_12306[12];
                                                                                                    var inst_12274__$1 = cljs.core.first.call(null, inst_12265);
                                                                                                    var inst_12275 = cljs.core.async.put_BANG_.call(null, inst_12274__$1, inst_12178, done);
                                                                                                    var state_12306__$1 = function() {
                                                                                                      var statearr_12382 = state_12306;
                                                                                                      statearr_12382[23] = inst_12274__$1;
                                                                                                      return statearr_12382;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_12275)) {
                                                                                                      var statearr_12383_12445 = state_12306__$1;
                                                                                                      statearr_12383_12445[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_12384_12446 = state_12306__$1;
                                                                                                      statearr_12384_12446[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_12307 === 8) {
                                                                                                      var inst_12190 = state_12306[14];
                                                                                                      var inst_12189 = state_12306[16];
                                                                                                      var inst_12192 = inst_12190 < inst_12189;
                                                                                                      var inst_12193 = inst_12192;
                                                                                                      var state_12306__$1 = state_12306;
                                                                                                      if (cljs.core.truth_(inst_12193)) {
                                                                                                        var statearr_12385_12447 = state_12306__$1;
                                                                                                        statearr_12385_12447[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_12386_12448 = state_12306__$1;
                                                                                                        statearr_12386_12448[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___12394, cs, m, dchan, dctr, done);
        return function(switch__6548__auto__, c__6569__auto___12394, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__6549__auto__ = null;
            var cljs$core$async$mult_$_state_machine__6549__auto____0 = function() {
              var statearr_12390 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12390[0] = cljs$core$async$mult_$_state_machine__6549__auto__;
              statearr_12390[1] = 1;
              return statearr_12390;
            };
            var cljs$core$async$mult_$_state_machine__6549__auto____1 = function(state_12306) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_12306);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e12391) {
                    if (e12391 instanceof Object) {
                      var ex__6552__auto__ = e12391;
                      var statearr_12392_12449 = state_12306;
                      statearr_12392_12449[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12306);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12391;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12450 = state_12306;
                  state_12306 = G__12450;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__6549__auto__ = function(state_12306) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__6549__auto____1.call(this, state_12306);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__6549__auto____0;
            cljs$core$async$mult_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__6549__auto____1;
            return cljs$core$async$mult_$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___12394, cs, m, dchan, dctr, done);
      }();
      var state__6571__auto__ = function() {
        var statearr_12393 = f__6570__auto__.call(null);
        statearr_12393[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___12394;
        return statearr_12393;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___12394, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__12452 = arguments.length;
  switch(G__12452) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj12455 = {};
  return obj12455;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4262__auto__ = m;
    if (and__4262__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4910__auto__ = m == null ? null : m;
    return function() {
      var or__4274__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5314__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5314__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__12460) {
  var map__12461 = p__12460;
  var map__12461__$1 = cljs.core.seq_QMARK_.call(null, map__12461) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12461) : map__12461;
  var opts = map__12461__$1;
  var statearr_12462_12465 = state;
  statearr_12462_12465[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__12461, map__12461__$1, opts) {
    return function(val) {
      var statearr_12463_12466 = state;
      statearr_12463_12466[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__12461, map__12461__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var cb = temp__4126__auto__;
    var statearr_12464_12467 = state;
    statearr_12464_12467[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq12456) {
  var G__12457 = cljs.core.first.call(null, seq12456);
  var seq12456__$1 = cljs.core.next.call(null, seq12456);
  var G__12458 = cljs.core.first.call(null, seq12456__$1);
  var seq12456__$2 = cljs.core.next.call(null, seq12456__$1);
  var G__12459 = cljs.core.first.call(null, seq12456__$2);
  var seq12456__$3 = cljs.core.next.call(null, seq12456__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12457, G__12458, G__12459, seq12456__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t12587 !== "undefined") {
    } else {
      cljs.core.async.t12587 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta12588) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta12588 = meta12588;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t12587.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t12587.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t12587.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12589) {
          var self__ = this;
          var _12589__$1 = this;
          return self__.meta12588;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12589, meta12588__$1) {
          var self__ = this;
          var _12589__$1 = this;
          return new cljs.core.async.t12587(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta12588__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12587.cljs$lang$type = true;
      cljs.core.async.t12587.cljs$lang$ctorStr = "cljs.core.async/t12587";
      cljs.core.async.t12587.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
          return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t12587");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t12587 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t12587(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta12588) {
          return new cljs.core.async.t12587(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta12588);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t12587(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__6569__auto___12706 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___12706, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___12706, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_12659) {
            var state_val_12660 = state_12659[1];
            if (state_val_12660 === 7) {
              var inst_12603 = state_12659[7];
              var inst_12608 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12603);
              var state_12659__$1 = state_12659;
              var statearr_12661_12707 = state_12659__$1;
              statearr_12661_12707[2] = inst_12608;
              statearr_12661_12707[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12660 === 20) {
                var inst_12618 = state_12659[8];
                var state_12659__$1 = state_12659;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12659__$1, 23, out, inst_12618);
              } else {
                if (state_val_12660 === 1) {
                  var inst_12593 = state_12659[9];
                  var inst_12593__$1 = calc_state.call(null);
                  var inst_12594 = cljs.core.seq_QMARK_.call(null, inst_12593__$1);
                  var state_12659__$1 = function() {
                    var statearr_12662 = state_12659;
                    statearr_12662[9] = inst_12593__$1;
                    return statearr_12662;
                  }();
                  if (inst_12594) {
                    var statearr_12663_12708 = state_12659__$1;
                    statearr_12663_12708[1] = 2;
                  } else {
                    var statearr_12664_12709 = state_12659__$1;
                    statearr_12664_12709[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12660 === 24) {
                    var inst_12611 = state_12659[10];
                    var inst_12603 = inst_12611;
                    var state_12659__$1 = function() {
                      var statearr_12665 = state_12659;
                      statearr_12665[7] = inst_12603;
                      return statearr_12665;
                    }();
                    var statearr_12666_12710 = state_12659__$1;
                    statearr_12666_12710[2] = null;
                    statearr_12666_12710[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12660 === 4) {
                      var inst_12593 = state_12659[9];
                      var inst_12599 = state_12659[2];
                      var inst_12600 = cljs.core.get.call(null, inst_12599, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_12601 = cljs.core.get.call(null, inst_12599, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_12602 = cljs.core.get.call(null, inst_12599, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_12603 = inst_12593;
                      var state_12659__$1 = function() {
                        var statearr_12667 = state_12659;
                        statearr_12667[11] = inst_12601;
                        statearr_12667[12] = inst_12602;
                        statearr_12667[13] = inst_12600;
                        statearr_12667[7] = inst_12603;
                        return statearr_12667;
                      }();
                      var statearr_12668_12711 = state_12659__$1;
                      statearr_12668_12711[2] = null;
                      statearr_12668_12711[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12660 === 15) {
                        var state_12659__$1 = state_12659;
                        var statearr_12669_12712 = state_12659__$1;
                        statearr_12669_12712[2] = null;
                        statearr_12669_12712[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12660 === 21) {
                          var inst_12611 = state_12659[10];
                          var inst_12603 = inst_12611;
                          var state_12659__$1 = function() {
                            var statearr_12670 = state_12659;
                            statearr_12670[7] = inst_12603;
                            return statearr_12670;
                          }();
                          var statearr_12671_12713 = state_12659__$1;
                          statearr_12671_12713[2] = null;
                          statearr_12671_12713[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12660 === 13) {
                            var inst_12655 = state_12659[2];
                            var state_12659__$1 = state_12659;
                            var statearr_12672_12714 = state_12659__$1;
                            statearr_12672_12714[2] = inst_12655;
                            statearr_12672_12714[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12660 === 22) {
                              var inst_12653 = state_12659[2];
                              var state_12659__$1 = state_12659;
                              var statearr_12673_12715 = state_12659__$1;
                              statearr_12673_12715[2] = inst_12653;
                              statearr_12673_12715[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12660 === 6) {
                                var inst_12657 = state_12659[2];
                                var state_12659__$1 = state_12659;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12659__$1, inst_12657);
                              } else {
                                if (state_val_12660 === 25) {
                                  var state_12659__$1 = state_12659;
                                  var statearr_12674_12716 = state_12659__$1;
                                  statearr_12674_12716[2] = null;
                                  statearr_12674_12716[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12660 === 17) {
                                    var inst_12633 = state_12659[14];
                                    var state_12659__$1 = state_12659;
                                    var statearr_12675_12717 = state_12659__$1;
                                    statearr_12675_12717[2] = inst_12633;
                                    statearr_12675_12717[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12660 === 3) {
                                      var inst_12593 = state_12659[9];
                                      var state_12659__$1 = state_12659;
                                      var statearr_12676_12718 = state_12659__$1;
                                      statearr_12676_12718[2] = inst_12593;
                                      statearr_12676_12718[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12660 === 12) {
                                        var inst_12614 = state_12659[15];
                                        var inst_12619 = state_12659[16];
                                        var inst_12633 = state_12659[14];
                                        var inst_12633__$1 = inst_12614.call(null, inst_12619);
                                        var state_12659__$1 = function() {
                                          var statearr_12677 = state_12659;
                                          statearr_12677[14] = inst_12633__$1;
                                          return statearr_12677;
                                        }();
                                        if (cljs.core.truth_(inst_12633__$1)) {
                                          var statearr_12678_12719 = state_12659__$1;
                                          statearr_12678_12719[1] = 17;
                                        } else {
                                          var statearr_12679_12720 = state_12659__$1;
                                          statearr_12679_12720[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12660 === 2) {
                                          var inst_12593 = state_12659[9];
                                          var inst_12596 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12593);
                                          var state_12659__$1 = state_12659;
                                          var statearr_12680_12721 = state_12659__$1;
                                          statearr_12680_12721[2] = inst_12596;
                                          statearr_12680_12721[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12660 === 23) {
                                            var inst_12644 = state_12659[2];
                                            var state_12659__$1 = state_12659;
                                            if (cljs.core.truth_(inst_12644)) {
                                              var statearr_12681_12722 = state_12659__$1;
                                              statearr_12681_12722[1] = 24;
                                            } else {
                                              var statearr_12682_12723 = state_12659__$1;
                                              statearr_12682_12723[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12660 === 19) {
                                              var inst_12641 = state_12659[2];
                                              var state_12659__$1 = state_12659;
                                              if (cljs.core.truth_(inst_12641)) {
                                                var statearr_12683_12724 = state_12659__$1;
                                                statearr_12683_12724[1] = 20;
                                              } else {
                                                var statearr_12684_12725 = state_12659__$1;
                                                statearr_12684_12725[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12660 === 11) {
                                                var inst_12618 = state_12659[8];
                                                var inst_12624 = inst_12618 == null;
                                                var state_12659__$1 = state_12659;
                                                if (cljs.core.truth_(inst_12624)) {
                                                  var statearr_12685_12726 = state_12659__$1;
                                                  statearr_12685_12726[1] = 14;
                                                } else {
                                                  var statearr_12686_12727 = state_12659__$1;
                                                  statearr_12686_12727[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12660 === 9) {
                                                  var inst_12611 = state_12659[10];
                                                  var inst_12611__$1 = state_12659[2];
                                                  var inst_12612 = cljs.core.get.call(null, inst_12611__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_12613 = cljs.core.get.call(null, inst_12611__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_12614 = cljs.core.get.call(null, inst_12611__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_12659__$1 = function() {
                                                    var statearr_12687 = state_12659;
                                                    statearr_12687[17] = inst_12613;
                                                    statearr_12687[15] = inst_12614;
                                                    statearr_12687[10] = inst_12611__$1;
                                                    return statearr_12687;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_12659__$1, 10, inst_12612);
                                                } else {
                                                  if (state_val_12660 === 5) {
                                                    var inst_12603 = state_12659[7];
                                                    var inst_12606 = cljs.core.seq_QMARK_.call(null, inst_12603);
                                                    var state_12659__$1 = state_12659;
                                                    if (inst_12606) {
                                                      var statearr_12688_12728 = state_12659__$1;
                                                      statearr_12688_12728[1] = 7;
                                                    } else {
                                                      var statearr_12689_12729 = state_12659__$1;
                                                      statearr_12689_12729[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12660 === 14) {
                                                      var inst_12619 = state_12659[16];
                                                      var inst_12626 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_12619);
                                                      var state_12659__$1 = state_12659;
                                                      var statearr_12690_12730 = state_12659__$1;
                                                      statearr_12690_12730[2] = inst_12626;
                                                      statearr_12690_12730[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12660 === 26) {
                                                        var inst_12649 = state_12659[2];
                                                        var state_12659__$1 = state_12659;
                                                        var statearr_12691_12731 = state_12659__$1;
                                                        statearr_12691_12731[2] = inst_12649;
                                                        statearr_12691_12731[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12660 === 16) {
                                                          var inst_12629 = state_12659[2];
                                                          var inst_12630 = calc_state.call(null);
                                                          var inst_12603 = inst_12630;
                                                          var state_12659__$1 = function() {
                                                            var statearr_12692 = state_12659;
                                                            statearr_12692[7] = inst_12603;
                                                            statearr_12692[18] = inst_12629;
                                                            return statearr_12692;
                                                          }();
                                                          var statearr_12693_12732 = state_12659__$1;
                                                          statearr_12693_12732[2] = null;
                                                          statearr_12693_12732[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12660 === 10) {
                                                            var inst_12619 = state_12659[16];
                                                            var inst_12618 = state_12659[8];
                                                            var inst_12617 = state_12659[2];
                                                            var inst_12618__$1 = cljs.core.nth.call(null, inst_12617, 0, null);
                                                            var inst_12619__$1 = cljs.core.nth.call(null, inst_12617, 1, null);
                                                            var inst_12620 = inst_12618__$1 == null;
                                                            var inst_12621 = cljs.core._EQ_.call(null, inst_12619__$1, change);
                                                            var inst_12622 = inst_12620 || inst_12621;
                                                            var state_12659__$1 = function() {
                                                              var statearr_12694 = state_12659;
                                                              statearr_12694[16] = inst_12619__$1;
                                                              statearr_12694[8] = inst_12618__$1;
                                                              return statearr_12694;
                                                            }();
                                                            if (cljs.core.truth_(inst_12622)) {
                                                              var statearr_12695_12733 = state_12659__$1;
                                                              statearr_12695_12733[1] = 11;
                                                            } else {
                                                              var statearr_12696_12734 = state_12659__$1;
                                                              statearr_12696_12734[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12660 === 18) {
                                                              var inst_12613 = state_12659[17];
                                                              var inst_12614 = state_12659[15];
                                                              var inst_12619 = state_12659[16];
                                                              var inst_12636 = cljs.core.empty_QMARK_.call(null, inst_12614);
                                                              var inst_12637 = inst_12613.call(null, inst_12619);
                                                              var inst_12638 = cljs.core.not.call(null, inst_12637);
                                                              var inst_12639 = inst_12636 && inst_12638;
                                                              var state_12659__$1 = state_12659;
                                                              var statearr_12697_12735 = state_12659__$1;
                                                              statearr_12697_12735[2] = inst_12639;
                                                              statearr_12697_12735[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12660 === 8) {
                                                                var inst_12603 = state_12659[7];
                                                                var state_12659__$1 = state_12659;
                                                                var statearr_12698_12736 = state_12659__$1;
                                                                statearr_12698_12736[2] = inst_12603;
                                                                statearr_12698_12736[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___12706, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6548__auto__, c__6569__auto___12706, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__6549__auto__ = null;
            var cljs$core$async$mix_$_state_machine__6549__auto____0 = function() {
              var statearr_12702 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12702[0] = cljs$core$async$mix_$_state_machine__6549__auto__;
              statearr_12702[1] = 1;
              return statearr_12702;
            };
            var cljs$core$async$mix_$_state_machine__6549__auto____1 = function(state_12659) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_12659);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e12703) {
                    if (e12703 instanceof Object) {
                      var ex__6552__auto__ = e12703;
                      var statearr_12704_12737 = state_12659;
                      statearr_12704_12737[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12659);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12703;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12738 = state_12659;
                  state_12659 = G__12738;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__6549__auto__ = function(state_12659) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__6549__auto____1.call(this, state_12659);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__6549__auto____0;
            cljs$core$async$mix_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__6549__auto____1;
            return cljs$core$async$mix_$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___12706, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6571__auto__ = function() {
        var statearr_12705 = f__6570__auto__.call(null);
        statearr_12705[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___12706;
        return statearr_12705;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___12706, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj12740 = {};
  return obj12740;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4262__auto__ = p;
    if (and__4262__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4910__auto__ = p == null ? null : p;
    return function() {
      var or__4274__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4262__auto__ = p;
    if (and__4262__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4910__auto__ = p == null ? null : p;
    return function() {
      var or__4274__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__12742 = arguments.length;
  switch(G__12742) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4262__auto__ = p;
    if (and__4262__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4910__auto__ = p == null ? null : p;
    return function() {
      var or__4274__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4262__auto__ = p;
    if (and__4262__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4910__auto__ = p == null ? null : p;
    return function() {
      var or__4274__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__12746 = arguments.length;
  switch(G__12746) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4274__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4274__auto__, mults) {
          return function(p1__12744_SHARP_) {
            if (cljs.core.truth_(p1__12744_SHARP_.call(null, topic))) {
              return p1__12744_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__12744_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4274__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t12747 !== "undefined") {
    } else {
      cljs.core.async.t12747 = function(ensure_mult, mults, buf_fn, topic_fn, ch, meta12748) {
        this.ensure_mult = ensure_mult;
        this.mults = mults;
        this.buf_fn = buf_fn;
        this.topic_fn = topic_fn;
        this.ch = ch;
        this.meta12748 = meta12748;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t12747.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t12747.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4126__auto__)) {
            var m = temp__4126__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t12747.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_12749) {
          var self__ = this;
          var _12749__$1 = this;
          return self__.meta12748;
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_12749, meta12748__$1) {
          var self__ = this;
          var _12749__$1 = this;
          return new cljs.core.async.t12747(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, meta12748__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12747.cljs$lang$type = true;
      cljs.core.async.t12747.cljs$lang$ctorStr = "cljs.core.async/t12747";
      cljs.core.async.t12747.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
          return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t12747");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t12747 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t12747(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, meta12748) {
          return new cljs.core.async.t12747(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, meta12748);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t12747(ensure_mult, mults, buf_fn, topic_fn, ch, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__6569__auto___12870 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___12870, mults, ensure_mult, p) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___12870, mults, ensure_mult, p) {
          return function(state_12821) {
            var state_val_12822 = state_12821[1];
            if (state_val_12822 === 7) {
              var inst_12817 = state_12821[2];
              var state_12821__$1 = state_12821;
              var statearr_12823_12871 = state_12821__$1;
              statearr_12823_12871[2] = inst_12817;
              statearr_12823_12871[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12822 === 20) {
                var state_12821__$1 = state_12821;
                var statearr_12824_12872 = state_12821__$1;
                statearr_12824_12872[2] = null;
                statearr_12824_12872[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12822 === 1) {
                  var state_12821__$1 = state_12821;
                  var statearr_12825_12873 = state_12821__$1;
                  statearr_12825_12873[2] = null;
                  statearr_12825_12873[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12822 === 24) {
                    var inst_12800 = state_12821[7];
                    var inst_12809 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_12800);
                    var state_12821__$1 = state_12821;
                    var statearr_12826_12874 = state_12821__$1;
                    statearr_12826_12874[2] = inst_12809;
                    statearr_12826_12874[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12822 === 4) {
                      var inst_12752 = state_12821[8];
                      var inst_12752__$1 = state_12821[2];
                      var inst_12753 = inst_12752__$1 == null;
                      var state_12821__$1 = function() {
                        var statearr_12827 = state_12821;
                        statearr_12827[8] = inst_12752__$1;
                        return statearr_12827;
                      }();
                      if (cljs.core.truth_(inst_12753)) {
                        var statearr_12828_12875 = state_12821__$1;
                        statearr_12828_12875[1] = 5;
                      } else {
                        var statearr_12829_12876 = state_12821__$1;
                        statearr_12829_12876[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12822 === 15) {
                        var inst_12794 = state_12821[2];
                        var state_12821__$1 = state_12821;
                        var statearr_12830_12877 = state_12821__$1;
                        statearr_12830_12877[2] = inst_12794;
                        statearr_12830_12877[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12822 === 21) {
                          var inst_12814 = state_12821[2];
                          var state_12821__$1 = function() {
                            var statearr_12831 = state_12821;
                            statearr_12831[9] = inst_12814;
                            return statearr_12831;
                          }();
                          var statearr_12832_12878 = state_12821__$1;
                          statearr_12832_12878[2] = null;
                          statearr_12832_12878[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12822 === 13) {
                            var inst_12776 = state_12821[10];
                            var inst_12778 = cljs.core.chunked_seq_QMARK_.call(null, inst_12776);
                            var state_12821__$1 = state_12821;
                            if (inst_12778) {
                              var statearr_12833_12879 = state_12821__$1;
                              statearr_12833_12879[1] = 16;
                            } else {
                              var statearr_12834_12880 = state_12821__$1;
                              statearr_12834_12880[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12822 === 22) {
                              var inst_12806 = state_12821[2];
                              var state_12821__$1 = state_12821;
                              if (cljs.core.truth_(inst_12806)) {
                                var statearr_12835_12881 = state_12821__$1;
                                statearr_12835_12881[1] = 23;
                              } else {
                                var statearr_12836_12882 = state_12821__$1;
                                statearr_12836_12882[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12822 === 6) {
                                var inst_12752 = state_12821[8];
                                var inst_12800 = state_12821[7];
                                var inst_12802 = state_12821[11];
                                var inst_12800__$1 = topic_fn.call(null, inst_12752);
                                var inst_12801 = cljs.core.deref.call(null, mults);
                                var inst_12802__$1 = cljs.core.get.call(null, inst_12801, inst_12800__$1);
                                var state_12821__$1 = function() {
                                  var statearr_12837 = state_12821;
                                  statearr_12837[7] = inst_12800__$1;
                                  statearr_12837[11] = inst_12802__$1;
                                  return statearr_12837;
                                }();
                                if (cljs.core.truth_(inst_12802__$1)) {
                                  var statearr_12838_12883 = state_12821__$1;
                                  statearr_12838_12883[1] = 19;
                                } else {
                                  var statearr_12839_12884 = state_12821__$1;
                                  statearr_12839_12884[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12822 === 25) {
                                  var inst_12811 = state_12821[2];
                                  var state_12821__$1 = state_12821;
                                  var statearr_12840_12885 = state_12821__$1;
                                  statearr_12840_12885[2] = inst_12811;
                                  statearr_12840_12885[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12822 === 17) {
                                    var inst_12776 = state_12821[10];
                                    var inst_12785 = cljs.core.first.call(null, inst_12776);
                                    var inst_12786 = cljs.core.async.muxch_STAR_.call(null, inst_12785);
                                    var inst_12787 = cljs.core.async.close_BANG_.call(null, inst_12786);
                                    var inst_12788 = cljs.core.next.call(null, inst_12776);
                                    var inst_12762 = inst_12788;
                                    var inst_12763 = null;
                                    var inst_12764 = 0;
                                    var inst_12765 = 0;
                                    var state_12821__$1 = function() {
                                      var statearr_12841 = state_12821;
                                      statearr_12841[12] = inst_12765;
                                      statearr_12841[13] = inst_12762;
                                      statearr_12841[14] = inst_12763;
                                      statearr_12841[15] = inst_12787;
                                      statearr_12841[16] = inst_12764;
                                      return statearr_12841;
                                    }();
                                    var statearr_12842_12886 = state_12821__$1;
                                    statearr_12842_12886[2] = null;
                                    statearr_12842_12886[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12822 === 3) {
                                      var inst_12819 = state_12821[2];
                                      var state_12821__$1 = state_12821;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12821__$1, inst_12819);
                                    } else {
                                      if (state_val_12822 === 12) {
                                        var inst_12796 = state_12821[2];
                                        var state_12821__$1 = state_12821;
                                        var statearr_12843_12887 = state_12821__$1;
                                        statearr_12843_12887[2] = inst_12796;
                                        statearr_12843_12887[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12822 === 2) {
                                          var state_12821__$1 = state_12821;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12821__$1, 4, ch);
                                        } else {
                                          if (state_val_12822 === 23) {
                                            var state_12821__$1 = state_12821;
                                            var statearr_12844_12888 = state_12821__$1;
                                            statearr_12844_12888[2] = null;
                                            statearr_12844_12888[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12822 === 19) {
                                              var inst_12752 = state_12821[8];
                                              var inst_12802 = state_12821[11];
                                              var inst_12804 = cljs.core.async.muxch_STAR_.call(null, inst_12802);
                                              var state_12821__$1 = state_12821;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12821__$1, 22, inst_12804, inst_12752);
                                            } else {
                                              if (state_val_12822 === 11) {
                                                var inst_12762 = state_12821[13];
                                                var inst_12776 = state_12821[10];
                                                var inst_12776__$1 = cljs.core.seq.call(null, inst_12762);
                                                var state_12821__$1 = function() {
                                                  var statearr_12845 = state_12821;
                                                  statearr_12845[10] = inst_12776__$1;
                                                  return statearr_12845;
                                                }();
                                                if (inst_12776__$1) {
                                                  var statearr_12846_12889 = state_12821__$1;
                                                  statearr_12846_12889[1] = 13;
                                                } else {
                                                  var statearr_12847_12890 = state_12821__$1;
                                                  statearr_12847_12890[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12822 === 9) {
                                                  var inst_12798 = state_12821[2];
                                                  var state_12821__$1 = state_12821;
                                                  var statearr_12848_12891 = state_12821__$1;
                                                  statearr_12848_12891[2] = inst_12798;
                                                  statearr_12848_12891[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12822 === 5) {
                                                    var inst_12759 = cljs.core.deref.call(null, mults);
                                                    var inst_12760 = cljs.core.vals.call(null, inst_12759);
                                                    var inst_12761 = cljs.core.seq.call(null, inst_12760);
                                                    var inst_12762 = inst_12761;
                                                    var inst_12763 = null;
                                                    var inst_12764 = 0;
                                                    var inst_12765 = 0;
                                                    var state_12821__$1 = function() {
                                                      var statearr_12849 = state_12821;
                                                      statearr_12849[12] = inst_12765;
                                                      statearr_12849[13] = inst_12762;
                                                      statearr_12849[14] = inst_12763;
                                                      statearr_12849[16] = inst_12764;
                                                      return statearr_12849;
                                                    }();
                                                    var statearr_12850_12892 = state_12821__$1;
                                                    statearr_12850_12892[2] = null;
                                                    statearr_12850_12892[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12822 === 14) {
                                                      var state_12821__$1 = state_12821;
                                                      var statearr_12854_12893 = state_12821__$1;
                                                      statearr_12854_12893[2] = null;
                                                      statearr_12854_12893[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12822 === 16) {
                                                        var inst_12776 = state_12821[10];
                                                        var inst_12780 = cljs.core.chunk_first.call(null, inst_12776);
                                                        var inst_12781 = cljs.core.chunk_rest.call(null, inst_12776);
                                                        var inst_12782 = cljs.core.count.call(null, inst_12780);
                                                        var inst_12762 = inst_12781;
                                                        var inst_12763 = inst_12780;
                                                        var inst_12764 = inst_12782;
                                                        var inst_12765 = 0;
                                                        var state_12821__$1 = function() {
                                                          var statearr_12855 = state_12821;
                                                          statearr_12855[12] = inst_12765;
                                                          statearr_12855[13] = inst_12762;
                                                          statearr_12855[14] = inst_12763;
                                                          statearr_12855[16] = inst_12764;
                                                          return statearr_12855;
                                                        }();
                                                        var statearr_12856_12894 = state_12821__$1;
                                                        statearr_12856_12894[2] = null;
                                                        statearr_12856_12894[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12822 === 10) {
                                                          var inst_12765 = state_12821[12];
                                                          var inst_12762 = state_12821[13];
                                                          var inst_12763 = state_12821[14];
                                                          var inst_12764 = state_12821[16];
                                                          var inst_12770 = cljs.core._nth.call(null, inst_12763, inst_12765);
                                                          var inst_12771 = cljs.core.async.muxch_STAR_.call(null, inst_12770);
                                                          var inst_12772 = cljs.core.async.close_BANG_.call(null, inst_12771);
                                                          var inst_12773 = inst_12765 + 1;
                                                          var tmp12851 = inst_12762;
                                                          var tmp12852 = inst_12763;
                                                          var tmp12853 = inst_12764;
                                                          var inst_12762__$1 = tmp12851;
                                                          var inst_12763__$1 = tmp12852;
                                                          var inst_12764__$1 = tmp12853;
                                                          var inst_12765__$1 = inst_12773;
                                                          var state_12821__$1 = function() {
                                                            var statearr_12857 = state_12821;
                                                            statearr_12857[12] = inst_12765__$1;
                                                            statearr_12857[13] = inst_12762__$1;
                                                            statearr_12857[14] = inst_12763__$1;
                                                            statearr_12857[16] = inst_12764__$1;
                                                            statearr_12857[17] = inst_12772;
                                                            return statearr_12857;
                                                          }();
                                                          var statearr_12858_12895 = state_12821__$1;
                                                          statearr_12858_12895[2] = null;
                                                          statearr_12858_12895[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12822 === 18) {
                                                            var inst_12791 = state_12821[2];
                                                            var state_12821__$1 = state_12821;
                                                            var statearr_12859_12896 = state_12821__$1;
                                                            statearr_12859_12896[2] = inst_12791;
                                                            statearr_12859_12896[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12822 === 8) {
                                                              var inst_12765 = state_12821[12];
                                                              var inst_12764 = state_12821[16];
                                                              var inst_12767 = inst_12765 < inst_12764;
                                                              var inst_12768 = inst_12767;
                                                              var state_12821__$1 = state_12821;
                                                              if (cljs.core.truth_(inst_12768)) {
                                                                var statearr_12860_12897 = state_12821__$1;
                                                                statearr_12860_12897[1] = 10;
                                                              } else {
                                                                var statearr_12861_12898 = state_12821__$1;
                                                                statearr_12861_12898[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___12870, mults, ensure_mult, p);
        return function(switch__6548__auto__, c__6569__auto___12870, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_12865 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12865[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_12865[1] = 1;
              return statearr_12865;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_12821) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_12821);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e12866) {
                    if (e12866 instanceof Object) {
                      var ex__6552__auto__ = e12866;
                      var statearr_12867_12899 = state_12821;
                      statearr_12867_12899[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12821);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12866;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12900 = state_12821;
                  state_12821 = G__12900;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_12821) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_12821);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___12870, mults, ensure_mult, p);
      }();
      var state__6571__auto__ = function() {
        var statearr_12868 = f__6570__auto__.call(null);
        statearr_12868[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___12870;
        return statearr_12868;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___12870, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__12902 = arguments.length;
  switch(G__12902) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__12905 = arguments.length;
  switch(G__12905) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__12908 = arguments.length;
  switch(G__12908) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__6569__auto___12978 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___12978, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___12978, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_12947) {
            var state_val_12948 = state_12947[1];
            if (state_val_12948 === 7) {
              var state_12947__$1 = state_12947;
              var statearr_12949_12979 = state_12947__$1;
              statearr_12949_12979[2] = null;
              statearr_12949_12979[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12948 === 1) {
                var state_12947__$1 = state_12947;
                var statearr_12950_12980 = state_12947__$1;
                statearr_12950_12980[2] = null;
                statearr_12950_12980[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12948 === 4) {
                  var inst_12911 = state_12947[7];
                  var inst_12913 = inst_12911 < cnt;
                  var state_12947__$1 = state_12947;
                  if (cljs.core.truth_(inst_12913)) {
                    var statearr_12951_12981 = state_12947__$1;
                    statearr_12951_12981[1] = 6;
                  } else {
                    var statearr_12952_12982 = state_12947__$1;
                    statearr_12952_12982[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12948 === 15) {
                    var inst_12943 = state_12947[2];
                    var state_12947__$1 = state_12947;
                    var statearr_12953_12983 = state_12947__$1;
                    statearr_12953_12983[2] = inst_12943;
                    statearr_12953_12983[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12948 === 13) {
                      var inst_12936 = cljs.core.async.close_BANG_.call(null, out);
                      var state_12947__$1 = state_12947;
                      var statearr_12954_12984 = state_12947__$1;
                      statearr_12954_12984[2] = inst_12936;
                      statearr_12954_12984[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12948 === 6) {
                        var state_12947__$1 = state_12947;
                        var statearr_12955_12985 = state_12947__$1;
                        statearr_12955_12985[2] = null;
                        statearr_12955_12985[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12948 === 3) {
                          var inst_12945 = state_12947[2];
                          var state_12947__$1 = state_12947;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12947__$1, inst_12945);
                        } else {
                          if (state_val_12948 === 12) {
                            var inst_12933 = state_12947[8];
                            var inst_12933__$1 = state_12947[2];
                            var inst_12934 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_12933__$1);
                            var state_12947__$1 = function() {
                              var statearr_12956 = state_12947;
                              statearr_12956[8] = inst_12933__$1;
                              return statearr_12956;
                            }();
                            if (cljs.core.truth_(inst_12934)) {
                              var statearr_12957_12986 = state_12947__$1;
                              statearr_12957_12986[1] = 13;
                            } else {
                              var statearr_12958_12987 = state_12947__$1;
                              statearr_12958_12987[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12948 === 2) {
                              var inst_12910 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_12911 = 0;
                              var state_12947__$1 = function() {
                                var statearr_12959 = state_12947;
                                statearr_12959[7] = inst_12911;
                                statearr_12959[9] = inst_12910;
                                return statearr_12959;
                              }();
                              var statearr_12960_12988 = state_12947__$1;
                              statearr_12960_12988[2] = null;
                              statearr_12960_12988[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12948 === 11) {
                                var inst_12911 = state_12947[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_12947, 10, Object, null, 9);
                                var inst_12920 = chs__$1.call(null, inst_12911);
                                var inst_12921 = done.call(null, inst_12911);
                                var inst_12922 = cljs.core.async.take_BANG_.call(null, inst_12920, inst_12921);
                                var state_12947__$1 = state_12947;
                                var statearr_12961_12989 = state_12947__$1;
                                statearr_12961_12989[2] = inst_12922;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12947__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12948 === 9) {
                                  var inst_12911 = state_12947[7];
                                  var inst_12924 = state_12947[2];
                                  var inst_12925 = inst_12911 + 1;
                                  var inst_12911__$1 = inst_12925;
                                  var state_12947__$1 = function() {
                                    var statearr_12962 = state_12947;
                                    statearr_12962[7] = inst_12911__$1;
                                    statearr_12962[10] = inst_12924;
                                    return statearr_12962;
                                  }();
                                  var statearr_12963_12990 = state_12947__$1;
                                  statearr_12963_12990[2] = null;
                                  statearr_12963_12990[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12948 === 5) {
                                    var inst_12931 = state_12947[2];
                                    var state_12947__$1 = function() {
                                      var statearr_12964 = state_12947;
                                      statearr_12964[11] = inst_12931;
                                      return statearr_12964;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12947__$1, 12, dchan);
                                  } else {
                                    if (state_val_12948 === 14) {
                                      var inst_12933 = state_12947[8];
                                      var inst_12938 = cljs.core.apply.call(null, f, inst_12933);
                                      var state_12947__$1 = state_12947;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12947__$1, 16, out, inst_12938);
                                    } else {
                                      if (state_val_12948 === 16) {
                                        var inst_12940 = state_12947[2];
                                        var state_12947__$1 = function() {
                                          var statearr_12965 = state_12947;
                                          statearr_12965[12] = inst_12940;
                                          return statearr_12965;
                                        }();
                                        var statearr_12966_12991 = state_12947__$1;
                                        statearr_12966_12991[2] = null;
                                        statearr_12966_12991[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12948 === 10) {
                                          var inst_12915 = state_12947[2];
                                          var inst_12916 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_12947__$1 = function() {
                                            var statearr_12967 = state_12947;
                                            statearr_12967[13] = inst_12915;
                                            return statearr_12967;
                                          }();
                                          var statearr_12968_12992 = state_12947__$1;
                                          statearr_12968_12992[2] = inst_12916;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12947__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12948 === 8) {
                                            var inst_12929 = state_12947[2];
                                            var state_12947__$1 = state_12947;
                                            var statearr_12969_12993 = state_12947__$1;
                                            statearr_12969_12993[2] = inst_12929;
                                            statearr_12969_12993[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___12978, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__6548__auto__, c__6569__auto___12978, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_12973 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12973[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_12973[1] = 1;
              return statearr_12973;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_12947) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_12947);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e12974) {
                    if (e12974 instanceof Object) {
                      var ex__6552__auto__ = e12974;
                      var statearr_12975_12994 = state_12947;
                      statearr_12975_12994[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12947);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12974;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12995 = state_12947;
                  state_12947 = G__12995;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_12947) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_12947);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___12978, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__6571__auto__ = function() {
        var statearr_12976 = f__6570__auto__.call(null);
        statearr_12976[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___12978;
        return statearr_12976;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___12978, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__12998 = arguments.length;
  switch(G__12998) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__6569__auto___13053 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___13053, out) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___13053, out) {
          return function(state_13028) {
            var state_val_13029 = state_13028[1];
            if (state_val_13029 === 7) {
              var inst_13007 = state_13028[7];
              var inst_13008 = state_13028[8];
              var inst_13007__$1 = state_13028[2];
              var inst_13008__$1 = cljs.core.nth.call(null, inst_13007__$1, 0, null);
              var inst_13009 = cljs.core.nth.call(null, inst_13007__$1, 1, null);
              var inst_13010 = inst_13008__$1 == null;
              var state_13028__$1 = function() {
                var statearr_13030 = state_13028;
                statearr_13030[7] = inst_13007__$1;
                statearr_13030[9] = inst_13009;
                statearr_13030[8] = inst_13008__$1;
                return statearr_13030;
              }();
              if (cljs.core.truth_(inst_13010)) {
                var statearr_13031_13054 = state_13028__$1;
                statearr_13031_13054[1] = 8;
              } else {
                var statearr_13032_13055 = state_13028__$1;
                statearr_13032_13055[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13029 === 1) {
                var inst_12999 = cljs.core.vec.call(null, chs);
                var inst_13000 = inst_12999;
                var state_13028__$1 = function() {
                  var statearr_13033 = state_13028;
                  statearr_13033[10] = inst_13000;
                  return statearr_13033;
                }();
                var statearr_13034_13056 = state_13028__$1;
                statearr_13034_13056[2] = null;
                statearr_13034_13056[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13029 === 4) {
                  var inst_13000 = state_13028[10];
                  var state_13028__$1 = state_13028;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_13028__$1, 7, inst_13000);
                } else {
                  if (state_val_13029 === 6) {
                    var inst_13024 = state_13028[2];
                    var state_13028__$1 = state_13028;
                    var statearr_13035_13057 = state_13028__$1;
                    statearr_13035_13057[2] = inst_13024;
                    statearr_13035_13057[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13029 === 3) {
                      var inst_13026 = state_13028[2];
                      var state_13028__$1 = state_13028;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13028__$1, inst_13026);
                    } else {
                      if (state_val_13029 === 2) {
                        var inst_13000 = state_13028[10];
                        var inst_13002 = cljs.core.count.call(null, inst_13000);
                        var inst_13003 = inst_13002 > 0;
                        var state_13028__$1 = state_13028;
                        if (cljs.core.truth_(inst_13003)) {
                          var statearr_13037_13058 = state_13028__$1;
                          statearr_13037_13058[1] = 4;
                        } else {
                          var statearr_13038_13059 = state_13028__$1;
                          statearr_13038_13059[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13029 === 11) {
                          var inst_13000 = state_13028[10];
                          var inst_13017 = state_13028[2];
                          var tmp13036 = inst_13000;
                          var inst_13000__$1 = tmp13036;
                          var state_13028__$1 = function() {
                            var statearr_13039 = state_13028;
                            statearr_13039[10] = inst_13000__$1;
                            statearr_13039[11] = inst_13017;
                            return statearr_13039;
                          }();
                          var statearr_13040_13060 = state_13028__$1;
                          statearr_13040_13060[2] = null;
                          statearr_13040_13060[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13029 === 9) {
                            var inst_13008 = state_13028[8];
                            var state_13028__$1 = state_13028;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13028__$1, 11, out, inst_13008);
                          } else {
                            if (state_val_13029 === 5) {
                              var inst_13022 = cljs.core.async.close_BANG_.call(null, out);
                              var state_13028__$1 = state_13028;
                              var statearr_13041_13061 = state_13028__$1;
                              statearr_13041_13061[2] = inst_13022;
                              statearr_13041_13061[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13029 === 10) {
                                var inst_13020 = state_13028[2];
                                var state_13028__$1 = state_13028;
                                var statearr_13042_13062 = state_13028__$1;
                                statearr_13042_13062[2] = inst_13020;
                                statearr_13042_13062[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13029 === 8) {
                                  var inst_13007 = state_13028[7];
                                  var inst_13000 = state_13028[10];
                                  var inst_13009 = state_13028[9];
                                  var inst_13008 = state_13028[8];
                                  var inst_13012 = function() {
                                    var c = inst_13009;
                                    var v = inst_13008;
                                    var vec__13005 = inst_13007;
                                    var cs = inst_13000;
                                    return function(c, v, vec__13005, cs, inst_13007, inst_13000, inst_13009, inst_13008, state_val_13029, c__6569__auto___13053, out) {
                                      return function(p1__12996_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__12996_SHARP_);
                                      };
                                    }(c, v, vec__13005, cs, inst_13007, inst_13000, inst_13009, inst_13008, state_val_13029, c__6569__auto___13053, out);
                                  }();
                                  var inst_13013 = cljs.core.filterv.call(null, inst_13012, inst_13000);
                                  var inst_13000__$1 = inst_13013;
                                  var state_13028__$1 = function() {
                                    var statearr_13043 = state_13028;
                                    statearr_13043[10] = inst_13000__$1;
                                    return statearr_13043;
                                  }();
                                  var statearr_13044_13063 = state_13028__$1;
                                  statearr_13044_13063[2] = null;
                                  statearr_13044_13063[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___13053, out);
        return function(switch__6548__auto__, c__6569__auto___13053, out) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_13048 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13048[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_13048[1] = 1;
              return statearr_13048;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_13028) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13028);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13049) {
                    if (e13049 instanceof Object) {
                      var ex__6552__auto__ = e13049;
                      var statearr_13050_13064 = state_13028;
                      statearr_13050_13064[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13028);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13049;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13065 = state_13028;
                  state_13028 = G__13065;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_13028) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_13028);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___13053, out);
      }();
      var state__6571__auto__ = function() {
        var statearr_13051 = f__6570__auto__.call(null);
        statearr_13051[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___13053;
        return statearr_13051;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___13053, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__13067 = arguments.length;
  switch(G__13067) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__6569__auto___13115 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___13115, out) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___13115, out) {
          return function(state_13091) {
            var state_val_13092 = state_13091[1];
            if (state_val_13092 === 7) {
              var inst_13073 = state_13091[7];
              var inst_13073__$1 = state_13091[2];
              var inst_13074 = inst_13073__$1 == null;
              var inst_13075 = cljs.core.not.call(null, inst_13074);
              var state_13091__$1 = function() {
                var statearr_13093 = state_13091;
                statearr_13093[7] = inst_13073__$1;
                return statearr_13093;
              }();
              if (inst_13075) {
                var statearr_13094_13116 = state_13091__$1;
                statearr_13094_13116[1] = 8;
              } else {
                var statearr_13095_13117 = state_13091__$1;
                statearr_13095_13117[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13092 === 1) {
                var inst_13068 = 0;
                var state_13091__$1 = function() {
                  var statearr_13096 = state_13091;
                  statearr_13096[8] = inst_13068;
                  return statearr_13096;
                }();
                var statearr_13097_13118 = state_13091__$1;
                statearr_13097_13118[2] = null;
                statearr_13097_13118[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13092 === 4) {
                  var state_13091__$1 = state_13091;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13091__$1, 7, ch);
                } else {
                  if (state_val_13092 === 6) {
                    var inst_13086 = state_13091[2];
                    var state_13091__$1 = state_13091;
                    var statearr_13098_13119 = state_13091__$1;
                    statearr_13098_13119[2] = inst_13086;
                    statearr_13098_13119[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13092 === 3) {
                      var inst_13088 = state_13091[2];
                      var inst_13089 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13091__$1 = function() {
                        var statearr_13099 = state_13091;
                        statearr_13099[9] = inst_13088;
                        return statearr_13099;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13091__$1, inst_13089);
                    } else {
                      if (state_val_13092 === 2) {
                        var inst_13068 = state_13091[8];
                        var inst_13070 = inst_13068 < n;
                        var state_13091__$1 = state_13091;
                        if (cljs.core.truth_(inst_13070)) {
                          var statearr_13100_13120 = state_13091__$1;
                          statearr_13100_13120[1] = 4;
                        } else {
                          var statearr_13101_13121 = state_13091__$1;
                          statearr_13101_13121[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13092 === 11) {
                          var inst_13068 = state_13091[8];
                          var inst_13078 = state_13091[2];
                          var inst_13079 = inst_13068 + 1;
                          var inst_13068__$1 = inst_13079;
                          var state_13091__$1 = function() {
                            var statearr_13102 = state_13091;
                            statearr_13102[10] = inst_13078;
                            statearr_13102[8] = inst_13068__$1;
                            return statearr_13102;
                          }();
                          var statearr_13103_13122 = state_13091__$1;
                          statearr_13103_13122[2] = null;
                          statearr_13103_13122[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13092 === 9) {
                            var state_13091__$1 = state_13091;
                            var statearr_13104_13123 = state_13091__$1;
                            statearr_13104_13123[2] = null;
                            statearr_13104_13123[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13092 === 5) {
                              var state_13091__$1 = state_13091;
                              var statearr_13105_13124 = state_13091__$1;
                              statearr_13105_13124[2] = null;
                              statearr_13105_13124[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13092 === 10) {
                                var inst_13083 = state_13091[2];
                                var state_13091__$1 = state_13091;
                                var statearr_13106_13125 = state_13091__$1;
                                statearr_13106_13125[2] = inst_13083;
                                statearr_13106_13125[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13092 === 8) {
                                  var inst_13073 = state_13091[7];
                                  var state_13091__$1 = state_13091;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13091__$1, 11, out, inst_13073);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___13115, out);
        return function(switch__6548__auto__, c__6569__auto___13115, out) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_13110 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13110[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_13110[1] = 1;
              return statearr_13110;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_13091) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13091);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13111) {
                    if (e13111 instanceof Object) {
                      var ex__6552__auto__ = e13111;
                      var statearr_13112_13126 = state_13091;
                      statearr_13112_13126[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13091);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13111;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13127 = state_13091;
                  state_13091 = G__13127;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_13091) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_13091);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___13115, out);
      }();
      var state__6571__auto__ = function() {
        var statearr_13113 = f__6570__auto__.call(null);
        statearr_13113[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___13115;
        return statearr_13113;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___13115, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t13135 !== "undefined") {
  } else {
    cljs.core.async.t13135 = function(ch, f, map_LT_, meta13136) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta13136 = meta13136;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t13138 !== "undefined") {
        } else {
          cljs.core.async.t13138 = function(fn1, _, meta13136, map_LT_, f, ch, meta13139) {
            this.fn1 = fn1;
            this._ = _;
            this.meta13136 = meta13136;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta13139 = meta13139;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t13138.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t13138.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t13138.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__13128_SHARP_) {
                  return f1.call(null, p1__13128_SHARP_ == null ? null : self__.f.call(null, p1__13128_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t13138.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_13140) {
              var self__ = this;
              var _13140__$1 = this;
              return self__.meta13139;
            };
          }(___$1);
          cljs.core.async.t13138.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_13140, meta13139__$1) {
              var self__ = this;
              var _13140__$1 = this;
              return new cljs.core.async.t13138(self__.fn1, self__._, self__.meta13136, self__.map_LT_, self__.f, self__.ch, meta13139__$1);
            };
          }(___$1);
          cljs.core.async.t13138.cljs$lang$type = true;
          cljs.core.async.t13138.cljs$lang$ctorStr = "cljs.core.async/t13138";
          cljs.core.async.t13138.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
              return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t13138");
            };
          }(___$1);
          cljs.core.async.__GT_t13138 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t13138(fn1__$1, ___$2, meta13136__$1, map_LT___$1, f__$1, ch__$1, meta13139) {
              return new cljs.core.async.t13138(fn1__$1, ___$2, meta13136__$1, map_LT___$1, f__$1, ch__$1, meta13139);
            };
          }(___$1);
        }
        return new cljs.core.async.t13138(fn1, ___$1, self__.meta13136, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = ret;
        if (cljs.core.truth_(and__4262__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4262__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t13135.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t13135.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13137) {
      var self__ = this;
      var _13137__$1 = this;
      return self__.meta13136;
    };
    cljs.core.async.t13135.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13137, meta13136__$1) {
      var self__ = this;
      var _13137__$1 = this;
      return new cljs.core.async.t13135(self__.ch, self__.f, self__.map_LT_, meta13136__$1);
    };
    cljs.core.async.t13135.cljs$lang$type = true;
    cljs.core.async.t13135.cljs$lang$ctorStr = "cljs.core.async/t13135";
    cljs.core.async.t13135.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t13135");
    };
    cljs.core.async.__GT_t13135 = function cljs$core$async$map_LT__$___GT_t13135(ch__$1, f__$1, map_LT___$1, meta13136) {
      return new cljs.core.async.t13135(ch__$1, f__$1, map_LT___$1, meta13136);
    };
  }
  return new cljs.core.async.t13135(ch, f, cljs$core$async$map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t13144 !== "undefined") {
  } else {
    cljs.core.async.t13144 = function(ch, f, map_GT_, meta13145) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta13145 = meta13145;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t13144.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t13144.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t13144.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t13144.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t13144.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t13144.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t13144.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13146) {
      var self__ = this;
      var _13146__$1 = this;
      return self__.meta13145;
    };
    cljs.core.async.t13144.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13146, meta13145__$1) {
      var self__ = this;
      var _13146__$1 = this;
      return new cljs.core.async.t13144(self__.ch, self__.f, self__.map_GT_, meta13145__$1);
    };
    cljs.core.async.t13144.cljs$lang$type = true;
    cljs.core.async.t13144.cljs$lang$ctorStr = "cljs.core.async/t13144";
    cljs.core.async.t13144.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t13144");
    };
    cljs.core.async.__GT_t13144 = function cljs$core$async$map_GT__$___GT_t13144(ch__$1, f__$1, map_GT___$1, meta13145) {
      return new cljs.core.async.t13144(ch__$1, f__$1, map_GT___$1, meta13145);
    };
  }
  return new cljs.core.async.t13144(ch, f, cljs$core$async$map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t13150 !== "undefined") {
  } else {
    cljs.core.async.t13150 = function(ch, p, filter_GT_, meta13151) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta13151 = meta13151;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t13150.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t13150.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13152) {
      var self__ = this;
      var _13152__$1 = this;
      return self__.meta13151;
    };
    cljs.core.async.t13150.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13152, meta13151__$1) {
      var self__ = this;
      var _13152__$1 = this;
      return new cljs.core.async.t13150(self__.ch, self__.p, self__.filter_GT_, meta13151__$1);
    };
    cljs.core.async.t13150.cljs$lang$type = true;
    cljs.core.async.t13150.cljs$lang$ctorStr = "cljs.core.async/t13150";
    cljs.core.async.t13150.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cljs.core.async/t13150");
    };
    cljs.core.async.__GT_t13150 = function cljs$core$async$filter_GT__$___GT_t13150(ch__$1, p__$1, filter_GT___$1, meta13151) {
      return new cljs.core.async.t13150(ch__$1, p__$1, filter_GT___$1, meta13151);
    };
  }
  return new cljs.core.async.t13150(ch, p, cljs$core$async$filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__13154 = arguments.length;
  switch(G__13154) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__6569__auto___13197 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___13197, out) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___13197, out) {
          return function(state_13175) {
            var state_val_13176 = state_13175[1];
            if (state_val_13176 === 7) {
              var inst_13171 = state_13175[2];
              var state_13175__$1 = state_13175;
              var statearr_13177_13198 = state_13175__$1;
              statearr_13177_13198[2] = inst_13171;
              statearr_13177_13198[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13176 === 1) {
                var state_13175__$1 = state_13175;
                var statearr_13178_13199 = state_13175__$1;
                statearr_13178_13199[2] = null;
                statearr_13178_13199[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13176 === 4) {
                  var inst_13157 = state_13175[7];
                  var inst_13157__$1 = state_13175[2];
                  var inst_13158 = inst_13157__$1 == null;
                  var state_13175__$1 = function() {
                    var statearr_13179 = state_13175;
                    statearr_13179[7] = inst_13157__$1;
                    return statearr_13179;
                  }();
                  if (cljs.core.truth_(inst_13158)) {
                    var statearr_13180_13200 = state_13175__$1;
                    statearr_13180_13200[1] = 5;
                  } else {
                    var statearr_13181_13201 = state_13175__$1;
                    statearr_13181_13201[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13176 === 6) {
                    var inst_13157 = state_13175[7];
                    var inst_13162 = p.call(null, inst_13157);
                    var state_13175__$1 = state_13175;
                    if (cljs.core.truth_(inst_13162)) {
                      var statearr_13182_13202 = state_13175__$1;
                      statearr_13182_13202[1] = 8;
                    } else {
                      var statearr_13183_13203 = state_13175__$1;
                      statearr_13183_13203[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13176 === 3) {
                      var inst_13173 = state_13175[2];
                      var state_13175__$1 = state_13175;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13175__$1, inst_13173);
                    } else {
                      if (state_val_13176 === 2) {
                        var state_13175__$1 = state_13175;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13175__$1, 4, ch);
                      } else {
                        if (state_val_13176 === 11) {
                          var inst_13165 = state_13175[2];
                          var state_13175__$1 = state_13175;
                          var statearr_13184_13204 = state_13175__$1;
                          statearr_13184_13204[2] = inst_13165;
                          statearr_13184_13204[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13176 === 9) {
                            var state_13175__$1 = state_13175;
                            var statearr_13185_13205 = state_13175__$1;
                            statearr_13185_13205[2] = null;
                            statearr_13185_13205[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13176 === 5) {
                              var inst_13160 = cljs.core.async.close_BANG_.call(null, out);
                              var state_13175__$1 = state_13175;
                              var statearr_13186_13206 = state_13175__$1;
                              statearr_13186_13206[2] = inst_13160;
                              statearr_13186_13206[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13176 === 10) {
                                var inst_13168 = state_13175[2];
                                var state_13175__$1 = function() {
                                  var statearr_13187 = state_13175;
                                  statearr_13187[8] = inst_13168;
                                  return statearr_13187;
                                }();
                                var statearr_13188_13207 = state_13175__$1;
                                statearr_13188_13207[2] = null;
                                statearr_13188_13207[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13176 === 8) {
                                  var inst_13157 = state_13175[7];
                                  var state_13175__$1 = state_13175;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13175__$1, 11, out, inst_13157);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___13197, out);
        return function(switch__6548__auto__, c__6569__auto___13197, out) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_13192 = [null, null, null, null, null, null, null, null, null];
              statearr_13192[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_13192[1] = 1;
              return statearr_13192;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_13175) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13175);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13193) {
                    if (e13193 instanceof Object) {
                      var ex__6552__auto__ = e13193;
                      var statearr_13194_13208 = state_13175;
                      statearr_13194_13208[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13175);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13193;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13209 = state_13175;
                  state_13175 = G__13209;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_13175) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_13175);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___13197, out);
      }();
      var state__6571__auto__ = function() {
        var statearr_13195 = f__6570__auto__.call(null);
        statearr_13195[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___13197;
        return statearr_13195;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___13197, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__13211 = arguments.length;
  switch(G__13211) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__6569__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto__) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto__) {
          return function(state_13378) {
            var state_val_13379 = state_13378[1];
            if (state_val_13379 === 7) {
              var inst_13374 = state_13378[2];
              var state_13378__$1 = state_13378;
              var statearr_13380_13421 = state_13378__$1;
              statearr_13380_13421[2] = inst_13374;
              statearr_13380_13421[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13379 === 20) {
                var inst_13344 = state_13378[7];
                var inst_13355 = state_13378[2];
                var inst_13356 = cljs.core.next.call(null, inst_13344);
                var inst_13330 = inst_13356;
                var inst_13331 = null;
                var inst_13332 = 0;
                var inst_13333 = 0;
                var state_13378__$1 = function() {
                  var statearr_13381 = state_13378;
                  statearr_13381[8] = inst_13333;
                  statearr_13381[9] = inst_13332;
                  statearr_13381[10] = inst_13331;
                  statearr_13381[11] = inst_13330;
                  statearr_13381[12] = inst_13355;
                  return statearr_13381;
                }();
                var statearr_13382_13422 = state_13378__$1;
                statearr_13382_13422[2] = null;
                statearr_13382_13422[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13379 === 1) {
                  var state_13378__$1 = state_13378;
                  var statearr_13383_13423 = state_13378__$1;
                  statearr_13383_13423[2] = null;
                  statearr_13383_13423[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13379 === 4) {
                    var inst_13319 = state_13378[13];
                    var inst_13319__$1 = state_13378[2];
                    var inst_13320 = inst_13319__$1 == null;
                    var state_13378__$1 = function() {
                      var statearr_13384 = state_13378;
                      statearr_13384[13] = inst_13319__$1;
                      return statearr_13384;
                    }();
                    if (cljs.core.truth_(inst_13320)) {
                      var statearr_13385_13424 = state_13378__$1;
                      statearr_13385_13424[1] = 5;
                    } else {
                      var statearr_13386_13425 = state_13378__$1;
                      statearr_13386_13425[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13379 === 15) {
                      var state_13378__$1 = state_13378;
                      var statearr_13390_13426 = state_13378__$1;
                      statearr_13390_13426[2] = null;
                      statearr_13390_13426[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13379 === 21) {
                        var state_13378__$1 = state_13378;
                        var statearr_13391_13427 = state_13378__$1;
                        statearr_13391_13427[2] = null;
                        statearr_13391_13427[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13379 === 13) {
                          var inst_13333 = state_13378[8];
                          var inst_13332 = state_13378[9];
                          var inst_13331 = state_13378[10];
                          var inst_13330 = state_13378[11];
                          var inst_13340 = state_13378[2];
                          var inst_13341 = inst_13333 + 1;
                          var tmp13387 = inst_13332;
                          var tmp13388 = inst_13331;
                          var tmp13389 = inst_13330;
                          var inst_13330__$1 = tmp13389;
                          var inst_13331__$1 = tmp13388;
                          var inst_13332__$1 = tmp13387;
                          var inst_13333__$1 = inst_13341;
                          var state_13378__$1 = function() {
                            var statearr_13392 = state_13378;
                            statearr_13392[14] = inst_13340;
                            statearr_13392[8] = inst_13333__$1;
                            statearr_13392[9] = inst_13332__$1;
                            statearr_13392[10] = inst_13331__$1;
                            statearr_13392[11] = inst_13330__$1;
                            return statearr_13392;
                          }();
                          var statearr_13393_13428 = state_13378__$1;
                          statearr_13393_13428[2] = null;
                          statearr_13393_13428[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13379 === 22) {
                            var state_13378__$1 = state_13378;
                            var statearr_13394_13429 = state_13378__$1;
                            statearr_13394_13429[2] = null;
                            statearr_13394_13429[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13379 === 6) {
                              var inst_13319 = state_13378[13];
                              var inst_13328 = f.call(null, inst_13319);
                              var inst_13329 = cljs.core.seq.call(null, inst_13328);
                              var inst_13330 = inst_13329;
                              var inst_13331 = null;
                              var inst_13332 = 0;
                              var inst_13333 = 0;
                              var state_13378__$1 = function() {
                                var statearr_13395 = state_13378;
                                statearr_13395[8] = inst_13333;
                                statearr_13395[9] = inst_13332;
                                statearr_13395[10] = inst_13331;
                                statearr_13395[11] = inst_13330;
                                return statearr_13395;
                              }();
                              var statearr_13396_13430 = state_13378__$1;
                              statearr_13396_13430[2] = null;
                              statearr_13396_13430[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13379 === 17) {
                                var inst_13344 = state_13378[7];
                                var inst_13348 = cljs.core.chunk_first.call(null, inst_13344);
                                var inst_13349 = cljs.core.chunk_rest.call(null, inst_13344);
                                var inst_13350 = cljs.core.count.call(null, inst_13348);
                                var inst_13330 = inst_13349;
                                var inst_13331 = inst_13348;
                                var inst_13332 = inst_13350;
                                var inst_13333 = 0;
                                var state_13378__$1 = function() {
                                  var statearr_13397 = state_13378;
                                  statearr_13397[8] = inst_13333;
                                  statearr_13397[9] = inst_13332;
                                  statearr_13397[10] = inst_13331;
                                  statearr_13397[11] = inst_13330;
                                  return statearr_13397;
                                }();
                                var statearr_13398_13431 = state_13378__$1;
                                statearr_13398_13431[2] = null;
                                statearr_13398_13431[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13379 === 3) {
                                  var inst_13376 = state_13378[2];
                                  var state_13378__$1 = state_13378;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13378__$1, inst_13376);
                                } else {
                                  if (state_val_13379 === 12) {
                                    var inst_13364 = state_13378[2];
                                    var state_13378__$1 = state_13378;
                                    var statearr_13399_13432 = state_13378__$1;
                                    statearr_13399_13432[2] = inst_13364;
                                    statearr_13399_13432[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13379 === 2) {
                                      var state_13378__$1 = state_13378;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13378__$1, 4, in$);
                                    } else {
                                      if (state_val_13379 === 23) {
                                        var inst_13372 = state_13378[2];
                                        var state_13378__$1 = state_13378;
                                        var statearr_13400_13433 = state_13378__$1;
                                        statearr_13400_13433[2] = inst_13372;
                                        statearr_13400_13433[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13379 === 19) {
                                          var inst_13359 = state_13378[2];
                                          var state_13378__$1 = state_13378;
                                          var statearr_13401_13434 = state_13378__$1;
                                          statearr_13401_13434[2] = inst_13359;
                                          statearr_13401_13434[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13379 === 11) {
                                            var inst_13344 = state_13378[7];
                                            var inst_13330 = state_13378[11];
                                            var inst_13344__$1 = cljs.core.seq.call(null, inst_13330);
                                            var state_13378__$1 = function() {
                                              var statearr_13402 = state_13378;
                                              statearr_13402[7] = inst_13344__$1;
                                              return statearr_13402;
                                            }();
                                            if (inst_13344__$1) {
                                              var statearr_13403_13435 = state_13378__$1;
                                              statearr_13403_13435[1] = 14;
                                            } else {
                                              var statearr_13404_13436 = state_13378__$1;
                                              statearr_13404_13436[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13379 === 9) {
                                              var inst_13366 = state_13378[2];
                                              var inst_13367 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_13378__$1 = function() {
                                                var statearr_13405 = state_13378;
                                                statearr_13405[15] = inst_13366;
                                                return statearr_13405;
                                              }();
                                              if (cljs.core.truth_(inst_13367)) {
                                                var statearr_13406_13437 = state_13378__$1;
                                                statearr_13406_13437[1] = 21;
                                              } else {
                                                var statearr_13407_13438 = state_13378__$1;
                                                statearr_13407_13438[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13379 === 5) {
                                                var inst_13322 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_13378__$1 = state_13378;
                                                var statearr_13408_13439 = state_13378__$1;
                                                statearr_13408_13439[2] = inst_13322;
                                                statearr_13408_13439[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13379 === 14) {
                                                  var inst_13344 = state_13378[7];
                                                  var inst_13346 = cljs.core.chunked_seq_QMARK_.call(null, inst_13344);
                                                  var state_13378__$1 = state_13378;
                                                  if (inst_13346) {
                                                    var statearr_13409_13440 = state_13378__$1;
                                                    statearr_13409_13440[1] = 17;
                                                  } else {
                                                    var statearr_13410_13441 = state_13378__$1;
                                                    statearr_13410_13441[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13379 === 16) {
                                                    var inst_13362 = state_13378[2];
                                                    var state_13378__$1 = state_13378;
                                                    var statearr_13411_13442 = state_13378__$1;
                                                    statearr_13411_13442[2] = inst_13362;
                                                    statearr_13411_13442[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13379 === 10) {
                                                      var inst_13333 = state_13378[8];
                                                      var inst_13331 = state_13378[10];
                                                      var inst_13338 = cljs.core._nth.call(null, inst_13331, inst_13333);
                                                      var state_13378__$1 = state_13378;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13378__$1, 13, out, inst_13338);
                                                    } else {
                                                      if (state_val_13379 === 18) {
                                                        var inst_13344 = state_13378[7];
                                                        var inst_13353 = cljs.core.first.call(null, inst_13344);
                                                        var state_13378__$1 = state_13378;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13378__$1, 20, out, inst_13353);
                                                      } else {
                                                        if (state_val_13379 === 8) {
                                                          var inst_13333 = state_13378[8];
                                                          var inst_13332 = state_13378[9];
                                                          var inst_13335 = inst_13333 < inst_13332;
                                                          var inst_13336 = inst_13335;
                                                          var state_13378__$1 = state_13378;
                                                          if (cljs.core.truth_(inst_13336)) {
                                                            var statearr_13412_13443 = state_13378__$1;
                                                            statearr_13412_13443[1] = 10;
                                                          } else {
                                                            var statearr_13413_13444 = state_13378__$1;
                                                            statearr_13413_13444[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto__);
        return function(switch__6548__auto__, c__6569__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__6549__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__6549__auto____0 = function() {
              var statearr_13417 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13417[0] = cljs$core$async$mapcat_STAR__$_state_machine__6549__auto__;
              statearr_13417[1] = 1;
              return statearr_13417;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__6549__auto____1 = function(state_13378) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13378);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13418) {
                    if (e13418 instanceof Object) {
                      var ex__6552__auto__ = e13418;
                      var statearr_13419_13445 = state_13378;
                      statearr_13419_13445[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13378);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13418;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13446 = state_13378;
                  state_13378 = G__13446;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__6549__auto__ = function(state_13378) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__6549__auto____1.call(this, state_13378);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__6549__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__6549__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto__);
      }();
      var state__6571__auto__ = function() {
        var statearr_13420 = f__6570__auto__.call(null);
        statearr_13420[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto__;
        return statearr_13420;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto__));
  return c__6569__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__13448 = arguments.length;
  switch(G__13448) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__13451 = arguments.length;
  switch(G__13451) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__13454 = arguments.length;
  switch(G__13454) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__6569__auto___13504 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___13504, out) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___13504, out) {
          return function(state_13478) {
            var state_val_13479 = state_13478[1];
            if (state_val_13479 === 7) {
              var inst_13473 = state_13478[2];
              var state_13478__$1 = state_13478;
              var statearr_13480_13505 = state_13478__$1;
              statearr_13480_13505[2] = inst_13473;
              statearr_13480_13505[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13479 === 1) {
                var inst_13455 = null;
                var state_13478__$1 = function() {
                  var statearr_13481 = state_13478;
                  statearr_13481[7] = inst_13455;
                  return statearr_13481;
                }();
                var statearr_13482_13506 = state_13478__$1;
                statearr_13482_13506[2] = null;
                statearr_13482_13506[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13479 === 4) {
                  var inst_13458 = state_13478[8];
                  var inst_13458__$1 = state_13478[2];
                  var inst_13459 = inst_13458__$1 == null;
                  var inst_13460 = cljs.core.not.call(null, inst_13459);
                  var state_13478__$1 = function() {
                    var statearr_13483 = state_13478;
                    statearr_13483[8] = inst_13458__$1;
                    return statearr_13483;
                  }();
                  if (inst_13460) {
                    var statearr_13484_13507 = state_13478__$1;
                    statearr_13484_13507[1] = 5;
                  } else {
                    var statearr_13485_13508 = state_13478__$1;
                    statearr_13485_13508[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13479 === 6) {
                    var state_13478__$1 = state_13478;
                    var statearr_13486_13509 = state_13478__$1;
                    statearr_13486_13509[2] = null;
                    statearr_13486_13509[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13479 === 3) {
                      var inst_13475 = state_13478[2];
                      var inst_13476 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13478__$1 = function() {
                        var statearr_13487 = state_13478;
                        statearr_13487[9] = inst_13475;
                        return statearr_13487;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13478__$1, inst_13476);
                    } else {
                      if (state_val_13479 === 2) {
                        var state_13478__$1 = state_13478;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13478__$1, 4, ch);
                      } else {
                        if (state_val_13479 === 11) {
                          var inst_13458 = state_13478[8];
                          var inst_13467 = state_13478[2];
                          var inst_13455 = inst_13458;
                          var state_13478__$1 = function() {
                            var statearr_13488 = state_13478;
                            statearr_13488[7] = inst_13455;
                            statearr_13488[10] = inst_13467;
                            return statearr_13488;
                          }();
                          var statearr_13489_13510 = state_13478__$1;
                          statearr_13489_13510[2] = null;
                          statearr_13489_13510[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13479 === 9) {
                            var inst_13458 = state_13478[8];
                            var state_13478__$1 = state_13478;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13478__$1, 11, out, inst_13458);
                          } else {
                            if (state_val_13479 === 5) {
                              var inst_13455 = state_13478[7];
                              var inst_13458 = state_13478[8];
                              var inst_13462 = cljs.core._EQ_.call(null, inst_13458, inst_13455);
                              var state_13478__$1 = state_13478;
                              if (inst_13462) {
                                var statearr_13491_13511 = state_13478__$1;
                                statearr_13491_13511[1] = 8;
                              } else {
                                var statearr_13492_13512 = state_13478__$1;
                                statearr_13492_13512[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13479 === 10) {
                                var inst_13470 = state_13478[2];
                                var state_13478__$1 = state_13478;
                                var statearr_13493_13513 = state_13478__$1;
                                statearr_13493_13513[2] = inst_13470;
                                statearr_13493_13513[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13479 === 8) {
                                  var inst_13455 = state_13478[7];
                                  var tmp13490 = inst_13455;
                                  var inst_13455__$1 = tmp13490;
                                  var state_13478__$1 = function() {
                                    var statearr_13494 = state_13478;
                                    statearr_13494[7] = inst_13455__$1;
                                    return statearr_13494;
                                  }();
                                  var statearr_13495_13514 = state_13478__$1;
                                  statearr_13495_13514[2] = null;
                                  statearr_13495_13514[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___13504, out);
        return function(switch__6548__auto__, c__6569__auto___13504, out) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_13499 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13499[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_13499[1] = 1;
              return statearr_13499;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_13478) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13478);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13500) {
                    if (e13500 instanceof Object) {
                      var ex__6552__auto__ = e13500;
                      var statearr_13501_13515 = state_13478;
                      statearr_13501_13515[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13478);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13500;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13516 = state_13478;
                  state_13478 = G__13516;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_13478) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_13478);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___13504, out);
      }();
      var state__6571__auto__ = function() {
        var statearr_13502 = f__6570__auto__.call(null);
        statearr_13502[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___13504;
        return statearr_13502;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___13504, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__13518 = arguments.length;
  switch(G__13518) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__6569__auto___13587 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___13587, out) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___13587, out) {
          return function(state_13556) {
            var state_val_13557 = state_13556[1];
            if (state_val_13557 === 7) {
              var inst_13552 = state_13556[2];
              var state_13556__$1 = state_13556;
              var statearr_13558_13588 = state_13556__$1;
              statearr_13558_13588[2] = inst_13552;
              statearr_13558_13588[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13557 === 1) {
                var inst_13519 = new Array(n);
                var inst_13520 = inst_13519;
                var inst_13521 = 0;
                var state_13556__$1 = function() {
                  var statearr_13559 = state_13556;
                  statearr_13559[7] = inst_13520;
                  statearr_13559[8] = inst_13521;
                  return statearr_13559;
                }();
                var statearr_13560_13589 = state_13556__$1;
                statearr_13560_13589[2] = null;
                statearr_13560_13589[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13557 === 4) {
                  var inst_13524 = state_13556[9];
                  var inst_13524__$1 = state_13556[2];
                  var inst_13525 = inst_13524__$1 == null;
                  var inst_13526 = cljs.core.not.call(null, inst_13525);
                  var state_13556__$1 = function() {
                    var statearr_13561 = state_13556;
                    statearr_13561[9] = inst_13524__$1;
                    return statearr_13561;
                  }();
                  if (inst_13526) {
                    var statearr_13562_13590 = state_13556__$1;
                    statearr_13562_13590[1] = 5;
                  } else {
                    var statearr_13563_13591 = state_13556__$1;
                    statearr_13563_13591[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13557 === 15) {
                    var inst_13546 = state_13556[2];
                    var state_13556__$1 = state_13556;
                    var statearr_13564_13592 = state_13556__$1;
                    statearr_13564_13592[2] = inst_13546;
                    statearr_13564_13592[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13557 === 13) {
                      var state_13556__$1 = state_13556;
                      var statearr_13565_13593 = state_13556__$1;
                      statearr_13565_13593[2] = null;
                      statearr_13565_13593[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13557 === 6) {
                        var inst_13521 = state_13556[8];
                        var inst_13542 = inst_13521 > 0;
                        var state_13556__$1 = state_13556;
                        if (cljs.core.truth_(inst_13542)) {
                          var statearr_13566_13594 = state_13556__$1;
                          statearr_13566_13594[1] = 12;
                        } else {
                          var statearr_13567_13595 = state_13556__$1;
                          statearr_13567_13595[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13557 === 3) {
                          var inst_13554 = state_13556[2];
                          var state_13556__$1 = state_13556;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13556__$1, inst_13554);
                        } else {
                          if (state_val_13557 === 12) {
                            var inst_13520 = state_13556[7];
                            var inst_13544 = cljs.core.vec.call(null, inst_13520);
                            var state_13556__$1 = state_13556;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13556__$1, 15, out, inst_13544);
                          } else {
                            if (state_val_13557 === 2) {
                              var state_13556__$1 = state_13556;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13556__$1, 4, ch);
                            } else {
                              if (state_val_13557 === 11) {
                                var inst_13536 = state_13556[2];
                                var inst_13537 = new Array(n);
                                var inst_13520 = inst_13537;
                                var inst_13521 = 0;
                                var state_13556__$1 = function() {
                                  var statearr_13568 = state_13556;
                                  statearr_13568[7] = inst_13520;
                                  statearr_13568[8] = inst_13521;
                                  statearr_13568[10] = inst_13536;
                                  return statearr_13568;
                                }();
                                var statearr_13569_13596 = state_13556__$1;
                                statearr_13569_13596[2] = null;
                                statearr_13569_13596[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13557 === 9) {
                                  var inst_13520 = state_13556[7];
                                  var inst_13534 = cljs.core.vec.call(null, inst_13520);
                                  var state_13556__$1 = state_13556;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13556__$1, 11, out, inst_13534);
                                } else {
                                  if (state_val_13557 === 5) {
                                    var inst_13524 = state_13556[9];
                                    var inst_13520 = state_13556[7];
                                    var inst_13521 = state_13556[8];
                                    var inst_13529 = state_13556[11];
                                    var inst_13528 = inst_13520[inst_13521] = inst_13524;
                                    var inst_13529__$1 = inst_13521 + 1;
                                    var inst_13530 = inst_13529__$1 < n;
                                    var state_13556__$1 = function() {
                                      var statearr_13570 = state_13556;
                                      statearr_13570[11] = inst_13529__$1;
                                      statearr_13570[12] = inst_13528;
                                      return statearr_13570;
                                    }();
                                    if (cljs.core.truth_(inst_13530)) {
                                      var statearr_13571_13597 = state_13556__$1;
                                      statearr_13571_13597[1] = 8;
                                    } else {
                                      var statearr_13572_13598 = state_13556__$1;
                                      statearr_13572_13598[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13557 === 14) {
                                      var inst_13549 = state_13556[2];
                                      var inst_13550 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_13556__$1 = function() {
                                        var statearr_13574 = state_13556;
                                        statearr_13574[13] = inst_13549;
                                        return statearr_13574;
                                      }();
                                      var statearr_13575_13599 = state_13556__$1;
                                      statearr_13575_13599[2] = inst_13550;
                                      statearr_13575_13599[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13557 === 10) {
                                        var inst_13540 = state_13556[2];
                                        var state_13556__$1 = state_13556;
                                        var statearr_13576_13600 = state_13556__$1;
                                        statearr_13576_13600[2] = inst_13540;
                                        statearr_13576_13600[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13557 === 8) {
                                          var inst_13520 = state_13556[7];
                                          var inst_13529 = state_13556[11];
                                          var tmp13573 = inst_13520;
                                          var inst_13520__$1 = tmp13573;
                                          var inst_13521 = inst_13529;
                                          var state_13556__$1 = function() {
                                            var statearr_13577 = state_13556;
                                            statearr_13577[7] = inst_13520__$1;
                                            statearr_13577[8] = inst_13521;
                                            return statearr_13577;
                                          }();
                                          var statearr_13578_13601 = state_13556__$1;
                                          statearr_13578_13601[2] = null;
                                          statearr_13578_13601[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___13587, out);
        return function(switch__6548__auto__, c__6569__auto___13587, out) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_13582 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13582[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_13582[1] = 1;
              return statearr_13582;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_13556) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13556);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13583) {
                    if (e13583 instanceof Object) {
                      var ex__6552__auto__ = e13583;
                      var statearr_13584_13602 = state_13556;
                      statearr_13584_13602[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13556);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13583;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13603 = state_13556;
                  state_13556 = G__13603;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_13556) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_13556);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___13587, out);
      }();
      var state__6571__auto__ = function() {
        var statearr_13585 = f__6570__auto__.call(null);
        statearr_13585[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___13587;
        return statearr_13585;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___13587, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__13605 = arguments.length;
  switch(G__13605) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__6569__auto___13678 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___13678, out) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto___13678, out) {
          return function(state_13647) {
            var state_val_13648 = state_13647[1];
            if (state_val_13648 === 7) {
              var inst_13643 = state_13647[2];
              var state_13647__$1 = state_13647;
              var statearr_13649_13679 = state_13647__$1;
              statearr_13649_13679[2] = inst_13643;
              statearr_13649_13679[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13648 === 1) {
                var inst_13606 = [];
                var inst_13607 = inst_13606;
                var inst_13608 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_13647__$1 = function() {
                  var statearr_13650 = state_13647;
                  statearr_13650[7] = inst_13607;
                  statearr_13650[8] = inst_13608;
                  return statearr_13650;
                }();
                var statearr_13651_13680 = state_13647__$1;
                statearr_13651_13680[2] = null;
                statearr_13651_13680[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13648 === 4) {
                  var inst_13611 = state_13647[9];
                  var inst_13611__$1 = state_13647[2];
                  var inst_13612 = inst_13611__$1 == null;
                  var inst_13613 = cljs.core.not.call(null, inst_13612);
                  var state_13647__$1 = function() {
                    var statearr_13652 = state_13647;
                    statearr_13652[9] = inst_13611__$1;
                    return statearr_13652;
                  }();
                  if (inst_13613) {
                    var statearr_13653_13681 = state_13647__$1;
                    statearr_13653_13681[1] = 5;
                  } else {
                    var statearr_13654_13682 = state_13647__$1;
                    statearr_13654_13682[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13648 === 15) {
                    var inst_13637 = state_13647[2];
                    var state_13647__$1 = state_13647;
                    var statearr_13655_13683 = state_13647__$1;
                    statearr_13655_13683[2] = inst_13637;
                    statearr_13655_13683[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13648 === 13) {
                      var state_13647__$1 = state_13647;
                      var statearr_13656_13684 = state_13647__$1;
                      statearr_13656_13684[2] = null;
                      statearr_13656_13684[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13648 === 6) {
                        var inst_13607 = state_13647[7];
                        var inst_13632 = inst_13607.length;
                        var inst_13633 = inst_13632 > 0;
                        var state_13647__$1 = state_13647;
                        if (cljs.core.truth_(inst_13633)) {
                          var statearr_13657_13685 = state_13647__$1;
                          statearr_13657_13685[1] = 12;
                        } else {
                          var statearr_13658_13686 = state_13647__$1;
                          statearr_13658_13686[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13648 === 3) {
                          var inst_13645 = state_13647[2];
                          var state_13647__$1 = state_13647;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13647__$1, inst_13645);
                        } else {
                          if (state_val_13648 === 12) {
                            var inst_13607 = state_13647[7];
                            var inst_13635 = cljs.core.vec.call(null, inst_13607);
                            var state_13647__$1 = state_13647;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13647__$1, 15, out, inst_13635);
                          } else {
                            if (state_val_13648 === 2) {
                              var state_13647__$1 = state_13647;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13647__$1, 4, ch);
                            } else {
                              if (state_val_13648 === 11) {
                                var inst_13615 = state_13647[10];
                                var inst_13611 = state_13647[9];
                                var inst_13625 = state_13647[2];
                                var inst_13626 = [];
                                var inst_13627 = inst_13626.push(inst_13611);
                                var inst_13607 = inst_13626;
                                var inst_13608 = inst_13615;
                                var state_13647__$1 = function() {
                                  var statearr_13659 = state_13647;
                                  statearr_13659[11] = inst_13625;
                                  statearr_13659[7] = inst_13607;
                                  statearr_13659[12] = inst_13627;
                                  statearr_13659[8] = inst_13608;
                                  return statearr_13659;
                                }();
                                var statearr_13660_13687 = state_13647__$1;
                                statearr_13660_13687[2] = null;
                                statearr_13660_13687[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13648 === 9) {
                                  var inst_13607 = state_13647[7];
                                  var inst_13623 = cljs.core.vec.call(null, inst_13607);
                                  var state_13647__$1 = state_13647;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13647__$1, 11, out, inst_13623);
                                } else {
                                  if (state_val_13648 === 5) {
                                    var inst_13615 = state_13647[10];
                                    var inst_13611 = state_13647[9];
                                    var inst_13608 = state_13647[8];
                                    var inst_13615__$1 = f.call(null, inst_13611);
                                    var inst_13616 = cljs.core._EQ_.call(null, inst_13615__$1, inst_13608);
                                    var inst_13617 = cljs.core.keyword_identical_QMARK_.call(null, inst_13608, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_13618 = inst_13616 || inst_13617;
                                    var state_13647__$1 = function() {
                                      var statearr_13661 = state_13647;
                                      statearr_13661[10] = inst_13615__$1;
                                      return statearr_13661;
                                    }();
                                    if (cljs.core.truth_(inst_13618)) {
                                      var statearr_13662_13688 = state_13647__$1;
                                      statearr_13662_13688[1] = 8;
                                    } else {
                                      var statearr_13663_13689 = state_13647__$1;
                                      statearr_13663_13689[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13648 === 14) {
                                      var inst_13640 = state_13647[2];
                                      var inst_13641 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_13647__$1 = function() {
                                        var statearr_13665 = state_13647;
                                        statearr_13665[13] = inst_13640;
                                        return statearr_13665;
                                      }();
                                      var statearr_13666_13690 = state_13647__$1;
                                      statearr_13666_13690[2] = inst_13641;
                                      statearr_13666_13690[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13648 === 10) {
                                        var inst_13630 = state_13647[2];
                                        var state_13647__$1 = state_13647;
                                        var statearr_13667_13691 = state_13647__$1;
                                        statearr_13667_13691[2] = inst_13630;
                                        statearr_13667_13691[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13648 === 8) {
                                          var inst_13615 = state_13647[10];
                                          var inst_13607 = state_13647[7];
                                          var inst_13611 = state_13647[9];
                                          var inst_13620 = inst_13607.push(inst_13611);
                                          var tmp13664 = inst_13607;
                                          var inst_13607__$1 = tmp13664;
                                          var inst_13608 = inst_13615;
                                          var state_13647__$1 = function() {
                                            var statearr_13668 = state_13647;
                                            statearr_13668[14] = inst_13620;
                                            statearr_13668[7] = inst_13607__$1;
                                            statearr_13668[8] = inst_13608;
                                            return statearr_13668;
                                          }();
                                          var statearr_13669_13692 = state_13647__$1;
                                          statearr_13669_13692[2] = null;
                                          statearr_13669_13692[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto___13678, out);
        return function(switch__6548__auto__, c__6569__auto___13678, out) {
          return function() {
            var cljs$core$async$state_machine__6549__auto__ = null;
            var cljs$core$async$state_machine__6549__auto____0 = function() {
              var statearr_13673 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13673[0] = cljs$core$async$state_machine__6549__auto__;
              statearr_13673[1] = 1;
              return statearr_13673;
            };
            var cljs$core$async$state_machine__6549__auto____1 = function(state_13647) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_13647);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e13674) {
                    if (e13674 instanceof Object) {
                      var ex__6552__auto__ = e13674;
                      var statearr_13675_13693 = state_13647;
                      statearr_13675_13693[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13647);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13674;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13694 = state_13647;
                  state_13647 = G__13694;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__6549__auto__ = function(state_13647) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__6549__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__6549__auto____1.call(this, state_13647);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__6549__auto____0;
            cljs$core$async$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__6549__auto____1;
            return cljs$core$async$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto___13678, out);
      }();
      var state__6571__auto__ = function() {
        var statearr_13676 = f__6570__auto__.call(null);
        statearr_13676[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___13678;
        return statearr_13676;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto___13678, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__10899_SHARP_) {
      return max === p1__10899_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function clojure$set$union() {
  var G__10904 = arguments.length;
  switch(G__10904) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq10900) {
  var G__10901 = cljs.core.first.call(null, seq10900);
  var seq10900__$1 = cljs.core.next.call(null, seq10900);
  var G__10902 = cljs.core.first.call(null, seq10900__$1);
  var seq10900__$2 = cljs.core.next.call(null, seq10900__$1);
  return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__10901, G__10902, seq10900__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection() {
  var G__10911 = arguments.length;
  switch(G__10911) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__10913 = s2;
      var G__10914 = s1;
      s1 = G__10913;
      s2 = G__10914;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__10906_SHARP_) {
    return-cljs.core.count.call(null, p1__10906_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq10907) {
  var G__10908 = cljs.core.first.call(null, seq10907);
  var seq10907__$1 = cljs.core.next.call(null, seq10907);
  var G__10909 = cljs.core.first.call(null, seq10907__$1);
  var seq10907__$2 = cljs.core.next.call(null, seq10907__$1);
  return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__10908, G__10909, seq10907__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference() {
  var G__10919 = arguments.length;
  switch(G__10919) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq10915) {
  var G__10916 = cljs.core.first.call(null, seq10915);
  var seq10915__$1 = cljs.core.next.call(null, seq10915);
  var G__10917 = cljs.core.first.call(null, seq10915__$1);
  var seq10915__$2 = cljs.core.next.call(null, seq10915__$1);
  return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__10916, G__10917, seq10915__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__10921_SHARP_) {
    return cljs.core.select_keys.call(null, p1__10921_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__10924) {
    var vec__10925 = p__10924;
    var old = cljs.core.nth.call(null, vec__10925, 0, null);
    var new$ = cljs.core.nth.call(null, vec__10925, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__10926_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__10926_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__10929) {
    var vec__10930 = p__10929;
    var k = cljs.core.nth.call(null, vec__10930, 0, null);
    var v = cljs.core.nth.call(null, vec__10930, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join() {
  var G__10936 = arguments.length;
  switch(G__10936) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__10937 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__10937, 0, null);
    var s = cljs.core.nth.call(null, vec__10937, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ks, vec__10937, r, s, idx) {
      return function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, ks, vec__10937, r, s, idx) {
            return function(p1__10931_SHARP_, p2__10932_SHARP_) {
              return cljs.core.conj.call(null, p1__10931_SHARP_, cljs.core.merge.call(null, p2__10932_SHARP_, x));
            };
          }(found, ks, vec__10937, r, s, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(ks, vec__10937, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__10938 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__10938, 0, null);
  var s = cljs.core.nth.call(null, vec__10938, 1, null);
  var k = cljs.core.nth.call(null, vec__10938, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(vec__10938, r, s, k, idx) {
    return function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(found, vec__10938, r, s, k, idx) {
          return function(p1__10933_SHARP_, p2__10934_SHARP_) {
            return cljs.core.conj.call(null, p1__10933_SHARP_, cljs.core.merge.call(null, p2__10934_SHARP_, x));
          };
        }(found, vec__10938, r, s, k, idx), ret, found);
      } else {
        return ret;
      }
    };
  }(vec__10938, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__10940_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__10940_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__10941_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__10941_SHARP_);
  }, set2);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var G__8596 = arguments.length;
  switch(G__8596) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      var G__8598 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__8599 = cljs.core.next.call(null, coll__$1);
      sb = G__8598;
      coll__$1 = G__8599;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__8600 = sb;
      var G__8601 = coll__$2;
      sb = G__8600;
      coll__$1 = G__8601;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__8602 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__8602;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__8606 = cljs.core._EQ_;
    var expr__8607 = limit;
    if (cljs.core.truth_(pred__8606.call(null, 1, expr__8607))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__8606.call(null, 2, expr__8607))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var G__8610 = arguments.length;
  switch(G__8610) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core._EQ_.call(null, limit__$1, 1)) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var m = temp__4124__auto__;
          var index = s__$1.indexOf(m);
          var G__8612 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__8613 = limit__$1 - 1;
          var G__8614 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__8612;
          limit__$1 = G__8613;
          parts = G__8614;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__8615 = index - 1;
        index = G__8615;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___8616 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___8616)) {
        var replacement_8617 = temp__4124__auto___8616;
        buffer.append([cljs.core.str(replacement_8617)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__8618 = index + 1;
      index = G__8618;
      continue;
    }
    break;
  }
};
goog.provide("sablono.util");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.set");
goog.require("goog.Uri");
sablono.util._STAR_base_url_STAR_ = null;
sablono.util.ToString = function() {
  var obj19459 = {};
  return obj19459;
}();
sablono.util.to_str = function sablono$util$to_str(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.sablono$util$ToString$to_str$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.sablono$util$ToString$to_str$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = sablono.util.to_str[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = sablono.util.to_str["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ToString.to-str", x);
        }
      }
    }().call(null, x);
  }
};
sablono.util.ToURI = function() {
  var obj19461 = {};
  return obj19461;
}();
sablono.util.to_uri = function sablono$util$to_uri(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.sablono$util$ToURI$to_uri$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.sablono$util$ToURI$to_uri$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = sablono.util.to_uri[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = sablono.util.to_uri["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ToURI.to-uri", x);
        }
      }
    }().call(null, x);
  }
};
sablono.util.as_str = function sablono$util$as_str() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return sablono.util.as_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
sablono.util.as_str.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, sablono.util.to_str, xs));
};
sablono.util.as_str.cljs$lang$maxFixedArity = 0;
sablono.util.as_str.cljs$lang$applyTo = function(seq19462) {
  return sablono.util.as_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19462));
};
sablono.util.camel_case = function sablono$util$camel_case(k) {
  if (cljs.core.truth_(k)) {
    var vec__19464 = clojure.string.split.call(null, cljs.core.name.call(null, k), /-/);
    var first_word = cljs.core.nth.call(null, vec__19464, 0, null);
    var words = cljs.core.nthnext.call(null, vec__19464, 1);
    if (cljs.core.empty_QMARK_.call(null, words) || cljs.core._EQ_.call(null, "aria", first_word) || cljs.core._EQ_.call(null, "data", first_word)) {
      return k;
    } else {
      return cljs.core.keyword.call(null, clojure.string.join.call(null, cljs.core.conj.call(null, cljs.core.map.call(null, clojure.string.capitalize, words), first_word)));
    }
  } else {
    return null;
  }
};
sablono.util.camel_case_keys = function sablono$util$camel_case_keys(m) {
  if (cljs.core.map_QMARK_.call(null, m)) {
    var ks = cljs.core.keys.call(null, m);
    var kmap = cljs.core.zipmap.call(null, ks, cljs.core.map.call(null, sablono.util.camel_case, ks));
    var G__19466 = clojure.set.rename_keys.call(null, m, kmap);
    var G__19466__$1 = cljs.core.map_QMARK_.call(null, (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(m)) ? cljs.core.update_in.call(null, G__19466, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "style", "style", -496642736)], null), sablono$util$camel_case_keys) : G__19466;
    return G__19466__$1;
  } else {
    return m;
  }
};
sablono.util.html_to_dom_attrs = function sablono$util$html_to_dom_attrs(attrs) {
  return clojure.set.rename_keys.call(null, sablono.util.camel_case_keys.call(null, attrs), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), new cljs.core.Keyword(null, "className", "className", -1983287057), new cljs.core.Keyword(null, "for", "for", -1323786319), new cljs.core.Keyword(null, "htmlFor", "htmlFor", -1050291720)], null));
};
sablono.util.compact_map = function sablono$util$compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
sablono.util.merge_with_class = function sablono$util$merge_with_class() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return sablono.util.merge_with_class.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
sablono.util.merge_with_class.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  var classes = cljs.core.vec.call(null, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.mapcat.call(null, function(p1__19467_SHARP_) {
    if (cljs.core.list_QMARK_.call(null, p1__19467_SHARP_)) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19467_SHARP_], null);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, p1__19467_SHARP_)) {
        return p1__19467_SHARP_;
      } else {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19467_SHARP_], null);
      }
    }
  }, cljs.core.map.call(null, new cljs.core.Keyword(null, "class", "class", -2030961996), maps))));
  var maps__$1 = cljs.core.apply.call(null, cljs.core.merge, maps);
  if (cljs.core.empty_QMARK_.call(null, classes)) {
    return maps__$1;
  } else {
    return cljs.core.assoc.call(null, maps__$1, new cljs.core.Keyword(null, "class", "class", -2030961996), classes);
  }
};
sablono.util.merge_with_class.cljs$lang$maxFixedArity = 0;
sablono.util.merge_with_class.cljs$lang$applyTo = function(seq19468) {
  return sablono.util.merge_with_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19468));
};
sablono.util.strip_css = function sablono$util$strip_css(s) {
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, s, /^[.#]/, "");
  } else {
    return null;
  }
};
sablono.util.match_tag = function sablono$util$match_tag(s) {
  var matches = cljs.core.re_seq.call(null, /[#.]?[^#.]+/, cljs.core.name.call(null, s));
  var vec__19472 = cljs.core.empty_QMARK_.call(null, matches) ? function() {
    throw cljs.core.ex_info.call(null, [cljs.core.str("Can't match CSS tag: "), cljs.core.str(s)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), s], null));
  }() : cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["#", null, ".", null], null), null)).call(null, cljs.core.ffirst.call(null, matches))) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["div", matches], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, matches), cljs.core.rest.call(null, matches)], null);
  var tag_name = cljs.core.nth.call(null, vec__19472, 0, null);
  var names = cljs.core.nth.call(null, vec__19472, 1, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name, cljs.core.first.call(null, cljs.core.map.call(null, sablono.util.strip_css, cljs.core.filter.call(null, function(matches, vec__19472, tag_name, names) {
    return function(p1__19469_SHARP_) {
      return cljs.core._EQ_.call(null, "#", cljs.core.first.call(null, p1__19469_SHARP_));
    };
  }(matches, vec__19472, tag_name, names), names))), cljs.core.vec.call(null, cljs.core.map.call(null, sablono.util.strip_css, cljs.core.filter.call(null, function(matches, vec__19472, tag_name, names) {
    return function(p1__19470_SHARP_) {
      return cljs.core._EQ_.call(null, ".", cljs.core.first.call(null, p1__19470_SHARP_));
    };
  }(matches, vec__19472, tag_name, names), names)))], null);
};
sablono.util.normalize_element = function sablono$util$normalize_element(p__19473) {
  var vec__19476 = p__19473;
  var tag = cljs.core.nth.call(null, vec__19476, 0, null);
  var content = cljs.core.nthnext.call(null, vec__19476, 1);
  if (!(tag instanceof cljs.core.Keyword || tag instanceof cljs.core.Symbol || typeof tag === "string")) {
    throw cljs.core.ex_info.call(null, [cljs.core.str(tag), cljs.core.str(" is not a valid element name.")].join(""), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "content", "content", 15833224), content], null));
  } else {
  }
  var vec__19477 = sablono.util.match_tag.call(null, tag);
  var tag__$1 = cljs.core.nth.call(null, vec__19477, 0, null);
  var id = cljs.core.nth.call(null, vec__19477, 1, null);
  var class$ = cljs.core.nth.call(null, vec__19477, 2, null);
  var tag_attrs = sablono.util.compact_map.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), id, new cljs.core.Keyword(null, "class", "class", -2030961996), class$], null));
  var map_attrs = cljs.core.first.call(null, content);
  if (cljs.core.map_QMARK_.call(null, map_attrs)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, sablono.util.merge_with_class.call(null, tag_attrs, map_attrs), cljs.core.next.call(null, content)], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, tag_attrs, content], null);
  }
};
sablono.util.join_classes = function sablono$util$join_classes(classes) {
  return clojure.string.join.call(null, " ", cljs.core.flatten.call(null, classes));
};
sablono.util.react_symbol = function sablono$util$react_symbol(tag) {
  return cljs.core.symbol.call(null, "js", [cljs.core.str("React.DOM."), cljs.core.str(cljs.core.name.call(null, tag))].join(""));
};
sablono.util.react_fn = function sablono$util$react_fn(tag) {
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "textarea", "textarea", -650375824), null, new cljs.core.Keyword(null, "option", "option", 65132272), null, new cljs.core.Keyword(null, "input", "input", 556931961), null], null), null), cljs.core.keyword.call(null, tag))) {
    return cljs.core.symbol.call(null, "sablono.interpreter", cljs.core.name.call(null, tag));
  } else {
    return sablono.util.react_symbol.call(null, tag);
  }
};
sablono.util.attr_pattern = function sablono$util$attr_pattern(attr) {
  return cljs.core.re_pattern.call(null, [cljs.core.str("\\s+"), cljs.core.str(cljs.core.name.call(null, attr)), cljs.core.str("\\s*\x3d\\s*['\"][^\"']+['\"]")].join(""));
};
sablono.util.strip_attr = function sablono$util$strip_attr(s, attr) {
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, s, sablono.util.attr_pattern.call(null, attr), "");
  } else {
    return null;
  }
};
sablono.util.strip_outer = function sablono$util$strip_outer(s) {
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, clojure.string.replace.call(null, s, /^\s*<[^>]+>\s*/, ""), /\s*<\/[^>]+>\s*$/, "");
  } else {
    return null;
  }
};
sablono.util.ToString["_"] = true;
sablono.util.to_str["_"] = function(x) {
  return[cljs.core.str(x)].join("");
};
sablono.util.ToString["number"] = true;
sablono.util.to_str["number"] = function(x) {
  return[cljs.core.str(x)].join("");
};
sablono.util.ToString["null"] = true;
sablono.util.to_str["null"] = function(_) {
  return "";
};
goog.Uri.prototype.sablono$util$ToString$ = true;
goog.Uri.prototype.sablono$util$ToString$to_str$arity$1 = function(x) {
  var x__$1 = this;
  if (cljs.core.truth_(function() {
    var or__4274__auto__ = x__$1.hasDomain();
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return x__$1.getPath() == null || cljs.core.not.call(null, cljs.core.re_matches.call(null, /^\/.*/, x__$1.getPath()));
    }
  }())) {
    return[cljs.core.str(x__$1)].join("");
  } else {
    var base = [cljs.core.str(sablono.util._STAR_base_url_STAR_)].join("");
    if (cljs.core.truth_(cljs.core.re_matches.call(null, /.*\/$/, base))) {
      return[cljs.core.str(cljs.core.subs.call(null, base, 0, cljs.core.count.call(null, base) - 1)), cljs.core.str(x__$1)].join("");
    } else {
      return[cljs.core.str(base), cljs.core.str(x__$1)].join("");
    }
  }
};
cljs.core.Keyword.prototype.sablono$util$ToString$ = true;
cljs.core.Keyword.prototype.sablono$util$ToString$to_str$arity$1 = function(x) {
  var x__$1 = this;
  return cljs.core.name.call(null, x__$1);
};
sablono.util.ToURI["_"] = true;
sablono.util.to_uri["_"] = function(x) {
  return new goog.Uri([cljs.core.str(x)].join(""));
};
goog.Uri.prototype.sablono$util$ToURI$ = true;
goog.Uri.prototype.sablono$util$ToURI$to_uri$arity$1 = function(x) {
  var x__$1 = this;
  return x__$1;
};
goog.provide("sablono.interpreter");
goog.require("cljs.core");
goog.require("goog.object");
goog.require("sablono.util");
goog.require("clojure.string");
sablono.interpreter.IInterpreter = function() {
  var obj19453 = {};
  return obj19453;
}();
sablono.interpreter.interpret = function sablono$interpreter$interpret(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.sablono$interpreter$IInterpreter$interpret$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.sablono$interpreter$IInterpreter$interpret$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = sablono.interpreter.interpret[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = sablono.interpreter.interpret["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInterpreter.interpret", this$);
        }
      }
    }().call(null, this$);
  }
};
sablono.interpreter.wrap_form_element = function sablono$interpreter$wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]});
    return ctor.call(null, props);
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }}));
};
sablono.interpreter.input = sablono.interpreter.wrap_form_element.call(null, React.DOM.input, "input");
sablono.interpreter.option = sablono.interpreter.wrap_form_element.call(null, React.DOM.option, "option");
sablono.interpreter.textarea = sablono.interpreter.wrap_form_element.call(null, React.DOM.textarea, "textarea");
sablono.interpreter.dom_fn = function sablono$interpreter$dom_fn(tag) {
  var temp__4124__auto__ = React.DOM[cljs.core.name.call(null, tag)];
  if (cljs.core.truth_(temp__4124__auto__)) {
    var dom_fn__$1 = temp__4124__auto__;
    return cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "input", "input", 556931961), sablono.interpreter.input, new cljs.core.Keyword(null, "option", "option", 65132272), sablono.interpreter.option, new cljs.core.Keyword(null, "textarea", "textarea", -650375824), sablono.interpreter.textarea], null), cljs.core.keyword.call(null, tag), dom_fn__$1);
  } else {
    throw cljs.core.ex_info.call(null, [cljs.core.str("Unsupported HTML tag: "), cljs.core.str(cljs.core.name.call(null, tag))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag], null));
  }
};
sablono.interpreter.attributes = function sablono$interpreter$attributes(attrs) {
  var attrs__$1 = cljs.core.clj__GT_js.call(null, sablono.util.html_to_dom_attrs.call(null, attrs));
  var class$ = attrs__$1.className;
  var class$__$1 = cljs.core.array_QMARK_.call(null, class$) ? clojure.string.join.call(null, " ", class$) : class$;
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, class$__$1))) {
    delete attrs__$1["className"];
  } else {
    attrs__$1.className = class$__$1;
  }
  return attrs__$1;
};
sablono.interpreter.element = function sablono$interpreter$element(element__$1) {
  var vec__19455 = sablono.util.normalize_element.call(null, element__$1);
  var tag = cljs.core.nth.call(null, vec__19455, 0, null);
  var attrs = cljs.core.nth.call(null, vec__19455, 1, null);
  var content = cljs.core.nth.call(null, vec__19455, 2, null);
  var f = sablono.interpreter.dom_fn.call(null, tag);
  var js_attrs = sablono.interpreter.attributes.call(null, attrs);
  if (cljs.core.sequential_QMARK_.call(null, content) && cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, content))) {
    return f.call(null, js_attrs, sablono.interpreter.interpret.call(null, cljs.core.first.call(null, content)));
  } else {
    if (cljs.core.truth_(content)) {
      return cljs.core.apply.call(null, f, js_attrs, sablono.interpreter.interpret.call(null, content));
    } else {
      return f.call(null, js_attrs, null);
    }
  }
};
sablono.interpreter.interpret_seq = function sablono$interpreter$interpret_seq(s) {
  return cljs.core.into_array.call(null, cljs.core.map.call(null, sablono.interpreter.interpret, s));
};
sablono.interpreter.IInterpreter["null"] = true;
sablono.interpreter.interpret["null"] = function(this$) {
  return null;
};
sablono.interpreter.IInterpreter["_"] = true;
sablono.interpreter.interpret["_"] = function(this$) {
  return this$;
};
cljs.core.PersistentVector.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.PersistentVector.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.element.call(null, this$__$1);
};
cljs.core.Subvec.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.Subvec.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.element.call(null, this$__$1);
};
cljs.core.IndexedSeq.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.IndexedSeq.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.List.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.List.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.LazySeq.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.LazySeq.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.ChunkedSeq.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.ChunkedSeq.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
cljs.core.Cons.prototype.sablono$interpreter$IInterpreter$ = true;
cljs.core.Cons.prototype.sablono$interpreter$IInterpreter$interpret$arity$1 = function(this$) {
  var this$__$1 = this;
  return sablono.interpreter.interpret_seq.call(null, this$__$1);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function clojure$walk$walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      return outer.call(null, form);
    }
  }
};
clojure.walk.postwalk = function clojure$walk$postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$postwalk, f), f, form);
};
clojure.walk.prewalk = function clojure$walk$prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function clojure$walk$keywordize_keys(m) {
  var f = function(p__19232) {
    var vec__19233 = p__19232;
    var k = cljs.core.nth.call(null, vec__19233, 0, null);
    var v = cljs.core.nth.call(null, vec__19233, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function clojure$walk$stringify_keys(m) {
  var f = function(p__19236) {
    var vec__19237 = p__19236;
    var k = cljs.core.nth.call(null, vec__19237, 0, null);
    var v = cljs.core.nth.call(null, vec__19237, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function clojure$walk$prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function clojure$walk$postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("sablono.core");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("sablono.interpreter");
goog.require("sablono.util");
goog.require("clojure.walk");
goog.require("clojure.string");
sablono.core.wrap_attrs = function sablono$core$wrap_attrs(func) {
  return function() {
    var G__19291__delegate = function(args) {
      if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, args))) {
        var vec__19290 = cljs.core.apply.call(null, func, cljs.core.rest.call(null, args));
        var tag = cljs.core.nth.call(null, vec__19290, 0, null);
        var body = cljs.core.nthnext.call(null, vec__19290, 1);
        if (cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, body))) {
          return cljs.core.apply.call(null, cljs.core.vector, tag, cljs.core.merge.call(null, cljs.core.first.call(null, body), cljs.core.first.call(null, args)), cljs.core.rest.call(null, body));
        } else {
          return cljs.core.apply.call(null, cljs.core.vector, tag, cljs.core.first.call(null, args), body);
        }
      } else {
        return cljs.core.apply.call(null, func, args);
      }
    };
    var G__19291 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__19292__i = 0, G__19292__a = new Array(arguments.length - 0);
        while (G__19292__i < G__19292__a.length) {
          G__19292__a[G__19292__i] = arguments[G__19292__i + 0];
          ++G__19292__i;
        }
        args = new cljs.core.IndexedSeq(G__19292__a, 0);
      }
      return G__19291__delegate.call(this, args);
    };
    G__19291.cljs$lang$maxFixedArity = 0;
    G__19291.cljs$lang$applyTo = function(arglist__19293) {
      var args = cljs.core.seq(arglist__19293);
      return G__19291__delegate(args);
    };
    G__19291.cljs$core$IFn$_invoke$arity$variadic = G__19291__delegate;
    return G__19291;
  }();
};
sablono.core.update_arglists = function sablono$core$update_arglists(arglists) {
  var iter__5028__auto__ = function sablono$core$update_arglists_$_iter__19298(s__19299) {
    return new cljs.core.LazySeq(null, function() {
      var s__19299__$1 = s__19299;
      while (true) {
        var temp__4126__auto__ = cljs.core.seq.call(null, s__19299__$1);
        if (temp__4126__auto__) {
          var s__19299__$2 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__19299__$2)) {
            var c__5026__auto__ = cljs.core.chunk_first.call(null, s__19299__$2);
            var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
            var b__19301 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
            if (function() {
              var i__19300 = 0;
              while (true) {
                if (i__19300 < size__5027__auto__) {
                  var args = cljs.core._nth.call(null, c__5026__auto__, i__19300);
                  cljs.core.chunk_append.call(null, b__19301, cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Symbol(null, "attr-map?", "attr-map?", 116307443, null), args)));
                  var G__19302 = i__19300 + 1;
                  i__19300 = G__19302;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19301), sablono$core$update_arglists_$_iter__19298.call(null, cljs.core.chunk_rest.call(null, s__19299__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19301), null);
            }
          } else {
            var args = cljs.core.first.call(null, s__19299__$2);
            return cljs.core.cons.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, new cljs.core.Symbol(null, "attr-map?", "attr-map?", 116307443, null), args)), sablono$core$update_arglists_$_iter__19298.call(null, cljs.core.rest.call(null, s__19299__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__5028__auto__.call(null, arglists);
};
sablono.core.render = function sablono$core$render(element) {
  if (cljs.core.truth_(element)) {
    return React.renderToString(element);
  } else {
    return null;
  }
};
sablono.core.render_static = function sablono$core$render_static(element) {
  if (cljs.core.truth_(element)) {
    return React.renderToStaticMarkup(element);
  } else {
    return null;
  }
};
sablono.core.include_css = function sablono$core$include_css() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return sablono.core.include_css.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
sablono.core.include_css.cljs$core$IFn$_invoke$arity$variadic = function(styles) {
  var iter__5028__auto__ = function sablono$core$iter__19304(s__19305) {
    return new cljs.core.LazySeq(null, function() {
      var s__19305__$1 = s__19305;
      while (true) {
        var temp__4126__auto__ = cljs.core.seq.call(null, s__19305__$1);
        if (temp__4126__auto__) {
          var s__19305__$2 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__19305__$2)) {
            var c__5026__auto__ = cljs.core.chunk_first.call(null, s__19305__$2);
            var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
            var b__19307 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
            if (function() {
              var i__19306 = 0;
              while (true) {
                if (i__19306 < size__5027__auto__) {
                  var style = cljs.core._nth.call(null, c__5026__auto__, i__19306);
                  cljs.core.chunk_append.call(null, b__19307, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "link", "link", -1769163468), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text/css", new cljs.core.Keyword(null, "href", "href", -793805698), sablono.util.as_str.call(null, style), new cljs.core.Keyword(null, "rel", "rel", 1378823488), "stylesheet"], null)], null));
                  var G__19308 = i__19306 + 1;
                  i__19306 = G__19308;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19307), sablono$core$iter__19304.call(null, cljs.core.chunk_rest.call(null, s__19305__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19307), null);
            }
          } else {
            var style = cljs.core.first.call(null, s__19305__$2);
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "link", "link", -1769163468), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text/css", new cljs.core.Keyword(null, "href", "href", -793805698), sablono.util.as_str.call(null, style), new cljs.core.Keyword(null, "rel", "rel", 1378823488), "stylesheet"], null)], null), sablono$core$iter__19304.call(null, 
            cljs.core.rest.call(null, s__19305__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__5028__auto__.call(null, styles);
};
sablono.core.include_css.cljs$lang$maxFixedArity = 0;
sablono.core.include_css.cljs$lang$applyTo = function(seq19303) {
  return sablono.core.include_css.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19303));
};
sablono.core.include_js = function sablono$core$include_js(src) {
  return goog.dom.appendChild(goog.dom.getDocument().body, goog.dom.createDom("script", {"src":src}));
};
sablono.core.include_react = function sablono$core$include_react() {
  return sablono.core.include_js.call(null, "http://fb.me/react-0.12.2.js");
};
sablono.core.link_to19309 = function sablono$core$link_to19309() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return sablono.core.link_to19309.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
sablono.core.link_to19309.cljs$core$IFn$_invoke$arity$variadic = function(url, content) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), sablono.util.as_str.call(null, url)], null), content], null);
};
sablono.core.link_to19309.cljs$lang$maxFixedArity = 1;
sablono.core.link_to19309.cljs$lang$applyTo = function(seq19310) {
  var G__19311 = cljs.core.first.call(null, seq19310);
  var seq19310__$1 = cljs.core.next.call(null, seq19310);
  return sablono.core.link_to19309.cljs$core$IFn$_invoke$arity$variadic(G__19311, seq19310__$1);
};
sablono.core.link_to = sablono.core.wrap_attrs.call(null, sablono.core.link_to19309);
sablono.core.mail_to19312 = function sablono$core$mail_to19312() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return sablono.core.mail_to19312.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
sablono.core.mail_to19312.cljs$core$IFn$_invoke$arity$variadic = function(e_mail, p__19315) {
  var vec__19316 = p__19315;
  var content = cljs.core.nth.call(null, vec__19316, 0, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), [cljs.core.str("mailto:"), cljs.core.str(e_mail)].join("")], null), function() {
    var or__4274__auto__ = content;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return e_mail;
    }
  }()], null);
};
sablono.core.mail_to19312.cljs$lang$maxFixedArity = 1;
sablono.core.mail_to19312.cljs$lang$applyTo = function(seq19313) {
  var G__19314 = cljs.core.first.call(null, seq19313);
  var seq19313__$1 = cljs.core.next.call(null, seq19313);
  return sablono.core.mail_to19312.cljs$core$IFn$_invoke$arity$variadic(G__19314, seq19313__$1);
};
sablono.core.mail_to = sablono.core.wrap_attrs.call(null, sablono.core.mail_to19312);
sablono.core.unordered_list19317 = function sablono$core$unordered_list19317(coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul", "ul", -1349521403), function() {
    var iter__5028__auto__ = function sablono$core$unordered_list19317_$_iter__19322(s__19323) {
      return new cljs.core.LazySeq(null, function() {
        var s__19323__$1 = s__19323;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__19323__$1);
          if (temp__4126__auto__) {
            var s__19323__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__19323__$2)) {
              var c__5026__auto__ = cljs.core.chunk_first.call(null, s__19323__$2);
              var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
              var b__19325 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
              if (function() {
                var i__19324 = 0;
                while (true) {
                  if (i__19324 < size__5027__auto__) {
                    var x = cljs.core._nth.call(null, c__5026__auto__, i__19324);
                    cljs.core.chunk_append.call(null, b__19325, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), x], null));
                    var G__19326 = i__19324 + 1;
                    i__19324 = G__19326;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19325), sablono$core$unordered_list19317_$_iter__19322.call(null, cljs.core.chunk_rest.call(null, s__19323__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19325), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__19323__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), x], null), sablono$core$unordered_list19317_$_iter__19322.call(null, cljs.core.rest.call(null, s__19323__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5028__auto__.call(null, coll);
  }()], null);
};
sablono.core.unordered_list = sablono.core.wrap_attrs.call(null, sablono.core.unordered_list19317);
sablono.core.ordered_list19327 = function sablono$core$ordered_list19327(coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ol", "ol", 932524051), function() {
    var iter__5028__auto__ = function sablono$core$ordered_list19327_$_iter__19332(s__19333) {
      return new cljs.core.LazySeq(null, function() {
        var s__19333__$1 = s__19333;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__19333__$1);
          if (temp__4126__auto__) {
            var s__19333__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__19333__$2)) {
              var c__5026__auto__ = cljs.core.chunk_first.call(null, s__19333__$2);
              var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
              var b__19335 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
              if (function() {
                var i__19334 = 0;
                while (true) {
                  if (i__19334 < size__5027__auto__) {
                    var x = cljs.core._nth.call(null, c__5026__auto__, i__19334);
                    cljs.core.chunk_append.call(null, b__19335, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), x], null));
                    var G__19336 = i__19334 + 1;
                    i__19334 = G__19336;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19335), sablono$core$ordered_list19327_$_iter__19332.call(null, cljs.core.chunk_rest.call(null, s__19333__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19335), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__19333__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), x], null), sablono$core$ordered_list19327_$_iter__19332.call(null, cljs.core.rest.call(null, s__19333__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5028__auto__.call(null, coll);
  }()], null);
};
sablono.core.ordered_list = sablono.core.wrap_attrs.call(null, sablono.core.ordered_list19327);
sablono.core.image19337 = function sablono$core$image19337() {
  var G__19339 = arguments.length;
  switch(G__19339) {
    case 1:
      return sablono.core.image19337.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.image19337.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.image19337.cljs$core$IFn$_invoke$arity$1 = function(src) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "src", "src", -1651076051), sablono.util.as_str.call(null, src)], null)], null);
};
sablono.core.image19337.cljs$core$IFn$_invoke$arity$2 = function(src, alt) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "src", "src", -1651076051), sablono.util.as_str.call(null, src), new cljs.core.Keyword(null, "alt", "alt", -3214426), alt], null)], null);
};
sablono.core.image19337.cljs$lang$maxFixedArity = 2;
sablono.core.image = sablono.core.wrap_attrs.call(null, sablono.core.image19337);
sablono.core._STAR_group_STAR_ = cljs.core.PersistentVector.EMPTY;
sablono.core.make_name = function sablono$core$make_name(name) {
  return cljs.core.reduce.call(null, function(p1__19341_SHARP_, p2__19342_SHARP_) {
    return[cljs.core.str(p1__19341_SHARP_), cljs.core.str("["), cljs.core.str(p2__19342_SHARP_), cljs.core.str("]")].join("");
  }, cljs.core.conj.call(null, sablono.core._STAR_group_STAR_, sablono.util.as_str.call(null, name)));
};
sablono.core.make_id = function sablono$core$make_id(name) {
  return cljs.core.reduce.call(null, function(p1__19343_SHARP_, p2__19344_SHARP_) {
    return[cljs.core.str(p1__19343_SHARP_), cljs.core.str("-"), cljs.core.str(p2__19344_SHARP_)].join("");
  }, cljs.core.conj.call(null, sablono.core._STAR_group_STAR_, sablono.util.as_str.call(null, name)));
};
sablono.core.input_field_STAR_ = function sablono$core$input_field_STAR_(type, name, value) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), type, new cljs.core.Keyword(null, "name", "name", 1843675177), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", -1388402092), sablono.core.make_id.call(null, name), new cljs.core.Keyword(null, "value", "value", 305978217), 
  value], null)], null);
};
sablono.core.color_field19345 = function sablono$core$color_field19345() {
  var G__19347 = arguments.length;
  switch(G__19347) {
    case 1:
      return sablono.core.color_field19345.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.color_field19345.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.color_field19345.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.color_field19345.call(null, name__7140__auto__, null);
};
sablono.core.color_field19345.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "color", "color", -1642760596, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.color_field19345.cljs$lang$maxFixedArity = 2;
sablono.core.color_field = sablono.core.wrap_attrs.call(null, sablono.core.color_field19345);
sablono.core.date_field19348 = function sablono$core$date_field19348() {
  var G__19350 = arguments.length;
  switch(G__19350) {
    case 1:
      return sablono.core.date_field19348.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.date_field19348.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.date_field19348.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.date_field19348.call(null, name__7140__auto__, null);
};
sablono.core.date_field19348.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "date", "date", 177097065, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.date_field19348.cljs$lang$maxFixedArity = 2;
sablono.core.date_field = sablono.core.wrap_attrs.call(null, sablono.core.date_field19348);
sablono.core.datetime_field19351 = function sablono$core$datetime_field19351() {
  var G__19353 = arguments.length;
  switch(G__19353) {
    case 1:
      return sablono.core.datetime_field19351.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.datetime_field19351.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.datetime_field19351.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.datetime_field19351.call(null, name__7140__auto__, null);
};
sablono.core.datetime_field19351.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "datetime", "datetime", 2135207229, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.datetime_field19351.cljs$lang$maxFixedArity = 2;
sablono.core.datetime_field = sablono.core.wrap_attrs.call(null, sablono.core.datetime_field19351);
sablono.core.datetime_local_field19354 = function sablono$core$datetime_local_field19354() {
  var G__19356 = arguments.length;
  switch(G__19356) {
    case 1:
      return sablono.core.datetime_local_field19354.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.datetime_local_field19354.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.datetime_local_field19354.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.datetime_local_field19354.call(null, name__7140__auto__, null);
};
sablono.core.datetime_local_field19354.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "datetime-local", "datetime-local", -507312697, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.datetime_local_field19354.cljs$lang$maxFixedArity = 2;
sablono.core.datetime_local_field = sablono.core.wrap_attrs.call(null, sablono.core.datetime_local_field19354);
sablono.core.email_field19357 = function sablono$core$email_field19357() {
  var G__19359 = arguments.length;
  switch(G__19359) {
    case 1:
      return sablono.core.email_field19357.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.email_field19357.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.email_field19357.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.email_field19357.call(null, name__7140__auto__, null);
};
sablono.core.email_field19357.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "email", "email", -1238619063, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.email_field19357.cljs$lang$maxFixedArity = 2;
sablono.core.email_field = sablono.core.wrap_attrs.call(null, sablono.core.email_field19357);
sablono.core.file_field19360 = function sablono$core$file_field19360() {
  var G__19362 = arguments.length;
  switch(G__19362) {
    case 1:
      return sablono.core.file_field19360.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.file_field19360.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.file_field19360.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.file_field19360.call(null, name__7140__auto__, null);
};
sablono.core.file_field19360.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "file", "file", 370885649, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.file_field19360.cljs$lang$maxFixedArity = 2;
sablono.core.file_field = sablono.core.wrap_attrs.call(null, sablono.core.file_field19360);
sablono.core.hidden_field19363 = function sablono$core$hidden_field19363() {
  var G__19365 = arguments.length;
  switch(G__19365) {
    case 1:
      return sablono.core.hidden_field19363.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.hidden_field19363.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.hidden_field19363.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.hidden_field19363.call(null, name__7140__auto__, null);
};
sablono.core.hidden_field19363.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "hidden", "hidden", 1328025435, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.hidden_field19363.cljs$lang$maxFixedArity = 2;
sablono.core.hidden_field = sablono.core.wrap_attrs.call(null, sablono.core.hidden_field19363);
sablono.core.month_field19366 = function sablono$core$month_field19366() {
  var G__19368 = arguments.length;
  switch(G__19368) {
    case 1:
      return sablono.core.month_field19366.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.month_field19366.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.month_field19366.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.month_field19366.call(null, name__7140__auto__, null);
};
sablono.core.month_field19366.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "month", "month", -319717006, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.month_field19366.cljs$lang$maxFixedArity = 2;
sablono.core.month_field = sablono.core.wrap_attrs.call(null, sablono.core.month_field19366);
sablono.core.number_field19369 = function sablono$core$number_field19369() {
  var G__19371 = arguments.length;
  switch(G__19371) {
    case 1:
      return sablono.core.number_field19369.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.number_field19369.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.number_field19369.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.number_field19369.call(null, name__7140__auto__, null);
};
sablono.core.number_field19369.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "number", "number", -1084057331, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.number_field19369.cljs$lang$maxFixedArity = 2;
sablono.core.number_field = sablono.core.wrap_attrs.call(null, sablono.core.number_field19369);
sablono.core.password_field19372 = function sablono$core$password_field19372() {
  var G__19374 = arguments.length;
  switch(G__19374) {
    case 1:
      return sablono.core.password_field19372.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.password_field19372.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.password_field19372.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.password_field19372.call(null, name__7140__auto__, null);
};
sablono.core.password_field19372.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "password", "password", 2057553998, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.password_field19372.cljs$lang$maxFixedArity = 2;
sablono.core.password_field = sablono.core.wrap_attrs.call(null, sablono.core.password_field19372);
sablono.core.range_field19375 = function sablono$core$range_field19375() {
  var G__19377 = arguments.length;
  switch(G__19377) {
    case 1:
      return sablono.core.range_field19375.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.range_field19375.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.range_field19375.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.range_field19375.call(null, name__7140__auto__, null);
};
sablono.core.range_field19375.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "range", "range", -1014743483, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.range_field19375.cljs$lang$maxFixedArity = 2;
sablono.core.range_field = sablono.core.wrap_attrs.call(null, sablono.core.range_field19375);
sablono.core.search_field19378 = function sablono$core$search_field19378() {
  var G__19380 = arguments.length;
  switch(G__19380) {
    case 1:
      return sablono.core.search_field19378.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.search_field19378.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.search_field19378.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.search_field19378.call(null, name__7140__auto__, null);
};
sablono.core.search_field19378.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "search", "search", -1089495947, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.search_field19378.cljs$lang$maxFixedArity = 2;
sablono.core.search_field = sablono.core.wrap_attrs.call(null, sablono.core.search_field19378);
sablono.core.tel_field19381 = function sablono$core$tel_field19381() {
  var G__19383 = arguments.length;
  switch(G__19383) {
    case 1:
      return sablono.core.tel_field19381.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.tel_field19381.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.tel_field19381.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.tel_field19381.call(null, name__7140__auto__, null);
};
sablono.core.tel_field19381.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "tel", "tel", 1864669686, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.tel_field19381.cljs$lang$maxFixedArity = 2;
sablono.core.tel_field = sablono.core.wrap_attrs.call(null, sablono.core.tel_field19381);
sablono.core.text_field19384 = function sablono$core$text_field19384() {
  var G__19386 = arguments.length;
  switch(G__19386) {
    case 1:
      return sablono.core.text_field19384.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.text_field19384.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.text_field19384.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.text_field19384.call(null, name__7140__auto__, null);
};
sablono.core.text_field19384.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "text", "text", -150030170, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.text_field19384.cljs$lang$maxFixedArity = 2;
sablono.core.text_field = sablono.core.wrap_attrs.call(null, sablono.core.text_field19384);
sablono.core.time_field19387 = function sablono$core$time_field19387() {
  var G__19389 = arguments.length;
  switch(G__19389) {
    case 1:
      return sablono.core.time_field19387.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.time_field19387.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.time_field19387.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.time_field19387.call(null, name__7140__auto__, null);
};
sablono.core.time_field19387.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "time", "time", -1268547887, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.time_field19387.cljs$lang$maxFixedArity = 2;
sablono.core.time_field = sablono.core.wrap_attrs.call(null, sablono.core.time_field19387);
sablono.core.url_field19390 = function sablono$core$url_field19390() {
  var G__19392 = arguments.length;
  switch(G__19392) {
    case 1:
      return sablono.core.url_field19390.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.url_field19390.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.url_field19390.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.url_field19390.call(null, name__7140__auto__, null);
};
sablono.core.url_field19390.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "url", "url", 1916828573, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.url_field19390.cljs$lang$maxFixedArity = 2;
sablono.core.url_field = sablono.core.wrap_attrs.call(null, sablono.core.url_field19390);
sablono.core.week_field19393 = function sablono$core$week_field19393() {
  var G__19395 = arguments.length;
  switch(G__19395) {
    case 1:
      return sablono.core.week_field19393.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.week_field19393.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.week_field19393.cljs$core$IFn$_invoke$arity$1 = function(name__7140__auto__) {
  return sablono.core.week_field19393.call(null, name__7140__auto__, null);
};
sablono.core.week_field19393.cljs$core$IFn$_invoke$arity$2 = function(name__7140__auto__, value__7141__auto__) {
  return sablono.core.input_field_STAR_.call(null, [cljs.core.str(new cljs.core.Symbol(null, "week", "week", 314058249, null))].join(""), name__7140__auto__, value__7141__auto__);
};
sablono.core.week_field19393.cljs$lang$maxFixedArity = 2;
sablono.core.week_field = sablono.core.wrap_attrs.call(null, sablono.core.week_field19393);
sablono.core.file_upload = sablono.core.file_field;
sablono.core.check_box19413 = function sablono$core$check_box19413() {
  var G__19415 = arguments.length;
  switch(G__19415) {
    case 1:
      return sablono.core.check_box19413.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.check_box19413.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return sablono.core.check_box19413.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.check_box19413.cljs$core$IFn$_invoke$arity$1 = function(name) {
  return sablono.core.check_box19413.call(null, name, null);
};
sablono.core.check_box19413.cljs$core$IFn$_invoke$arity$2 = function(name, checked_QMARK_) {
  return sablono.core.check_box19413.call(null, name, checked_QMARK_, "true");
};
sablono.core.check_box19413.cljs$core$IFn$_invoke$arity$3 = function(name, checked_QMARK_, value) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), "checkbox", new cljs.core.Keyword(null, "name", "name", 1843675177), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", -1388402092), sablono.core.make_id.call(null, name), new cljs.core.Keyword(null, "value", "value", 305978217), 
  value, new cljs.core.Keyword(null, "checked", "checked", -50955819), checked_QMARK_], null)], null);
};
sablono.core.check_box19413.cljs$lang$maxFixedArity = 3;
sablono.core.check_box = sablono.core.wrap_attrs.call(null, sablono.core.check_box19413);
sablono.core.radio_button19417 = function sablono$core$radio_button19417() {
  var G__19419 = arguments.length;
  switch(G__19419) {
    case 1:
      return sablono.core.radio_button19417.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.radio_button19417.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return sablono.core.radio_button19417.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.radio_button19417.cljs$core$IFn$_invoke$arity$1 = function(group) {
  return sablono.core.radio_button19417.call(null, group, null);
};
sablono.core.radio_button19417.cljs$core$IFn$_invoke$arity$2 = function(group, checked_QMARK_) {
  return sablono.core.radio_button19417.call(null, group, checked_QMARK_, "true");
};
sablono.core.radio_button19417.cljs$core$IFn$_invoke$arity$3 = function(group, checked_QMARK_, value) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), "radio", new cljs.core.Keyword(null, "name", "name", 1843675177), sablono.core.make_name.call(null, group), new cljs.core.Keyword(null, "id", "id", -1388402092), sablono.core.make_id.call(null, [cljs.core.str(sablono.util.as_str.call(null, group)), cljs.core.str("-"), 
  cljs.core.str(sablono.util.as_str.call(null, value))].join("")), new cljs.core.Keyword(null, "value", "value", 305978217), value, new cljs.core.Keyword(null, "checked", "checked", -50955819), checked_QMARK_], null)], null);
};
sablono.core.radio_button19417.cljs$lang$maxFixedArity = 3;
sablono.core.radio_button = sablono.core.wrap_attrs.call(null, sablono.core.radio_button19417);
sablono.core.select_options19421 = function sablono$core$select_options19421() {
  var G__19423 = arguments.length;
  switch(G__19423) {
    case 1:
      return sablono.core.select_options19421.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.select_options19421.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.select_options19421.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return sablono.core.select_options19421.call(null, coll, null);
};
sablono.core.select_options19421.cljs$core$IFn$_invoke$arity$2 = function(coll, selected) {
  var iter__5028__auto__ = function sablono$core$iter__19424(s__19425) {
    return new cljs.core.LazySeq(null, function() {
      var s__19425__$1 = s__19425;
      while (true) {
        var temp__4126__auto__ = cljs.core.seq.call(null, s__19425__$1);
        if (temp__4126__auto__) {
          var s__19425__$2 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__19425__$2)) {
            var c__5026__auto__ = cljs.core.chunk_first.call(null, s__19425__$2);
            var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
            var b__19427 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
            if (function() {
              var i__19426 = 0;
              while (true) {
                if (i__19426 < size__5027__auto__) {
                  var x = cljs.core._nth.call(null, c__5026__auto__, i__19426);
                  cljs.core.chunk_append.call(null, b__19427, cljs.core.sequential_QMARK_.call(null, x) ? function() {
                    var vec__19430 = x;
                    var text = cljs.core.nth.call(null, vec__19430, 0, null);
                    var val = cljs.core.nth.call(null, vec__19430, 1, null);
                    var disabled_QMARK_ = cljs.core.nth.call(null, vec__19430, 2, null);
                    var disabled_QMARK___$1 = cljs.core.boolean$.call(null, disabled_QMARK_);
                    if (cljs.core.sequential_QMARK_.call(null, val)) {
                      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optgroup", "optgroup", 1738282218), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "label", "label", 1718410804), text], null), sablono.core.select_options19421.call(null, val, selected)], null);
                    } else {
                      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "value", "value", 305978217), val, new cljs.core.Keyword(null, "selected", "selected", 574897764), cljs.core._EQ_.call(null, val, selected), new cljs.core.Keyword(null, "disabled", "disabled", -1529784218), disabled_QMARK___$1], null), text], null);
                    }
                  }() : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 574897764), cljs.core._EQ_.call(null, x, selected)], null), x], null));
                  var G__19433 = i__19426 + 1;
                  i__19426 = G__19433;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19427), sablono$core$iter__19424.call(null, cljs.core.chunk_rest.call(null, s__19425__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19427), null);
            }
          } else {
            var x = cljs.core.first.call(null, s__19425__$2);
            return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, x) ? function() {
              var vec__19431 = x;
              var text = cljs.core.nth.call(null, vec__19431, 0, null);
              var val = cljs.core.nth.call(null, vec__19431, 1, null);
              var disabled_QMARK_ = cljs.core.nth.call(null, vec__19431, 2, null);
              var disabled_QMARK___$1 = cljs.core.boolean$.call(null, disabled_QMARK_);
              if (cljs.core.sequential_QMARK_.call(null, val)) {
                return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "optgroup", "optgroup", 1738282218), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "label", "label", 1718410804), text], null), sablono.core.select_options19421.call(null, val, selected)], null);
              } else {
                return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "value", "value", 305978217), val, new cljs.core.Keyword(null, "selected", "selected", 574897764), cljs.core._EQ_.call(null, val, selected), new cljs.core.Keyword(null, "disabled", "disabled", -1529784218), disabled_QMARK___$1], null), text], null);
              }
            }() : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selected", "selected", 574897764), cljs.core._EQ_.call(null, x, selected)], null), x], null), sablono$core$iter__19424.call(null, cljs.core.rest.call(null, s__19425__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__5028__auto__.call(null, coll);
};
sablono.core.select_options19421.cljs$lang$maxFixedArity = 2;
sablono.core.select_options = sablono.core.wrap_attrs.call(null, sablono.core.select_options19421);
sablono.core.drop_down19434 = function sablono$core$drop_down19434() {
  var G__19436 = arguments.length;
  switch(G__19436) {
    case 2:
      return sablono.core.drop_down19434.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return sablono.core.drop_down19434.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.drop_down19434.cljs$core$IFn$_invoke$arity$2 = function(name, options) {
  return sablono.core.drop_down19434.call(null, name, options, null);
};
sablono.core.drop_down19434.cljs$core$IFn$_invoke$arity$3 = function(name, options, selected) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "select", "select", 1147833503), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", -1388402092), sablono.core.make_id.call(null, name)], null), sablono.core.select_options.call(null, options, selected)], null);
};
sablono.core.drop_down19434.cljs$lang$maxFixedArity = 3;
sablono.core.drop_down = sablono.core.wrap_attrs.call(null, sablono.core.drop_down19434);
sablono.core.text_area19438 = function sablono$core$text_area19438() {
  var G__19440 = arguments.length;
  switch(G__19440) {
    case 1:
      return sablono.core.text_area19438.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return sablono.core.text_area19438.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
sablono.core.text_area19438.cljs$core$IFn$_invoke$arity$1 = function(name) {
  return sablono.core.text_area19438.call(null, name, null);
};
sablono.core.text_area19438.cljs$core$IFn$_invoke$arity$2 = function(name, value) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), sablono.core.make_name.call(null, name), new cljs.core.Keyword(null, "id", "id", -1388402092), sablono.core.make_id.call(null, name), new cljs.core.Keyword(null, "value", "value", 305978217), value], null)], null);
};
sablono.core.text_area19438.cljs$lang$maxFixedArity = 2;
sablono.core.text_area = sablono.core.wrap_attrs.call(null, sablono.core.text_area19438);
sablono.core.label19442 = function sablono$core$label19442(name, text) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "htmlFor", "htmlFor", -1050291720), sablono.core.make_id.call(null, name)], null), text], null);
};
sablono.core.label = sablono.core.wrap_attrs.call(null, sablono.core.label19442);
sablono.core.submit_button19443 = function sablono$core$submit_button19443(text) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), "submit", new cljs.core.Keyword(null, "value", "value", 305978217), text], null)], null);
};
sablono.core.submit_button = sablono.core.wrap_attrs.call(null, sablono.core.submit_button19443);
sablono.core.reset_button19444 = function sablono$core$reset_button19444(text) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "input", "input", 556931961), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), "reset", new cljs.core.Keyword(null, "value", "value", 305978217), text], null)], null);
};
sablono.core.reset_button = sablono.core.wrap_attrs.call(null, sablono.core.reset_button19444);
sablono.core.form_to19445 = function sablono$core$form_to19445() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return sablono.core.form_to19445.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
sablono.core.form_to19445.cljs$core$IFn$_invoke$arity$variadic = function(p__19448, body) {
  var vec__19449 = p__19448;
  var method = cljs.core.nth.call(null, vec__19449, 0, null);
  var action = cljs.core.nth.call(null, vec__19449, 1, null);
  var method_str = clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  var action_uri = sablono.util.to_uri.call(null, action);
  return cljs.core.vec.call(null, cljs.core.concat.call(null, cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "get", "get", 1683182755), null, new cljs.core.Keyword(null, "post", "post", 269697687), null], null), null), method) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "method", "method", 55703592), method_str, new cljs.core.Keyword(null, "action", "action", -811238024), action_uri], null)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), "POST", new cljs.core.Keyword(null, "action", "action", -811238024), action_uri], null), sablono.core.hidden_field.call(null, 
  "_method", method_str)], null), body));
};
sablono.core.form_to19445.cljs$lang$maxFixedArity = 1;
sablono.core.form_to19445.cljs$lang$applyTo = function(seq19446) {
  var G__19447 = cljs.core.first.call(null, seq19446);
  var seq19446__$1 = cljs.core.next.call(null, seq19446);
  return sablono.core.form_to19445.cljs$core$IFn$_invoke$arity$variadic(G__19447, seq19446__$1);
};
sablono.core.form_to = sablono.core.wrap_attrs.call(null, sablono.core.form_to19445);
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      var t = typeof x;
      switch(t) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str) {
    return types.taggedValue("b", str);
  };
  types.isBinary = function(x) {
    return x instanceof types.TaggedValue && x.tag === "b";
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v) {
    return types.nullValue();
  }, "?":function(v) {
    return types.boolValue(v);
  }, "b":function(v) {
    return types.binary(v);
  }, "i":function(v) {
    return types.intValue(v);
  }, "n":function(v) {
    return types.bigInteger(v);
  }, "d":function(v) {
    return types.floatValue(v);
  }, "f":function(v) {
    return types.bigDecimalValue(v);
  }, "c":function(v) {
    return types.charValue(v);
  }, ":":function(v) {
    return types.keyword(v);
  }, "$":function(v) {
    return types.symbol(v);
  }, "r":function(v) {
    return types.uri(v);
  }, "z":function(v) {
    return types.specialDouble(v);
  }, "'":function(v) {
    return v;
  }, "m":function(v) {
    return types.date(v);
  }, "t":function(v) {
    return types.verboseDate(v);
  }, "u":function(v) {
    return types.uuid(v);
  }, "set":function(v) {
    return types.set(v);
  }, "list":function(v) {
    return types.list(v);
  }, "link":function(v) {
    return types.link(v);
  }, "cmap":function(v) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, false, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true));
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, false, true));
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, false, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2));
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys();
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__8625_8629 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__8626_8630 = null;
  var count__8627_8631 = 0;
  var i__8628_8632 = 0;
  while (true) {
    if (i__8628_8632 < count__8627_8631) {
      var k_8633 = cljs.core._nth.call(null, chunk__8626_8630, i__8628_8632);
      var v_8634 = b[k_8633];
      a[k_8633] = v_8634;
      var G__8635 = seq__8625_8629;
      var G__8636 = chunk__8626_8630;
      var G__8637 = count__8627_8631;
      var G__8638 = i__8628_8632 + 1;
      seq__8625_8629 = G__8635;
      chunk__8626_8630 = G__8636;
      count__8627_8631 = G__8637;
      i__8628_8632 = G__8638;
      continue;
    } else {
      var temp__4126__auto___8639 = cljs.core.seq.call(null, seq__8625_8629);
      if (temp__4126__auto___8639) {
        var seq__8625_8640__$1 = temp__4126__auto___8639;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8625_8640__$1)) {
          var c__5059__auto___8641 = cljs.core.chunk_first.call(null, seq__8625_8640__$1);
          var G__8642 = cljs.core.chunk_rest.call(null, seq__8625_8640__$1);
          var G__8643 = c__5059__auto___8641;
          var G__8644 = cljs.core.count.call(null, c__5059__auto___8641);
          var G__8645 = 0;
          seq__8625_8629 = G__8642;
          chunk__8626_8630 = G__8643;
          count__8627_8631 = G__8644;
          i__8628_8632 = G__8645;
          continue;
        } else {
          var k_8646 = cljs.core.first.call(null, seq__8625_8640__$1);
          var v_8647 = b[k_8646];
          a[k_8646] = v_8647;
          var G__8648 = cljs.core.next.call(null, seq__8625_8640__$1);
          var G__8649 = null;
          var G__8650 = 0;
          var G__8651 = 0;
          seq__8625_8629 = G__8648;
          chunk__8626_8630 = G__8649;
          count__8627_8631 = G__8650;
          i__8628_8632 = G__8651;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader() {
  var G__8653 = arguments.length;
  switch(G__8653) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__8655 = i + 2;
        var G__8656 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__8655;
        ret = G__8656;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__8657_8661 = cljs.core.seq.call(null, v);
  var chunk__8658_8662 = null;
  var count__8659_8663 = 0;
  var i__8660_8664 = 0;
  while (true) {
    if (i__8660_8664 < count__8659_8663) {
      var x_8665 = cljs.core._nth.call(null, chunk__8658_8662, i__8660_8664);
      ret.push(x_8665);
      var G__8666 = seq__8657_8661;
      var G__8667 = chunk__8658_8662;
      var G__8668 = count__8659_8663;
      var G__8669 = i__8660_8664 + 1;
      seq__8657_8661 = G__8666;
      chunk__8658_8662 = G__8667;
      count__8659_8663 = G__8668;
      i__8660_8664 = G__8669;
      continue;
    } else {
      var temp__4126__auto___8670 = cljs.core.seq.call(null, seq__8657_8661);
      if (temp__4126__auto___8670) {
        var seq__8657_8671__$1 = temp__4126__auto___8670;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8657_8671__$1)) {
          var c__5059__auto___8672 = cljs.core.chunk_first.call(null, seq__8657_8671__$1);
          var G__8673 = cljs.core.chunk_rest.call(null, seq__8657_8671__$1);
          var G__8674 = c__5059__auto___8672;
          var G__8675 = cljs.core.count.call(null, c__5059__auto___8672);
          var G__8676 = 0;
          seq__8657_8661 = G__8673;
          chunk__8658_8662 = G__8674;
          count__8659_8663 = G__8675;
          i__8660_8664 = G__8676;
          continue;
        } else {
          var x_8677 = cljs.core.first.call(null, seq__8657_8671__$1);
          ret.push(x_8677);
          var G__8678 = cljs.core.next.call(null, seq__8657_8671__$1);
          var G__8679 = null;
          var G__8680 = 0;
          var G__8681 = 0;
          seq__8657_8661 = G__8678;
          chunk__8658_8662 = G__8679;
          count__8659_8663 = G__8680;
          i__8660_8664 = G__8681;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__8682_8686 = cljs.core.seq.call(null, v);
  var chunk__8683_8687 = null;
  var count__8684_8688 = 0;
  var i__8685_8689 = 0;
  while (true) {
    if (i__8685_8689 < count__8684_8688) {
      var x_8690 = cljs.core._nth.call(null, chunk__8683_8687, i__8685_8689);
      ret.push(x_8690);
      var G__8691 = seq__8682_8686;
      var G__8692 = chunk__8683_8687;
      var G__8693 = count__8684_8688;
      var G__8694 = i__8685_8689 + 1;
      seq__8682_8686 = G__8691;
      chunk__8683_8687 = G__8692;
      count__8684_8688 = G__8693;
      i__8685_8689 = G__8694;
      continue;
    } else {
      var temp__4126__auto___8695 = cljs.core.seq.call(null, seq__8682_8686);
      if (temp__4126__auto___8695) {
        var seq__8682_8696__$1 = temp__4126__auto___8695;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8682_8696__$1)) {
          var c__5059__auto___8697 = cljs.core.chunk_first.call(null, seq__8682_8696__$1);
          var G__8698 = cljs.core.chunk_rest.call(null, seq__8682_8696__$1);
          var G__8699 = c__5059__auto___8697;
          var G__8700 = cljs.core.count.call(null, c__5059__auto___8697);
          var G__8701 = 0;
          seq__8682_8686 = G__8698;
          chunk__8683_8687 = G__8699;
          count__8684_8688 = G__8700;
          i__8685_8689 = G__8701;
          continue;
        } else {
          var x_8702 = cljs.core.first.call(null, seq__8682_8696__$1);
          ret.push(x_8702);
          var G__8703 = cljs.core.next.call(null, seq__8682_8696__$1);
          var G__8704 = null;
          var G__8705 = 0;
          var G__8706 = 0;
          seq__8682_8686 = G__8703;
          chunk__8683_8687 = G__8704;
          count__8684_8688 = G__8705;
          i__8685_8689 = G__8706;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__8707_8711 = cljs.core.seq.call(null, v);
  var chunk__8708_8712 = null;
  var count__8709_8713 = 0;
  var i__8710_8714 = 0;
  while (true) {
    if (i__8710_8714 < count__8709_8713) {
      var x_8715 = cljs.core._nth.call(null, chunk__8708_8712, i__8710_8714);
      ret.push(x_8715);
      var G__8716 = seq__8707_8711;
      var G__8717 = chunk__8708_8712;
      var G__8718 = count__8709_8713;
      var G__8719 = i__8710_8714 + 1;
      seq__8707_8711 = G__8716;
      chunk__8708_8712 = G__8717;
      count__8709_8713 = G__8718;
      i__8710_8714 = G__8719;
      continue;
    } else {
      var temp__4126__auto___8720 = cljs.core.seq.call(null, seq__8707_8711);
      if (temp__4126__auto___8720) {
        var seq__8707_8721__$1 = temp__4126__auto___8720;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8707_8721__$1)) {
          var c__5059__auto___8722 = cljs.core.chunk_first.call(null, seq__8707_8721__$1);
          var G__8723 = cljs.core.chunk_rest.call(null, seq__8707_8721__$1);
          var G__8724 = c__5059__auto___8722;
          var G__8725 = cljs.core.count.call(null, c__5059__auto___8722);
          var G__8726 = 0;
          seq__8707_8711 = G__8723;
          chunk__8708_8712 = G__8724;
          count__8709_8713 = G__8725;
          i__8710_8714 = G__8726;
          continue;
        } else {
          var x_8727 = cljs.core.first.call(null, seq__8707_8721__$1);
          ret.push(x_8727);
          var G__8728 = cljs.core.next.call(null, seq__8707_8721__$1);
          var G__8729 = null;
          var G__8730 = 0;
          var G__8731 = 0;
          seq__8707_8711 = G__8728;
          chunk__8708_8712 = G__8729;
          count__8709_8713 = G__8730;
          i__8710_8714 = G__8731;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer() {
  var G__8733 = arguments.length;
  switch(G__8733) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x8735 = cljs.core.clone.call(null, handlers);
    x8735.forEach = function(x8735, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__8736 = cljs.core.seq.call(null, coll);
        var chunk__8737 = null;
        var count__8738 = 0;
        var i__8739 = 0;
        while (true) {
          if (i__8739 < count__8738) {
            var vec__8740 = cljs.core._nth.call(null, chunk__8737, i__8739);
            var k = cljs.core.nth.call(null, vec__8740, 0, null);
            var v = cljs.core.nth.call(null, vec__8740, 1, null);
            f.call(null, v, k);
            var G__8743 = seq__8736;
            var G__8744 = chunk__8737;
            var G__8745 = count__8738;
            var G__8746 = i__8739 + 1;
            seq__8736 = G__8743;
            chunk__8737 = G__8744;
            count__8738 = G__8745;
            i__8739 = G__8746;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__8736);
            if (temp__4126__auto__) {
              var seq__8736__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__8736__$1)) {
                var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__8736__$1);
                var G__8747 = cljs.core.chunk_rest.call(null, seq__8736__$1);
                var G__8748 = c__5059__auto__;
                var G__8749 = cljs.core.count.call(null, c__5059__auto__);
                var G__8750 = 0;
                seq__8736 = G__8747;
                chunk__8737 = G__8748;
                count__8738 = G__8749;
                i__8739 = G__8750;
                continue;
              } else {
                var vec__8741 = cljs.core.first.call(null, seq__8736__$1);
                var k = cljs.core.nth.call(null, vec__8741, 0, null);
                var v = cljs.core.nth.call(null, vec__8741, 1, null);
                f.call(null, v, k);
                var G__8751 = cljs.core.next.call(null, seq__8736__$1);
                var G__8752 = null;
                var G__8753 = 0;
                var G__8754 = 0;
                seq__8736 = G__8751;
                chunk__8737 = G__8752;
                count__8738 = G__8753;
                i__8739 = G__8754;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x8735, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x8735;
  }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__8734 = obj;
          G__8734.push(kfn.call(null, k), vfn.call(null, v));
          return G__8734;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler() {
  var G__8756 = arguments.length;
  switch(G__8756) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t8757 !== "undefined") {
  } else {
    cognitect.transit.t8757 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, meta8758) {
      this.verbose_handler_fn = verbose_handler_fn;
      this.str_rep_fn = str_rep_fn;
      this.rep_fn = rep_fn;
      this.tag_fn = tag_fn;
      this.meta8758 = meta8758;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cognitect.transit.t8757.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t8757.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t8757.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t8757.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t8757.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8759) {
      var self__ = this;
      var _8759__$1 = this;
      return self__.meta8758;
    };
    cognitect.transit.t8757.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8759, meta8758__$1) {
      var self__ = this;
      var _8759__$1 = this;
      return new cognitect.transit.t8757(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, meta8758__$1);
    };
    cognitect.transit.t8757.cljs$lang$type = true;
    cognitect.transit.t8757.cljs$lang$ctorStr = "cognitect.transit/t8757";
    cognitect.transit.t8757.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "cognitect.transit/t8757");
    };
    cognitect.transit.__GT_t8757 = function cognitect$transit$__GT_t8757(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, meta8758) {
      return new cognitect.transit.t8757(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, meta8758);
    };
  }
  return new cognitect.transit.t8757(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || width == "" || replacement.length >= width) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length < CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  str = str.replace(/\r\n/g, "\n");
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.crypt.base64");
goog.require("goog.crypt");
goog.require("goog.userAgent");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.charToByteMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/\x3d";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO || goog.userAgent.WEBKIT || goog.userAgent.OPERA || typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  if (!goog.isArrayLike(input)) {
    throw Error("encodeByteArray takes an array as a parameter");
  }
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();
  var charToByteMap = opt_webSafe ? goog.crypt.base64.charToByteMapWebSafe_ : goog.crypt.base64.charToByteMap_;
  var output = [];
  for (var i = 0;i < input.length;) {
    var byte1 = charToByteMap[input.charAt(i++)];
    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;
    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
      throw Error();
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    output.push(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      output.push(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        output.push(outByte3);
      }
    }
  }
  return output;
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;
    }
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj8795 = {};
  return obj8795;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4262__auto__ = reader;
    if (and__4262__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4910__auto__ = reader == null ? null : reader;
    return function() {
      var or__4274__auto__ = cljs.reader.read_char[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.reader.read_char["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4262__auto__ = reader;
    if (and__4262__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4910__auto__ = reader == null ? null : reader;
    return function() {
      var or__4274__auto__ = cljs.reader.unread[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.reader.unread["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4274__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq8796) {
  var G__8797 = cljs.core.first.call(null, seq8796);
  var seq8796__$1 = cljs.core.next.call(null, seq8796);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__8797, seq8796__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4262__auto__ = !(ch === "#");
  if (and__4262__auto__) {
    var and__4262__auto____$1 = !(ch === "'");
    if (and__4262__auto____$1) {
      var and__4262__auto____$2 = !(ch === ":");
      if (and__4262__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4262__auto____$2;
      }
    } else {
      return and__4262__auto____$1;
    }
  } else {
    return and__4262__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__8798 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__8799 = cljs.reader.read_char.call(null, rdr);
      sb = G__8798;
      ch = G__8799;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__8800 = cljs.reader.read_char.call(null, rdr);
      ch = G__8800;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__8801 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__8801;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__8802 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__8802;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = ch == null;
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4274__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__8803 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__8804 = cljs.reader.read_char.call(null, reader);
      buffer = G__8803;
      ch = G__8804;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__8805 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__8806 = cljs.reader.read_char.call(null, reader);
        buffer = G__8805;
        ch = G__8806;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__8807 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__8808 = cljs.reader.read_char.call(null, reader);
          buffer = G__8807;
          ch = G__8808;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__8813 = function() {
            var G__8811 = buffer;
            G__8811.append(nch);
            return G__8811;
          }();
          var G__8814 = cljs.reader.read_char.call(null, reader);
          buffer = G__8813;
          ch = G__8814;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__8815 = function() {
            var G__8812 = buffer;
            G__8812.append(ch);
            return G__8812;
          }();
          var G__8816 = cljs.reader.read_char.call(null, reader);
          buffer = G__8815;
          ch = G__8816;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4262__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4262__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__8818 = o;
    if (G__8818) {
      var bit__4948__auto__ = G__8818.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4948__auto__ || G__8818.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__8818.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__8818);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__8818);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__8819 = reader;
        var G__8820 = eof_is_error;
        var G__8821 = sentinel;
        var G__8822 = is_recursive;
        reader = G__8819;
        eof_is_error = G__8820;
        sentinel = G__8821;
        is_recursive = G__8822;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__8823 = cljs.reader.read_comment.call(null, reader, ch);
          var G__8824 = eof_is_error;
          var G__8825 = sentinel;
          var G__8826 = is_recursive;
          reader = G__8823;
          eof_is_error = G__8824;
          sentinel = G__8825;
          is_recursive = G__8826;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__8827 = reader;
            var G__8828 = eof_is_error;
            var G__8829 = sentinel;
            var G__8830 = is_recursive;
            reader = G__8827;
            eof_is_error = G__8828;
            sentinel = G__8829;
            is_recursive = G__8830;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__8831 = b.append("0");
          b = G__8831;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__4262__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__4262__auto__)) {
    var or__4274__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__4262__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__8833 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__8833, 0, null);
  var years = cljs.core.nth.call(null, vec__8833, 1, null);
  var months = cljs.core.nth.call(null, vec__8833, 2, null);
  var days = cljs.core.nth.call(null, vec__8833, 3, null);
  var hours = cljs.core.nth.call(null, vec__8833, 4, null);
  var minutes = cljs.core.nth.call(null, vec__8833, 5, null);
  var seconds = cljs.core.nth.call(null, vec__8833, 6, null);
  var fraction = cljs.core.nth.call(null, vec__8833, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__8833, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__8833, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__8833, 10, null);
  var v = vec__8833;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4274__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__8835 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__8835, 0, null);
    var months = cljs.core.nth.call(null, vec__8835, 1, null);
    var days = cljs.core.nth.call(null, vec__8835, 2, null);
    var hours = cljs.core.nth.call(null, vec__8835, 3, null);
    var minutes = cljs.core.nth.call(null, vec__8835, 4, null);
    var seconds = cljs.core.nth.call(null, vec__8835, 5, null);
    var ms = cljs.core.nth.call(null, vec__8835, 6, null);
    var offset = cljs.core.nth.call(null, vec__8835, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__8848_8860 = cljs.core.seq.call(null, form);
    var chunk__8849_8861 = null;
    var count__8850_8862 = 0;
    var i__8851_8863 = 0;
    while (true) {
      if (i__8851_8863 < count__8850_8862) {
        var x_8864 = cljs.core._nth.call(null, chunk__8849_8861, i__8851_8863);
        arr.push(x_8864);
        var G__8865 = seq__8848_8860;
        var G__8866 = chunk__8849_8861;
        var G__8867 = count__8850_8862;
        var G__8868 = i__8851_8863 + 1;
        seq__8848_8860 = G__8865;
        chunk__8849_8861 = G__8866;
        count__8850_8862 = G__8867;
        i__8851_8863 = G__8868;
        continue;
      } else {
        var temp__4126__auto___8869 = cljs.core.seq.call(null, seq__8848_8860);
        if (temp__4126__auto___8869) {
          var seq__8848_8870__$1 = temp__4126__auto___8869;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8848_8870__$1)) {
            var c__5059__auto___8871 = cljs.core.chunk_first.call(null, seq__8848_8870__$1);
            var G__8872 = cljs.core.chunk_rest.call(null, seq__8848_8870__$1);
            var G__8873 = c__5059__auto___8871;
            var G__8874 = cljs.core.count.call(null, c__5059__auto___8871);
            var G__8875 = 0;
            seq__8848_8860 = G__8872;
            chunk__8849_8861 = G__8873;
            count__8850_8862 = G__8874;
            i__8851_8863 = G__8875;
            continue;
          } else {
            var x_8876 = cljs.core.first.call(null, seq__8848_8870__$1);
            arr.push(x_8876);
            var G__8877 = cljs.core.next.call(null, seq__8848_8870__$1);
            var G__8878 = null;
            var G__8879 = 0;
            var G__8880 = 0;
            seq__8848_8860 = G__8877;
            chunk__8849_8861 = G__8878;
            count__8850_8862 = G__8879;
            i__8851_8863 = G__8880;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj8853 = {};
        return obj8853;
      }();
      var seq__8854_8881 = cljs.core.seq.call(null, form);
      var chunk__8855_8882 = null;
      var count__8856_8883 = 0;
      var i__8857_8884 = 0;
      while (true) {
        if (i__8857_8884 < count__8856_8883) {
          var vec__8858_8885 = cljs.core._nth.call(null, chunk__8855_8882, i__8857_8884);
          var k_8886 = cljs.core.nth.call(null, vec__8858_8885, 0, null);
          var v_8887 = cljs.core.nth.call(null, vec__8858_8885, 1, null);
          obj[cljs.core.name.call(null, k_8886)] = v_8887;
          var G__8888 = seq__8854_8881;
          var G__8889 = chunk__8855_8882;
          var G__8890 = count__8856_8883;
          var G__8891 = i__8857_8884 + 1;
          seq__8854_8881 = G__8888;
          chunk__8855_8882 = G__8889;
          count__8856_8883 = G__8890;
          i__8857_8884 = G__8891;
          continue;
        } else {
          var temp__4126__auto___8892 = cljs.core.seq.call(null, seq__8854_8881);
          if (temp__4126__auto___8892) {
            var seq__8854_8893__$1 = temp__4126__auto___8892;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__8854_8893__$1)) {
              var c__5059__auto___8894 = cljs.core.chunk_first.call(null, seq__8854_8893__$1);
              var G__8895 = cljs.core.chunk_rest.call(null, seq__8854_8893__$1);
              var G__8896 = c__5059__auto___8894;
              var G__8897 = cljs.core.count.call(null, c__5059__auto___8894);
              var G__8898 = 0;
              seq__8854_8881 = G__8895;
              chunk__8855_8882 = G__8896;
              count__8856_8883 = G__8897;
              i__8857_8884 = G__8898;
              continue;
            } else {
              var vec__8859_8899 = cljs.core.first.call(null, seq__8854_8893__$1);
              var k_8900 = cljs.core.nth.call(null, vec__8859_8899, 0, null);
              var v_8901 = cljs.core.nth.call(null, vec__8859_8899, 1, null);
              obj[cljs.core.name.call(null, k_8900)] = v_8901;
              var G__8902 = cljs.core.next.call(null, seq__8854_8893__$1);
              var G__8903 = null;
              var G__8904 = 0;
              var G__8905 = 0;
              seq__8854_8881 = G__8902;
              chunk__8855_8882 = G__8903;
              count__8856_8883 = G__8904;
              i__8857_8884 = G__8905;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("no.en.core");
goog.require("cljs.core");
goog.require("goog.crypt.base64");
goog.require("cljs.reader");
goog.require("clojure.string");
no.en.core.port_number = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "http", "http", 382524695), 80, new cljs.core.Keyword(null, "https", "https", -1983909665), 443, new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), 3306, new cljs.core.Keyword(null, "postgresql", "postgresql", -1568339962), 5432, new cljs.core.Keyword(null, "rabbitmq", "rabbitmq", 1046897371), 5672], null);
no.en.core.url_regex = /([^:]+):\/\/(([^:]+):([^@]+)@)?(([^:\/]+)(:([0-9]+))?((\/[^?]*)(\?([^#]*))?)?)(\#(.*))?/;
no.en.core.split_by_regex = function no$en$core$split_by_regex(s, pattern) {
  if (cljs.core.sequential_QMARK_.call(null, s)) {
    return s;
  } else {
    if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
      return clojure.string.split.call(null, s, pattern);
    } else {
      return null;
    }
  }
};
no.en.core.split_by_comma = function no$en$core$split_by_comma(s) {
  return no.en.core.split_by_regex.call(null, s, /\s*,\s*/);
};
no.en.core.utf8_string = function no$en$core$utf8_string(bytes) {
  throw cljs.core.ex_info.call(null, "utf8-string not implemented yet", bytes);
};
no.en.core.base64_encode = function no$en$core$base64_encode(bytes) {
  if (cljs.core.truth_(bytes)) {
    return goog.crypt.base64.encodeString(bytes, false);
  } else {
    return null;
  }
};
no.en.core.base64_decode = function no$en$core$base64_decode(s) {
  if (cljs.core.truth_(s)) {
    return goog.crypt.base64.decodeString(s, false);
  } else {
    return null;
  }
};
no.en.core.compact_map = function no$en$core$compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (v == null || (cljs.core.map_QMARK_.call(null, v) || cljs.core.sequential_QMARK_.call(null, v)) && cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
no.en.core.url_encode = function no$en$core$url_encode() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__8765) {
  var vec__8766 = p__8765;
  var encoding = cljs.core.nth.call(null, vec__8766, 0, null);
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, encodeURIComponent([cljs.core.str(s)].join("")), "*", "%2A");
  } else {
    return null;
  }
};
no.en.core.url_encode.cljs$lang$maxFixedArity = 1;
no.en.core.url_encode.cljs$lang$applyTo = function(seq8763) {
  var G__8764 = cljs.core.first.call(null, seq8763);
  var seq8763__$1 = cljs.core.next.call(null, seq8763);
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(G__8764, seq8763__$1);
};
no.en.core.url_decode = function no$en$core$url_decode() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__8769) {
  var vec__8770 = p__8769;
  var encoding = cljs.core.nth.call(null, vec__8770, 0, null);
  if (cljs.core.truth_(s)) {
    return decodeURIComponent(s);
  } else {
    return null;
  }
};
no.en.core.url_decode.cljs$lang$maxFixedArity = 1;
no.en.core.url_decode.cljs$lang$applyTo = function(seq8767) {
  var G__8768 = cljs.core.first.call(null, seq8767);
  var seq8767__$1 = cljs.core.next.call(null, seq8767);
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(G__8768, seq8767__$1);
};
no.en.core.pow = function no$en$core$pow(n, x) {
  return Math.pow(n, x);
};
no.en.core.byte_scale = cljs.core.PersistentHashMap.fromArrays(["T", "K", "G", "M", "Y", "Z", "E", "B", "P"], [no.en.core.pow.call(null, 1024, 4), no.en.core.pow.call(null, 1024, 1), no.en.core.pow.call(null, 1024, 3), no.en.core.pow.call(null, 1024, 2), no.en.core.pow.call(null, 1024, 8), no.en.core.pow.call(null, 1024, 7), no.en.core.pow.call(null, 1024, 6), no.en.core.pow.call(null, 1024, 0), no.en.core.pow.call(null, 1024, 5)]);
no.en.core.apply_unit = function no$en$core$apply_unit(number, unit) {
  if (typeof unit === "string") {
    var G__8773 = clojure.string.upper_case.call(null, unit);
    switch(G__8773) {
      default:
        var G__8774 = unit;
        switch(G__8774) {
          case "M":
            return number * 1E6;
            break;
          case "B":
            return number * 1E9;
            break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(unit)].join(""));;
        }
      ;
    }
  } else {
    return number;
  }
};
no.en.core.parse_number = function no$en$core$parse_number(s, parse_fn) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(M|B)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    var number = parse_fn.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    if (cljs.core.not.call(null, isNaN(number))) {
      return no.en.core.apply_unit.call(null, number, unit);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
no.en.core.parse_bytes = function no$en$core$parse_bytes(s) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(B|K|M|G|T|P|E|Z|Y)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    var number = cljs.reader.read_string.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    return cljs.core.long$.call(null, cljs.core.long$.call(null, cljs.reader.read_string.call(null, [cljs.core.str(cljs.core.nth.call(null, matches, 1))].join(""))) * cljs.core.get.call(null, no.en.core.byte_scale, clojure.string.upper_case.call(null, function() {
      var or__4274__auto__ = unit;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return "";
      }
    }()), 1));
  } else {
    return null;
  }
};
no.en.core.parse_integer = function no$en$core$parse_integer(s) {
  return no.en.core.parse_number.call(null, s, function(p1__8777_SHARP_) {
    return parseInt(p1__8777_SHARP_);
  });
};
no.en.core.parse_long = function no$en$core$parse_long(s) {
  return no.en.core.parse_number.call(null, s, function(p1__8778_SHARP_) {
    return parseInt(p1__8778_SHARP_);
  });
};
no.en.core.parse_double = function no$en$core$parse_double(s) {
  return no.en.core.parse_number.call(null, s, function(p1__8779_SHARP_) {
    return parseFloat(p1__8779_SHARP_);
  });
};
no.en.core.parse_float = function no$en$core$parse_float(s) {
  return no.en.core.parse_number.call(null, s, function(p1__8780_SHARP_) {
    return parseFloat(p1__8780_SHARP_);
  });
};
no.en.core.format_query_params = function no$en$core$format_query_params(m) {
  var params = clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__8783_SHARP_) {
    return clojure.string.join.call(null, "\x3d", p1__8783_SHARP_);
  }, cljs.core.map.call(null, function(p1__8782_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no.en.core.url_encode.call(null, cljs.core.name.call(null, cljs.core.first.call(null, p1__8782_SHARP_))), no.en.core.url_encode.call(null, cljs.core.second.call(null, p1__8782_SHARP_))], null);
  }, cljs.core.remove.call(null, function(p1__8781_SHARP_) {
    return clojure.string.blank_QMARK_.call(null, [cljs.core.str(cljs.core.second.call(null, p1__8781_SHARP_))].join(""));
  }, cljs.core.seq.call(null, m)))));
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, params))) {
    return params;
  } else {
    return null;
  }
};
no.en.core.format_url = function no$en$core$format_url(m) {
  if (!cljs.core.empty_QMARK_.call(null, m)) {
    var query_params = (new cljs.core.Keyword(null, "query-params", "query-params", 900640534)).cljs$core$IFn$_invoke$arity$1(m);
    return[cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m))), cljs.core.str("://")].join("") : null), cljs.core.str(function() {
      var map__8785 = m;
      var map__8785__$1 = cljs.core.seq_QMARK_.call(null, map__8785) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8785) : map__8785;
      var password = cljs.core.get.call(null, map__8785__$1, new cljs.core.Keyword(null, "password", "password", 417022471));
      var user = cljs.core.get.call(null, map__8785__$1, new cljs.core.Keyword(null, "user", "user", 1532431356));
      if (cljs.core.truth_(user)) {
        return[cljs.core.str(cljs.core.truth_(user) ? user : null), cljs.core.str(cljs.core.truth_(password) ? [cljs.core.str(":"), cljs.core.str(password)].join("") : null), cljs.core.str("@")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "server-name", "server-name", -1012104295)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(function() {
      var temp__4124__auto__ = (new cljs.core.Keyword(null, "server-port", "server-port", 663745648)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var port = temp__4124__auto__;
        if (!cljs.core._EQ_.call(null, port, no.en.core.port_number.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)))) {
          return[cljs.core.str(":"), cljs.core.str(port)].join("");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m) == null && !cljs.core.empty_QMARK_.call(null, query_params) ? "/" : (new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(!cljs.core.empty_QMARK_.call(null, query_params) ? [cljs.core.str("?"), cljs.core.str(no.en.core.format_query_params.call(null, query_params))].join("") : null), cljs.core.str(cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, 
    (new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))].join("") : null)].join("");
  } else {
    return null;
  }
};
no.en.core.parse_percent = function no$en$core$parse_percent(s) {
  return no.en.core.parse_double.call(null, clojure.string.replace.call(null, s, "%", ""));
};
no.en.core.pattern_quote = function no$en$core$pattern_quote(s) {
  return clojure.string.replace.call(null, cljs.core.name.call(null, s), /([\[\]\^\$\|\(\)\\\+\*\?\{\}\=\!.])/, "\\\\$1");
};
no.en.core.separator = function no$en$core$separator(s) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, /([a-z0-9_-]+)([^a-z0-9_-]+).*/i, s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    return cljs.core.nth.call(null, matches, 2);
  } else {
    return null;
  }
};
no.en.core.parse_query_params = function no$en$core$parse_query_params(s) {
  if (cljs.core.truth_(s)) {
    return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__8788_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, no.en.core.url_decode.call(null, cljs.core.first.call(null, p1__8788_SHARP_))), no.en.core.url_decode.call(null, cljs.core.second.call(null, p1__8788_SHARP_))], null);
    }, cljs.core.filter.call(null, function(p1__8787_SHARP_) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, p1__8787_SHARP_));
    }, cljs.core.map.call(null, function(p1__8786_SHARP_) {
      return clojure.string.split.call(null, p1__8786_SHARP_, /=/);
    }, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/)))));
  } else {
    return null;
  }
};
no.en.core.parse_url = function no$en$core$parse_url(s) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, no.en.core.url_regex, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    var scheme = cljs.core.keyword.call(null, cljs.core.nth.call(null, matches, 1));
    return no.en.core.compact_map.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "password", "password", 417022471), new cljs.core.Keyword(null, "fragment", "fragment", 826775688), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "uri", "uri", -774711847), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), new cljs.core.Keyword(null, 
    "query-string", "query-string", -1018845061), new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.Keyword(null, "scheme", "scheme", 90199613)], [cljs.core.nth.call(null, matches, 4), cljs.core.nth.call(null, matches, 14), function() {
      var or__4274__auto__ = no.en.core.parse_integer.call(null, cljs.core.nth.call(null, matches, 8));
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return no.en.core.port_number.call(null, scheme);
      }
    }(), no.en.core.parse_query_params.call(null, cljs.core.nth.call(null, matches, 12)), cljs.core.nth.call(null, matches, 10), cljs.core.nth.call(null, matches, 6), cljs.core.nth.call(null, matches, 12), cljs.core.nth.call(null, matches, 3), scheme]));
  } else {
    return null;
  }
};
no.en.core.with_retries_STAR_ = function no$en$core$with_retries_STAR_(n, thunk) {
  var n__$1 = n;
  while (true) {
    var temp__4124__auto__ = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [thunk.call(null)], null);
      } catch (e8790) {
        if (e8790 instanceof Error) {
          var e = e8790;
          if (n__$1 === 0) {
            throw e;
          } else {
            return null;
          }
        } else {
          throw e8790;
        }
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var result = temp__4124__auto__;
      return result.call(null, 0);
    } else {
      var G__8791 = n__$1 - 1;
      n__$1 = G__8791;
      continue;
    }
    break;
  }
};
goog.provide("inflections.core");
goog.require("cljs.core");
goog.require("no.en.core");
goog.require("clojure.walk");
goog.require("clojure.string");
inflections.core.Rule = function(pattern, replacement, __meta, __extmap, __hash) {
  this.pattern = pattern;
  this.replacement = replacement;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
inflections.core.Rule.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4869__auto__, k__4870__auto__) {
  var self__ = this;
  var this__4869__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4869__auto____$1, k__4870__auto__, null);
};
inflections.core.Rule.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4871__auto__, k19129, else__4872__auto__) {
  var self__ = this;
  var this__4871__auto____$1 = this;
  var G__19131 = k19129 instanceof cljs.core.Keyword ? k19129.fqn : null;
  switch(G__19131) {
    case "replacement":
      return self__.replacement;
      break;
    case "pattern":
      return self__.pattern;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k19129, else__4872__auto__);
  }
};
inflections.core.Rule.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4883__auto__, writer__4884__auto__, opts__4885__auto__) {
  var self__ = this;
  var this__4883__auto____$1 = this;
  var pr_pair__4886__auto__ = function(this__4883__auto____$1) {
    return function(keyval__4887__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4884__auto__, cljs.core.pr_writer, "", " ", "", opts__4885__auto__, keyval__4887__auto__);
    };
  }(this__4883__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4884__auto__, pr_pair__4886__auto__, "#inflections.core.Rule{", ", ", "}", opts__4885__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pattern", "pattern", 242135423), self__.pattern], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "replacement", "replacement", -1836238839), self__.replacement], null)], null), self__.__extmap));
};
inflections.core.Rule.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4867__auto__) {
  var self__ = this;
  var this__4867__auto____$1 = this;
  return self__.__meta;
};
inflections.core.Rule.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4863__auto__) {
  var self__ = this;
  var this__4863__auto____$1 = this;
  return new inflections.core.Rule(self__.pattern, self__.replacement, self__.__meta, self__.__extmap, self__.__hash);
};
inflections.core.Rule.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4873__auto__) {
  var self__ = this;
  var this__4873__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
inflections.core.Rule.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4864__auto__) {
  var self__ = this;
  var this__4864__auto____$1 = this;
  var h__4690__auto__ = self__.__hash;
  if (!(h__4690__auto__ == null)) {
    return h__4690__auto__;
  } else {
    var h__4690__auto____$1 = cljs.core.hash_imap.call(null, this__4864__auto____$1);
    self__.__hash = h__4690__auto____$1;
    return h__4690__auto____$1;
  }
};
inflections.core.Rule.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4865__auto__, other__4866__auto__) {
  var self__ = this;
  var this__4865__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = other__4866__auto__;
    if (cljs.core.truth_(and__4262__auto__)) {
      var and__4262__auto____$1 = this__4865__auto____$1.constructor === other__4866__auto__.constructor;
      if (and__4262__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4865__auto____$1, other__4866__auto__);
      } else {
        return and__4262__auto____$1;
      }
    } else {
      return and__4262__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
inflections.core.Rule.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4878__auto__, k__4879__auto__) {
  var self__ = this;
  var this__4878__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "replacement", "replacement", -1836238839), null, new cljs.core.Keyword(null, "pattern", "pattern", 242135423), null], null), null), k__4879__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4878__auto____$1), self__.__meta), k__4879__auto__);
  } else {
    return new inflections.core.Rule(self__.pattern, self__.replacement, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4879__auto__)), null);
  }
};
inflections.core.Rule.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4876__auto__, k__4877__auto__, G__19128) {
  var self__ = this;
  var this__4876__auto____$1 = this;
  var pred__19132 = cljs.core.keyword_identical_QMARK_;
  var expr__19133 = k__4877__auto__;
  if (cljs.core.truth_(pred__19132.call(null, new cljs.core.Keyword(null, "pattern", "pattern", 242135423), expr__19133))) {
    return new inflections.core.Rule(G__19128, self__.replacement, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19132.call(null, new cljs.core.Keyword(null, "replacement", "replacement", -1836238839), expr__19133))) {
      return new inflections.core.Rule(self__.pattern, G__19128, self__.__meta, self__.__extmap, null);
    } else {
      return new inflections.core.Rule(self__.pattern, self__.replacement, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4877__auto__, G__19128), null);
    }
  }
};
inflections.core.Rule.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4881__auto__) {
  var self__ = this;
  var this__4881__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pattern", "pattern", 242135423), self__.pattern], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "replacement", "replacement", -1836238839), self__.replacement], null)], null), 
  self__.__extmap));
};
inflections.core.Rule.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4868__auto__, G__19128) {
  var self__ = this;
  var this__4868__auto____$1 = this;
  return new inflections.core.Rule(self__.pattern, self__.replacement, G__19128, self__.__extmap, self__.__hash);
};
inflections.core.Rule.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4874__auto__, entry__4875__auto__) {
  var self__ = this;
  var this__4874__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4875__auto__)) {
    return cljs.core._assoc.call(null, this__4874__auto____$1, cljs.core._nth.call(null, entry__4875__auto__, 0), cljs.core._nth.call(null, entry__4875__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4874__auto____$1, entry__4875__auto__);
  }
};
inflections.core.Rule.cljs$lang$type = true;
inflections.core.Rule.cljs$lang$ctorPrSeq = function(this__4903__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "inflections.core/Rule");
};
inflections.core.Rule.cljs$lang$ctorPrWriter = function(this__4903__auto__, writer__4904__auto__) {
  return cljs.core._write.call(null, writer__4904__auto__, "inflections.core/Rule");
};
inflections.core.__GT_Rule = function inflections$core$__GT_Rule(pattern, replacement) {
  return new inflections.core.Rule(pattern, replacement, null, null, null);
};
inflections.core.map__GT_Rule = function inflections$core$map__GT_Rule(G__19130) {
  return new inflections.core.Rule((new cljs.core.Keyword(null, "pattern", "pattern", 242135423)).cljs$core$IFn$_invoke$arity$1(G__19130), (new cljs.core.Keyword(null, "replacement", "replacement", -1836238839)).cljs$core$IFn$_invoke$arity$1(G__19130), null, cljs.core.dissoc.call(null, G__19130, new cljs.core.Keyword(null, "pattern", "pattern", 242135423), new cljs.core.Keyword(null, "replacement", "replacement", -1836238839)), null);
};
inflections.core.add_rule_BANG_ = function inflections$core$add_rule_BANG_(rules, rule) {
  if (!cljs.core.contains_QMARK_.call(null, cljs.core.set.call(null, cljs.core.deref.call(null, rules)), rule)) {
    return cljs.core.swap_BANG_.call(null, rules, cljs.core.conj, rule);
  } else {
    return null;
  }
};
inflections.core.make_rule = function inflections$core$make_rule(pattern, replacement) {
  return inflections.core.__GT_Rule.call(null, pattern, replacement);
};
inflections.core.slurp_rules = function inflections$core$slurp_rules() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return inflections.core.slurp_rules.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
inflections.core.slurp_rules.cljs$core$IFn$_invoke$arity$variadic = function(patterns_and_replacements) {
  return cljs.core.map.call(null, function(p1__19136_SHARP_) {
    return cljs.core.apply.call(null, inflections.core.make_rule, p1__19136_SHARP_);
  }, cljs.core.partition.call(null, 2, patterns_and_replacements));
};
inflections.core.slurp_rules.cljs$lang$maxFixedArity = 0;
inflections.core.slurp_rules.cljs$lang$applyTo = function(seq19137) {
  return inflections.core.slurp_rules.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19137));
};
inflections.core.resolve_rule = function inflections$core$resolve_rule(rule, word) {
  var pattern = (new cljs.core.Keyword(null, "pattern", "pattern", 242135423)).cljs$core$IFn$_invoke$arity$1(rule);
  var replacement = (new cljs.core.Keyword(null, "replacement", "replacement", -1836238839)).cljs$core$IFn$_invoke$arity$1(rule);
  if (cljs.core.truth_(cljs.core.re_find.call(null, pattern, word))) {
    return clojure.string.replace.call(null, word, pattern, replacement);
  } else {
    return null;
  }
};
inflections.core.resolve_rules = function inflections$core$resolve_rules(rules, word) {
  return cljs.core.first.call(null, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p1__19138_SHARP_) {
    return inflections.core.resolve_rule.call(null, p1__19138_SHARP_, word);
  }, rules)));
};
inflections.core.reset_rules_BANG_ = function inflections$core$reset_rules_BANG_(rules) {
  return cljs.core.reset_BANG_.call(null, rules, cljs.core.PersistentVector.EMPTY);
};
inflections.core._STAR_uncountable_words_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 81, ["gossip", null, "sadness", null, "space", null, "happiness", null, "blood", null, "silver", null, "cotton", null, "species", null, "mist", null, "paper", null, "education", null, "wine", null, "up", null, "food", null, "sugar", null, "gold", null, "literature", null, "pork", null, "lightning", null, "sheep", null, "shopping", null, "fresh", null, 
"news", null, "pepper", null, "experience", null, "milk", null, "honey", null, "oxygen", null, "fiction", null, "luck", null, "vinegar", null, "coffee", null, "ground", null, "peanut", null, "confusion", null, "tennis", null, "power", null, "meat", null, "butter", null, "music", null, "luggage", null, "love", null, "grass", null, "knowledge", null, "time", null, "cheese", null, "jam", null, "thunder", null, "electricity", null, "gum", null, "sunshine", null, "history", null, "snow", null, "money", 
null, "wool", null, "rice", null, "series", null, "liquid", null, "equipment", null, "pressure", null, "oil", null, "information", null, "steam", null, "chewing", null, "petrol", null, "research", null, "patience", null, "toothpaste", null, "speed", null, "entertainment", null, "wood", null, "tea", null, "art", null, "washing", null, "forgiveness", null, "traffic", null, "alcohol", null, "ice", null, "homework", null, "fish", null, "air", null], null), null));
inflections.core.IUncountable = function() {
  var obj19140 = {};
  return obj19140;
}();
inflections.core.countable_QMARK_ = function inflections$core$countable_QMARK_(obj) {
  if (function() {
    var and__4262__auto__ = obj;
    if (and__4262__auto__) {
      return obj.inflections$core$IUncountable$countable_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return obj.inflections$core$IUncountable$countable_QMARK_$arity$1(obj);
  } else {
    var x__4910__auto__ = obj == null ? null : obj;
    return function() {
      var or__4274__auto__ = inflections.core.countable_QMARK_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core.countable_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IUncountable.countable?", obj);
        }
      }
    }().call(null, obj);
  }
};
inflections.core.uncountable_QMARK_ = function inflections$core$uncountable_QMARK_(obj) {
  if (function() {
    var and__4262__auto__ = obj;
    if (and__4262__auto__) {
      return obj.inflections$core$IUncountable$uncountable_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return obj.inflections$core$IUncountable$uncountable_QMARK_$arity$1(obj);
  } else {
    var x__4910__auto__ = obj == null ? null : obj;
    return function() {
      var or__4274__auto__ = inflections.core.uncountable_QMARK_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core.uncountable_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IUncountable.uncountable?", obj);
        }
      }
    }().call(null, obj);
  }
};
inflections.core.add_uncountable_BANG_ = function inflections$core$add_uncountable_BANG_(word) {
  return cljs.core.swap_BANG_.call(null, inflections.core._STAR_uncountable_words_STAR_, cljs.core.conj, clojure.string.lower_case.call(null, cljs.core.name.call(null, word)));
};
inflections.core.delete_uncountable_BANG_ = function inflections$core$delete_uncountable_BANG_(word) {
  return cljs.core.swap_BANG_.call(null, inflections.core._STAR_uncountable_words_STAR_, cljs.core.disj, clojure.string.lower_case.call(null, cljs.core.name.call(null, word)));
};
inflections.core.IUncountable["string"] = true;
inflections.core.countable_QMARK_["string"] = function(s) {
  return cljs.core.not.call(null, inflections.core.uncountable_QMARK_.call(null, s));
};
inflections.core.uncountable_QMARK_["string"] = function(s) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, inflections.core._STAR_uncountable_words_STAR_), clojure.string.lower_case.call(null, s));
};
cljs.core.Symbol.prototype.inflections$core$IUncountable$ = true;
cljs.core.Symbol.prototype.inflections$core$IUncountable$countable_QMARK_$arity$1 = function(s) {
  var s__$1 = this;
  return cljs.core.not.call(null, inflections.core.uncountable_QMARK_.call(null, s__$1));
};
cljs.core.Symbol.prototype.inflections$core$IUncountable$uncountable_QMARK_$arity$1 = function(k) {
  var k__$1 = this;
  return inflections.core.uncountable_QMARK_.call(null, [cljs.core.str(k__$1)].join(""));
};
cljs.core.Keyword.prototype.inflections$core$IUncountable$ = true;
cljs.core.Keyword.prototype.inflections$core$IUncountable$countable_QMARK_$arity$1 = function(s) {
  var s__$1 = this;
  return cljs.core.not.call(null, inflections.core.uncountable_QMARK_.call(null, s__$1));
};
cljs.core.Keyword.prototype.inflections$core$IUncountable$uncountable_QMARK_$arity$1 = function(k) {
  var k__$1 = this;
  return inflections.core.uncountable_QMARK_.call(null, cljs.core.name.call(null, k__$1));
};
inflections.core._STAR_plural_rules_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
inflections.core.Plural = function() {
  var obj19142 = {};
  return obj19142;
}();
inflections.core.plural = function inflections$core$plural(obj) {
  if (function() {
    var and__4262__auto__ = obj;
    if (and__4262__auto__) {
      return obj.inflections$core$Plural$plural$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return obj.inflections$core$Plural$plural$arity$1(obj);
  } else {
    var x__4910__auto__ = obj == null ? null : obj;
    return function() {
      var or__4274__auto__ = inflections.core.plural[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core.plural["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Plural.plural", obj);
        }
      }
    }().call(null, obj);
  }
};
inflections.core.Plural["string"] = true;
inflections.core.plural["string"] = function(s) {
  if (cljs.core.truth_(function() {
    var or__4274__auto__ = clojure.string.blank_QMARK_.call(null, s);
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return inflections.core.uncountable_QMARK_.call(null, s);
    }
  }())) {
    return s;
  } else {
    return inflections.core.resolve_rules.call(null, cljs.core.rseq.call(null, cljs.core.deref.call(null, inflections.core._STAR_plural_rules_STAR_)), s);
  }
};
cljs.core.Symbol.prototype.inflections$core$Plural$ = true;
cljs.core.Symbol.prototype.inflections$core$Plural$plural$arity$1 = function(k) {
  var k__$1 = this;
  return cljs.core.symbol.call(null, inflections.core.plural.call(null, cljs.core.name.call(null, k__$1)));
};
cljs.core.Keyword.prototype.inflections$core$Plural$ = true;
cljs.core.Keyword.prototype.inflections$core$Plural$plural$arity$1 = function(k) {
  var k__$1 = this;
  return cljs.core.keyword.call(null, inflections.core.plural.call(null, cljs.core.name.call(null, k__$1)));
};
inflections.core.plural_BANG_ = function inflections$core$plural_BANG_() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return inflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
inflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(patterns_and_replacements) {
  var seq__19144 = cljs.core.seq.call(null, cljs.core.apply.call(null, inflections.core.slurp_rules, patterns_and_replacements));
  var chunk__19145 = null;
  var count__19146 = 0;
  var i__19147 = 0;
  while (true) {
    if (i__19147 < count__19146) {
      var rule = cljs.core._nth.call(null, chunk__19145, i__19147);
      inflections.core.add_rule_BANG_.call(null, inflections.core._STAR_plural_rules_STAR_, rule);
      var G__19148 = seq__19144;
      var G__19149 = chunk__19145;
      var G__19150 = count__19146;
      var G__19151 = i__19147 + 1;
      seq__19144 = G__19148;
      chunk__19145 = G__19149;
      count__19146 = G__19150;
      i__19147 = G__19151;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__19144);
      if (temp__4126__auto__) {
        var seq__19144__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19144__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__19144__$1);
          var G__19152 = cljs.core.chunk_rest.call(null, seq__19144__$1);
          var G__19153 = c__5059__auto__;
          var G__19154 = cljs.core.count.call(null, c__5059__auto__);
          var G__19155 = 0;
          seq__19144 = G__19152;
          chunk__19145 = G__19153;
          count__19146 = G__19154;
          i__19147 = G__19155;
          continue;
        } else {
          var rule = cljs.core.first.call(null, seq__19144__$1);
          inflections.core.add_rule_BANG_.call(null, inflections.core._STAR_plural_rules_STAR_, rule);
          var G__19156 = cljs.core.next.call(null, seq__19144__$1);
          var G__19157 = null;
          var G__19158 = 0;
          var G__19159 = 0;
          seq__19144 = G__19156;
          chunk__19145 = G__19157;
          count__19146 = G__19158;
          i__19147 = G__19159;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
inflections.core.plural_BANG_.cljs$lang$maxFixedArity = 0;
inflections.core.plural_BANG_.cljs$lang$applyTo = function(seq19143) {
  return inflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19143));
};
inflections.core.init_plural_rules_BANG_ = function inflections$core$init_plural_rules_BANG_() {
  return inflections.core.plural_BANG_.call(null, /$/i, "s", /s$/i, "s", /(ax|test)is$/i, "$1es", /(octop|vir)us$/i, "$1i", /(alias|status)$/i, "$1es", /(bu)s$/i, "$1ses", /(buffal|tomat)o$/i, "$1oes", /([ti])um$/i, "$1a", /sis$/i, "ses", /(?:([^f])fe|([lr])f)$/i, "$1$2ves", /(hive)$/i, "$1s", /([^aeiouy]|qu)y$/i, "$1ies", /(x|ch|ss|sh)$/i, "$1es", /(matr|vert|ind)(?:ix|ex)$/i, "$1ices", /([m|l])ouse$/i, "$1ice", /^(ox)$/i, "$1en", /(quiz)$/i, "$1zes");
};
inflections.core._STAR_singular_rules_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
inflections.core.Singular = function() {
  var obj19161 = {};
  return obj19161;
}();
inflections.core.singular = function inflections$core$singular(obj) {
  if (function() {
    var and__4262__auto__ = obj;
    if (and__4262__auto__) {
      return obj.inflections$core$Singular$singular$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return obj.inflections$core$Singular$singular$arity$1(obj);
  } else {
    var x__4910__auto__ = obj == null ? null : obj;
    return function() {
      var or__4274__auto__ = inflections.core.singular[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core.singular["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Singular.singular", obj);
        }
      }
    }().call(null, obj);
  }
};
inflections.core.Singular["string"] = true;
inflections.core.singular["string"] = function(s) {
  if (cljs.core.truth_(inflections.core.uncountable_QMARK_.call(null, s))) {
    return s;
  } else {
    var or__4274__auto__ = inflections.core.resolve_rules.call(null, cljs.core.rseq.call(null, cljs.core.deref.call(null, inflections.core._STAR_singular_rules_STAR_)), s);
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return s;
    }
  }
};
cljs.core.Symbol.prototype.inflections$core$Singular$ = true;
cljs.core.Symbol.prototype.inflections$core$Singular$singular$arity$1 = function(k) {
  var k__$1 = this;
  return cljs.core.symbol.call(null, inflections.core.singular.call(null, cljs.core.name.call(null, k__$1)));
};
cljs.core.Keyword.prototype.inflections$core$Singular$ = true;
cljs.core.Keyword.prototype.inflections$core$Singular$singular$arity$1 = function(k) {
  var k__$1 = this;
  return cljs.core.keyword.call(null, inflections.core.singular.call(null, cljs.core.name.call(null, k__$1)));
};
inflections.core.singular_BANG_ = function inflections$core$singular_BANG_() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return inflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
inflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(patterns_and_replacements) {
  var seq__19163 = cljs.core.seq.call(null, cljs.core.apply.call(null, inflections.core.slurp_rules, patterns_and_replacements));
  var chunk__19164 = null;
  var count__19165 = 0;
  var i__19166 = 0;
  while (true) {
    if (i__19166 < count__19165) {
      var rule = cljs.core._nth.call(null, chunk__19164, i__19166);
      inflections.core.add_rule_BANG_.call(null, inflections.core._STAR_singular_rules_STAR_, rule);
      var G__19167 = seq__19163;
      var G__19168 = chunk__19164;
      var G__19169 = count__19165;
      var G__19170 = i__19166 + 1;
      seq__19163 = G__19167;
      chunk__19164 = G__19168;
      count__19165 = G__19169;
      i__19166 = G__19170;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__19163);
      if (temp__4126__auto__) {
        var seq__19163__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19163__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__19163__$1);
          var G__19171 = cljs.core.chunk_rest.call(null, seq__19163__$1);
          var G__19172 = c__5059__auto__;
          var G__19173 = cljs.core.count.call(null, c__5059__auto__);
          var G__19174 = 0;
          seq__19163 = G__19171;
          chunk__19164 = G__19172;
          count__19165 = G__19173;
          i__19166 = G__19174;
          continue;
        } else {
          var rule = cljs.core.first.call(null, seq__19163__$1);
          inflections.core.add_rule_BANG_.call(null, inflections.core._STAR_singular_rules_STAR_, rule);
          var G__19175 = cljs.core.next.call(null, seq__19163__$1);
          var G__19176 = null;
          var G__19177 = 0;
          var G__19178 = 0;
          seq__19163 = G__19175;
          chunk__19164 = G__19176;
          count__19165 = G__19177;
          i__19166 = G__19178;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
inflections.core.singular_BANG_.cljs$lang$maxFixedArity = 0;
inflections.core.singular_BANG_.cljs$lang$applyTo = function(seq19162) {
  return inflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19162));
};
inflections.core.init_singular_rules_BANG_ = function inflections$core$init_singular_rules_BANG_() {
  return inflections.core.singular_BANG_.call(null, /s$/i, "", /(ss)$/i, "$1", /(n)ews$/i, "$1ews", /([ti])a$/i, "$1um", /((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "$1$2sis", /(^analy)(sis|ses)$/i, "$1sis", /([^f])ves$/i, "$1fe", /(hive)s$/i, "$1", /(tive)s$/i, "$1", /([lr])ves$/i, "$1f", /([^aeiouy]|qu)ies$/i, "$1y", /(s)eries$/i, "$1eries", /(m)ovies$/i, "$1ovie", /(x|ch|ss|sh)es$/i, "$1", /([m|l])ice$/i, "$1ouse", /(bus)(es)?$/i, "$1", /(o)es$/i, "$1", /(shoe)s$/i, 
  "$1", /(cris|ax|test)(is|es)$/i, "$1is", /(octop|vir)(us|i)$/i, "$1us", /(alias|status)(es)?$/i, "$1", /^(ox)en/i, "$1", /(vert|ind)ices$/i, "$1ex", /(matr)ices$/i, "$1ix", /(quiz)zes$/i, "$1", /(database)s$/i, "$1");
};
inflections.core._STAR_irregular_words_STAR_ = cljs.core.atom.call(null, cljs.core.sorted_set.call(null));
inflections.core.Irregular = function() {
  var obj19180 = {};
  return obj19180;
}();
inflections.core.irregular_QMARK_ = function inflections$core$irregular_QMARK_(obj) {
  if (function() {
    var and__4262__auto__ = obj;
    if (and__4262__auto__) {
      return obj.inflections$core$Irregular$irregular_QMARK_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return obj.inflections$core$Irregular$irregular_QMARK_$arity$1(obj);
  } else {
    var x__4910__auto__ = obj == null ? null : obj;
    return function() {
      var or__4274__auto__ = inflections.core.irregular_QMARK_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core.irregular_QMARK_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Irregular.irregular?", obj);
        }
      }
    }().call(null, obj);
  }
};
inflections.core.add_irregular_BANG_ = function inflections$core$add_irregular_BANG_(singular, plural) {
  var singular__$1 = clojure.string.lower_case.call(null, cljs.core.name.call(null, singular));
  var plural__$1 = clojure.string.lower_case.call(null, cljs.core.name.call(null, plural));
  inflections.core.delete_uncountable_BANG_.call(null, singular__$1);
  inflections.core.delete_uncountable_BANG_.call(null, plural__$1);
  inflections.core.singular_BANG_.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(plural__$1), cljs.core.str("$")].join("")), singular__$1);
  inflections.core.plural_BANG_.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(singular__$1), cljs.core.str("$")].join("")), plural__$1);
  cljs.core.swap_BANG_.call(null, inflections.core._STAR_irregular_words_STAR_, cljs.core.conj, singular__$1);
  return cljs.core.swap_BANG_.call(null, inflections.core._STAR_irregular_words_STAR_, cljs.core.conj, plural__$1);
};
inflections.core.delete_irregular_BANG_ = function inflections$core$delete_irregular_BANG_(singular, plural) {
  var singular__$1 = clojure.string.lower_case.call(null, cljs.core.name.call(null, singular));
  var plural__$1 = clojure.string.lower_case.call(null, cljs.core.name.call(null, plural));
  cljs.core.swap_BANG_.call(null, inflections.core._STAR_irregular_words_STAR_, cljs.core.disj, singular__$1);
  return cljs.core.swap_BANG_.call(null, inflections.core._STAR_irregular_words_STAR_, cljs.core.disj, plural__$1);
};
inflections.core.Irregular["string"] = true;
inflections.core.irregular_QMARK_["string"] = function(s) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, inflections.core._STAR_irregular_words_STAR_), clojure.string.lower_case.call(null, s));
};
cljs.core.Symbol.prototype.inflections$core$Irregular$ = true;
cljs.core.Symbol.prototype.inflections$core$Irregular$irregular_QMARK_$arity$1 = function(k) {
  var k__$1 = this;
  return inflections.core.irregular_QMARK_.call(null, cljs.core.name.call(null, k__$1));
};
cljs.core.Keyword.prototype.inflections$core$Irregular$ = true;
cljs.core.Keyword.prototype.inflections$core$Irregular$irregular_QMARK_$arity$1 = function(k) {
  var k__$1 = this;
  return inflections.core.irregular_QMARK_.call(null, cljs.core.name.call(null, k__$1));
};
inflections.core.init_irregular_words_BANG_ = function inflections$core$init_irregular_words_BANG_() {
  return cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__19181_SHARP_) {
    return inflections.core.add_irregular_BANG_.call(null, cljs.core.first.call(null, p1__19181_SHARP_), cljs.core.second.call(null, p1__19181_SHARP_));
  }, new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["amenity", "amenities"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["child", "children"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["cow", "kine"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  ["foot", "feet"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["louse", "lice"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mailman", "mailmen"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["man", "men"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["mouse", "mice"], null), new cljs.core.PersistentVector(null, 2, 
  5, cljs.core.PersistentVector.EMPTY_NODE, ["move", "moves"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["ox", "oxen"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["person", "people"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sex", "sexes"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["tooth", "teeth"], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["woman", "women"], null)], null)));
};
inflections.core.ICamelize = function() {
  var obj19183 = {};
  return obj19183;
}();
inflections.core._camelize = function inflections$core$_camelize(object, mode) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$ICamelize$_camelize$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$ICamelize$_camelize$arity$2(object, mode);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._camelize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._camelize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICamelize.-camelize", object);
        }
      }
    }().call(null, object, mode);
  }
};
inflections.core.ICamelize["string"] = true;
inflections.core._camelize["string"] = function(obj, mode) {
  if (cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "lower", "lower", 1120320821))) {
    return inflections.core._camelize.call(null, obj, clojure.string.lower_case);
  } else {
    if (cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "upper", "upper", 246243906))) {
      return inflections.core._camelize.call(null, obj, clojure.string.upper_case);
    } else {
      if (cljs.core.fn_QMARK_.call(null, mode)) {
        return[cljs.core.str(mode.call(null, [cljs.core.str(cljs.core.first.call(null, obj))].join(""))), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, inflections.core._camelize.call(null, obj, null))))].join("");
      } else {
        return clojure.string.replace.call(null, clojure.string.replace.call(null, [cljs.core.str(obj)].join(""), /\/(.?)/, function(p1__19184_SHARP_) {
          return[cljs.core.str("::"), cljs.core.str(clojure.string.upper_case.call(null, cljs.core.nth.call(null, p1__19184_SHARP_, 1)))].join("");
        }), /(^|_|-)(.)/, function(p1__19185_SHARP_) {
          var vec__19186 = p1__19185_SHARP_;
          var f = cljs.core.nth.call(null, vec__19186, 0, null);
          var r = cljs.core.nth.call(null, vec__19186, 1, null);
          return[cljs.core.str(cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["-", null, "_", null], null), null)).call(null, f)) ? clojure.string.upper_case.call(null, f) : null), cljs.core.str(cljs.core.truth_(r) ? clojure.string.upper_case.call(null, r) : null)].join("");
        });
      }
    }
  }
};
cljs.core.Symbol.prototype.inflections$core$ICamelize$ = true;
cljs.core.Symbol.prototype.inflections$core$ICamelize$_camelize$arity$2 = function(obj, mode) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._camelize.call(null, [cljs.core.str(obj__$1)].join(""), mode));
};
cljs.core.Keyword.prototype.inflections$core$ICamelize$ = true;
cljs.core.Keyword.prototype.inflections$core$ICamelize$_camelize$arity$2 = function(obj, mode) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._camelize.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, [cljs.core.str(obj__$1)].join(""))), mode));
};
inflections.core.ICamelize["null"] = true;
inflections.core._camelize["null"] = function(_, ___$1) {
  return null;
};
inflections.core.camelize = function inflections$core$camelize() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return inflections.core.camelize.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
inflections.core.camelize.cljs$core$IFn$_invoke$arity$variadic = function(obj, p__19189) {
  var vec__19190 = p__19189;
  var mode = cljs.core.nth.call(null, vec__19190, 0, null);
  return inflections.core._camelize.call(null, obj, mode);
};
inflections.core.camelize.cljs$lang$maxFixedArity = 1;
inflections.core.camelize.cljs$lang$applyTo = function(seq19187) {
  var G__19188 = cljs.core.first.call(null, seq19187);
  var seq19187__$1 = cljs.core.next.call(null, seq19187);
  return inflections.core.camelize.cljs$core$IFn$_invoke$arity$variadic(G__19188, seq19187__$1);
};
inflections.core.ICapitalize = function() {
  var obj19192 = {};
  return obj19192;
}();
inflections.core._capitalize = function inflections$core$_capitalize(object) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$ICapitalize$_capitalize$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$ICapitalize$_capitalize$arity$1(object);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._capitalize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._capitalize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICapitalize.-capitalize", object);
        }
      }
    }().call(null, object);
  }
};
inflections.core.ICapitalize["string"] = true;
inflections.core._capitalize["string"] = function(obj) {
  return[cljs.core.str(clojure.string.upper_case.call(null, [cljs.core.str(cljs.core.first.call(null, obj))].join(""))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, obj))))].join("");
};
cljs.core.Symbol.prototype.inflections$core$ICapitalize$ = true;
cljs.core.Symbol.prototype.inflections$core$ICapitalize$_capitalize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._capitalize.call(null, [cljs.core.str(obj__$1)].join("")));
};
cljs.core.Keyword.prototype.inflections$core$ICapitalize$ = true;
cljs.core.Keyword.prototype.inflections$core$ICapitalize$_capitalize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._capitalize.call(null, cljs.core.name.call(null, obj__$1)));
};
inflections.core.ICapitalize["null"] = true;
inflections.core._capitalize["null"] = function(_) {
  return null;
};
inflections.core.capitalize = function inflections$core$capitalize(obj) {
  return inflections.core._capitalize.call(null, obj);
};
inflections.core.IDasherize = function() {
  var obj19194 = {};
  return obj19194;
}();
inflections.core._dasherize = function inflections$core$_dasherize(object) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IDasherize$_dasherize$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IDasherize$_dasherize$arity$1(object);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._dasherize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._dasherize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDasherize.-dasherize", object);
        }
      }
    }().call(null, object);
  }
};
inflections.core.IDasherize["string"] = true;
inflections.core._dasherize["string"] = function(obj) {
  return clojure.string.replace.call(null, obj, /_/, "-");
};
cljs.core.Symbol.prototype.inflections$core$IDasherize$ = true;
cljs.core.Symbol.prototype.inflections$core$IDasherize$_dasherize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._dasherize.call(null, [cljs.core.str(obj__$1)].join("")));
};
cljs.core.Keyword.prototype.inflections$core$IDasherize$ = true;
cljs.core.Keyword.prototype.inflections$core$IDasherize$_dasherize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._dasherize.call(null, cljs.core.name.call(null, obj__$1)));
};
inflections.core.IDasherize["null"] = true;
inflections.core._dasherize["null"] = function(_) {
  return null;
};
inflections.core.dasherize = function inflections$core$dasherize(obj) {
  return inflections.core._dasherize.call(null, obj);
};
inflections.core.IDemodulize = function() {
  var obj19196 = {};
  return obj19196;
}();
inflections.core._demodulize = function inflections$core$_demodulize(object) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IDemodulize$_demodulize$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IDemodulize$_demodulize$arity$1(object);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._demodulize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._demodulize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDemodulize.-demodulize", object);
        }
      }
    }().call(null, object);
  }
};
inflections.core.IDemodulize["string"] = true;
inflections.core._demodulize["string"] = function(obj) {
  return clojure.string.replace.call(null, obj, /^.*(::|\.)/, "");
};
cljs.core.Symbol.prototype.inflections$core$IDemodulize$ = true;
cljs.core.Symbol.prototype.inflections$core$IDemodulize$_demodulize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._demodulize.call(null, [cljs.core.str(obj__$1)].join("")));
};
cljs.core.Keyword.prototype.inflections$core$IDemodulize$ = true;
cljs.core.Keyword.prototype.inflections$core$IDemodulize$_demodulize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._demodulize.call(null, cljs.core.name.call(null, obj__$1)));
};
inflections.core.IDemodulize["null"] = true;
inflections.core._demodulize["null"] = function(_) {
  return null;
};
inflections.core.demodulize = function inflections$core$demodulize(obj) {
  return inflections.core._demodulize.call(null, obj);
};
inflections.core.IHyphenize = function() {
  var obj19198 = {};
  return obj19198;
}();
inflections.core._hyphenize = function inflections$core$_hyphenize(object) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IHyphenize$_hyphenize$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IHyphenize$_hyphenize$arity$1(object);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._hyphenize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._hyphenize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHyphenize.-hyphenize", object);
        }
      }
    }().call(null, object);
  }
};
inflections.core.IHyphenize["string"] = true;
inflections.core._hyphenize["string"] = function(obj) {
  return clojure.string.lower_case.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, obj, /::/, "/"), /([A-Z]+)([A-Z][a-z])/, "$1-$2"), /([a-z\d])([A-Z])/, "$1-$2"), /\s+/, "-"), /_/, "-"));
};
cljs.core.Symbol.prototype.inflections$core$IHyphenize$ = true;
cljs.core.Symbol.prototype.inflections$core$IHyphenize$_hyphenize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._hyphenize.call(null, [cljs.core.str(obj__$1)].join("")));
};
cljs.core.Keyword.prototype.inflections$core$IHyphenize$ = true;
cljs.core.Keyword.prototype.inflections$core$IHyphenize$_hyphenize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._hyphenize.call(null, cljs.core.name.call(null, obj__$1)));
};
inflections.core.IHyphenize["null"] = true;
inflections.core._hyphenize["null"] = function(_) {
  return null;
};
inflections.core.hyphenize = function inflections$core$hyphenize(obj) {
  return inflections.core._hyphenize.call(null, obj);
};
inflections.core.IOrdinalize = function() {
  var obj19200 = {};
  return obj19200;
}();
inflections.core._ordinalize = function inflections$core$_ordinalize(object) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IOrdinalize$_ordinalize$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IOrdinalize$_ordinalize$arity$1(object);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._ordinalize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._ordinalize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOrdinalize.-ordinalize", object);
        }
      }
    }().call(null, object);
  }
};
inflections.core.IOrdinalize["string"] = true;
inflections.core._ordinalize["string"] = function(obj) {
  var temp__4124__auto__ = no.en.core.parse_integer.call(null, obj);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var number = temp__4124__auto__;
    if (cljs.core.contains_QMARK_.call(null, cljs.core.set.call(null, cljs.core.range.call(null, 11, 14)), cljs.core.mod.call(null, number, 100))) {
      return[cljs.core.str(number), cljs.core.str("th")].join("");
    } else {
      var modulus = cljs.core.mod.call(null, number, 10);
      if (cljs.core._EQ_.call(null, modulus, 1)) {
        return[cljs.core.str(number), cljs.core.str("st")].join("");
      } else {
        if (cljs.core._EQ_.call(null, modulus, 2)) {
          return[cljs.core.str(number), cljs.core.str("nd")].join("");
        } else {
          if (cljs.core._EQ_.call(null, modulus, 3)) {
            return[cljs.core.str(number), cljs.core.str("rd")].join("");
          } else {
            return[cljs.core.str(number), cljs.core.str("th")].join("");
          }
        }
      }
    }
  } else {
    return null;
  }
};
inflections.core.IOrdinalize["number"] = true;
inflections.core._ordinalize["number"] = function(obj) {
  return inflections.core._ordinalize.call(null, [cljs.core.str(obj)].join(""));
};
cljs.core.Symbol.prototype.inflections$core$IOrdinalize$ = true;
cljs.core.Symbol.prototype.inflections$core$IOrdinalize$_ordinalize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._ordinalize.call(null, [cljs.core.str(obj__$1)].join("")));
};
cljs.core.Keyword.prototype.inflections$core$IOrdinalize$ = true;
cljs.core.Keyword.prototype.inflections$core$IOrdinalize$_ordinalize$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._ordinalize.call(null, cljs.core.name.call(null, obj__$1)));
};
inflections.core.IOrdinalize["null"] = true;
inflections.core._ordinalize["null"] = function(_) {
  return null;
};
inflections.core.ordinalize = function inflections$core$ordinalize(obj) {
  return inflections.core._ordinalize.call(null, obj);
};
inflections.core.IParameterize = function() {
  var obj19202 = {};
  return obj19202;
}();
inflections.core._parameterize = function inflections$core$_parameterize(object, sep) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IParameterize$_parameterize$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IParameterize$_parameterize$arity$2(object, sep);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._parameterize[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._parameterize["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IParameterize.-parameterize", object);
        }
      }
    }().call(null, object, sep);
  }
};
inflections.core.IParameterize["string"] = true;
inflections.core._parameterize["string"] = function(obj, sep) {
  var sep__$1 = function() {
    var or__4274__auto__ = sep;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return "-";
    }
  }();
  return clojure.string.lower_case.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, obj, /[^A-Za-z0-9]+/, sep__$1), /\++/, sep__$1), cljs.core.re_pattern.call(null, [cljs.core.str(sep__$1), cljs.core.str("{2,}")].join("")), sep__$1), cljs.core.re_pattern.call(null, [cljs.core.str("(?i)(^"), cljs.core.str(sep__$1), cljs.core.str(")|("), cljs.core.str(sep__$1), cljs.core.str("$)")].join("")), ""));
};
cljs.core.Symbol.prototype.inflections$core$IParameterize$ = true;
cljs.core.Symbol.prototype.inflections$core$IParameterize$_parameterize$arity$2 = function(obj, sep) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._parameterize.call(null, [cljs.core.str(obj__$1)].join(""), sep));
};
cljs.core.Keyword.prototype.inflections$core$IParameterize$ = true;
cljs.core.Keyword.prototype.inflections$core$IParameterize$_parameterize$arity$2 = function(obj, sep) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._parameterize.call(null, cljs.core.name.call(null, obj__$1), sep));
};
inflections.core.IParameterize["null"] = true;
inflections.core._parameterize["null"] = function(_, ___$1) {
  return null;
};
inflections.core.parameterize = function inflections$core$parameterize() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return inflections.core.parameterize.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
inflections.core.parameterize.cljs$core$IFn$_invoke$arity$variadic = function(obj, p__19205) {
  var vec__19206 = p__19205;
  var separator = cljs.core.nth.call(null, vec__19206, 0, null);
  return inflections.core._parameterize.call(null, obj, separator);
};
inflections.core.parameterize.cljs$lang$maxFixedArity = 1;
inflections.core.parameterize.cljs$lang$applyTo = function(seq19203) {
  var G__19204 = cljs.core.first.call(null, seq19203);
  var seq19203__$1 = cljs.core.next.call(null, seq19203);
  return inflections.core.parameterize.cljs$core$IFn$_invoke$arity$variadic(G__19204, seq19203__$1);
};
inflections.core.pluralize = function inflections$core$pluralize() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return inflections.core.pluralize.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
inflections.core.pluralize.cljs$core$IFn$_invoke$arity$variadic = function(count, singular, p__19210) {
  var vec__19211 = p__19210;
  var plural = cljs.core.nth.call(null, vec__19211, 0, null);
  return[cljs.core.str(count), cljs.core.str(" "), cljs.core.str(cljs.core._EQ_.call(null, 1, count) ? singular : function() {
    var or__4274__auto__ = plural;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return inflections.core.plural.call(null, singular);
    }
  }())].join("");
};
inflections.core.pluralize.cljs$lang$maxFixedArity = 2;
inflections.core.pluralize.cljs$lang$applyTo = function(seq19207) {
  var G__19208 = cljs.core.first.call(null, seq19207);
  var seq19207__$1 = cljs.core.next.call(null, seq19207);
  var G__19209 = cljs.core.first.call(null, seq19207__$1);
  var seq19207__$2 = cljs.core.next.call(null, seq19207__$1);
  return inflections.core.pluralize.cljs$core$IFn$_invoke$arity$variadic(G__19208, G__19209, seq19207__$2);
};
inflections.core.IUnderscore = function() {
  var obj19213 = {};
  return obj19213;
}();
inflections.core._underscore = function inflections$core$_underscore(object) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IUnderscore$_underscore$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IUnderscore$_underscore$arity$1(object);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._underscore[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._underscore["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IUnderscore.-underscore", object);
        }
      }
    }().call(null, object);
  }
};
inflections.core.IUnderscore["string"] = true;
inflections.core._underscore["string"] = function(obj) {
  return clojure.string.lower_case.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, obj, /::/, "/"), /([A-Z\d]+)([A-Z][a-z])/, "$1_$2"), /([a-z\d])([A-Z])/, "$1_$2"), /-/, "_"));
};
cljs.core.Symbol.prototype.inflections$core$IUnderscore$ = true;
cljs.core.Symbol.prototype.inflections$core$IUnderscore$_underscore$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._underscore.call(null, [cljs.core.str(obj__$1)].join("")));
};
cljs.core.Keyword.prototype.inflections$core$IUnderscore$ = true;
cljs.core.Keyword.prototype.inflections$core$IUnderscore$_underscore$arity$1 = function(obj) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._underscore.call(null, cljs.core.name.call(null, obj__$1)));
};
inflections.core.IUnderscore["null"] = true;
inflections.core._underscore["null"] = function(_) {
  return null;
};
inflections.core.underscore = function inflections$core$underscore(obj) {
  return inflections.core._underscore.call(null, obj);
};
inflections.core.IForeignKey = function() {
  var obj19215 = {};
  return obj19215;
}();
inflections.core._foreign_key = function inflections$core$_foreign_key(object, sep) {
  if (function() {
    var and__4262__auto__ = object;
    if (and__4262__auto__) {
      return object.inflections$core$IForeignKey$_foreign_key$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return object.inflections$core$IForeignKey$_foreign_key$arity$2(object, sep);
  } else {
    var x__4910__auto__ = object == null ? null : object;
    return function() {
      var or__4274__auto__ = inflections.core._foreign_key[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = inflections.core._foreign_key["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IForeignKey.-foreign-key", object);
        }
      }
    }().call(null, object, sep);
  }
};
inflections.core.IForeignKey["string"] = true;
inflections.core._foreign_key["string"] = function(obj, sep) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, obj))) {
    return[cljs.core.str(inflections.core.underscore.call(null, inflections.core.hyphenize.call(null, inflections.core.singular.call(null, inflections.core.demodulize.call(null, obj))))), cljs.core.str(function() {
      var or__4274__auto__ = sep;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return "_";
      }
    }()), cljs.core.str("id")].join("");
  } else {
    return null;
  }
};
cljs.core.Symbol.prototype.inflections$core$IForeignKey$ = true;
cljs.core.Symbol.prototype.inflections$core$IForeignKey$_foreign_key$arity$2 = function(obj, sep) {
  var obj__$1 = this;
  return cljs.core.symbol.call(null, inflections.core._foreign_key.call(null, [cljs.core.str(obj__$1)].join(""), sep));
};
cljs.core.Keyword.prototype.inflections$core$IForeignKey$ = true;
cljs.core.Keyword.prototype.inflections$core$IForeignKey$_foreign_key$arity$2 = function(obj, sep) {
  var obj__$1 = this;
  return cljs.core.keyword.call(null, inflections.core._foreign_key.call(null, cljs.core.name.call(null, obj__$1), sep));
};
inflections.core.IForeignKey["null"] = true;
inflections.core._foreign_key["null"] = function(_, ___$1) {
  return null;
};
inflections.core.foreign_key = function inflections$core$foreign_key() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return inflections.core.foreign_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
inflections.core.foreign_key.cljs$core$IFn$_invoke$arity$variadic = function(obj, p__19218) {
  var vec__19219 = p__19218;
  var separator = cljs.core.nth.call(null, vec__19219, 0, null);
  return inflections.core._foreign_key.call(null, obj, separator);
};
inflections.core.foreign_key.cljs$lang$maxFixedArity = 1;
inflections.core.foreign_key.cljs$lang$applyTo = function(seq19216) {
  var G__19217 = cljs.core.first.call(null, seq19216);
  var seq19216__$1 = cljs.core.next.call(null, seq19216);
  return inflections.core.foreign_key.cljs$core$IFn$_invoke$arity$variadic(G__19217, seq19216__$1);
};
inflections.core.transform_keys = function inflections$core$transform_keys(m, f) {
  if (cljs.core.map_QMARK_.call(null, m)) {
    return cljs.core.reduce.call(null, function(memo, key) {
      var value = cljs.core.get.call(null, m, key);
      return cljs.core.assoc.call(null, cljs.core.dissoc.call(null, memo, key), f.call(null, key), cljs.core.map_QMARK_.call(null, value) ? inflections$core$transform_keys.call(null, value, f) : cljs.core.sequential_QMARK_.call(null, value) ? cljs.core.map.call(null, function(value) {
        return function(p1__19220_SHARP_) {
          return inflections$core$transform_keys.call(null, p1__19220_SHARP_, f);
        };
      }(value), value) : value);
    }, m, cljs.core.keys.call(null, m));
  } else {
    return m;
  }
};
inflections.core.transform_values = function inflections$core$transform_values(m, f) {
  if (cljs.core.map_QMARK_.call(null, m)) {
    return cljs.core.reduce.call(null, function(memo, key) {
      var value = cljs.core.get.call(null, m, key);
      return cljs.core.assoc.call(null, memo, key, cljs.core.map_QMARK_.call(null, value) ? inflections$core$transform_values.call(null, value, f) : f.call(null, value));
    }, m, cljs.core.keys.call(null, m));
  } else {
    return m;
  }
};
inflections.core.camelize_keys = function inflections$core$camelize_keys() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return inflections.core.camelize_keys.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
inflections.core.camelize_keys.cljs$core$IFn$_invoke$arity$variadic = function(m, p__19224) {
  var vec__19225 = p__19224;
  var mode = cljs.core.nth.call(null, vec__19225, 0, null);
  return inflections.core.transform_keys.call(null, m, function(vec__19225, mode) {
    return function(p1__19221_SHARP_) {
      return inflections.core.camelize.call(null, p1__19221_SHARP_, mode);
    };
  }(vec__19225, mode));
};
inflections.core.camelize_keys.cljs$lang$maxFixedArity = 1;
inflections.core.camelize_keys.cljs$lang$applyTo = function(seq19222) {
  var G__19223 = cljs.core.first.call(null, seq19222);
  var seq19222__$1 = cljs.core.next.call(null, seq19222);
  return inflections.core.camelize_keys.cljs$core$IFn$_invoke$arity$variadic(G__19223, seq19222__$1);
};
inflections.core.hyphenize_keys = function inflections$core$hyphenize_keys(m) {
  return inflections.core.transform_keys.call(null, m, inflections.core.hyphenize);
};
inflections.core.hyphenize_values = function inflections$core$hyphenize_values(m) {
  return inflections.core.transform_values.call(null, m, inflections.core.hyphenize);
};
inflections.core.stringify_keys = function inflections$core$stringify_keys(m) {
  return inflections.core.transform_keys.call(null, m, function(p1__19226_SHARP_) {
    if (p1__19226_SHARP_ instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, p1__19226_SHARP_);
    } else {
      return[cljs.core.str(p1__19226_SHARP_)].join("");
    }
  });
};
inflections.core.stringify_values = function inflections$core$stringify_values(m) {
  return inflections.core.transform_values.call(null, m, function(p1__19227_SHARP_) {
    if (p1__19227_SHARP_ instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, p1__19227_SHARP_);
    } else {
      return[cljs.core.str(p1__19227_SHARP_)].join("");
    }
  });
};
inflections.core.underscore_keys = function inflections$core$underscore_keys(m) {
  return inflections.core.transform_keys.call(null, m, inflections.core.underscore);
};
inflections.core.init_inflections_BANG_ = function inflections$core$init_inflections_BANG_() {
  inflections.core.init_plural_rules_BANG_.call(null);
  inflections.core.init_singular_rules_BANG_.call(null);
  return inflections.core.init_irregular_words_BANG_.call(null);
};
inflections.core.init_inflections_BANG_.call(null);
goog.provide("hatti.utils");
goog.require("cljs.core");
goog.require("inflections.core");
goog.require("goog.string");
goog.require("goog.string.format");
goog.require("cognitect.transit");
goog.require("clojure.string");
hatti.utils.url = function hatti$utils$url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return hatti.utils.url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
hatti.utils.url.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return clojure.string.join.call(null, "/", args);
};
hatti.utils.url.cljs$lang$maxFixedArity = 0;
hatti.utils.url.cljs$lang$applyTo = function(seq19119) {
  return hatti.utils.url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq19119));
};
hatti.utils.last_url_param = function hatti$utils$last_url_param(url) {
  var last_param = cljs.core.last.call(null, clojure.string.split.call(null, [cljs.core.str(url)].join(""), /\//));
  return cljs.core.first.call(null, clojure.string.split.call(null, [cljs.core.str(last_param)].join(""), /.json/));
};
hatti.utils.json__GT_cljs = function hatti$utils$json__GT_cljs(s) {
  return cognitect.transit.read.call(null, cognitect.transit.reader.call(null, new cljs.core.Keyword(null, "json", "json", 1279968570)), s);
};
hatti.utils.json__GT_js = function hatti$utils$json__GT_js(s) {
  return JSON.parse(s);
};
hatti.utils.json__GT_js__GT_cljs = function hatti$utils$json__GT_js__GT_cljs(s) {
  return cljs.core.js__GT_clj.call(null, hatti.utils.json__GT_js.call(null, s), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
hatti.utils.format = function hatti$utils$format() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return hatti.utils.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
hatti.utils.format.cljs$core$IFn$_invoke$arity$variadic = function(fmt, args) {
  return cljs.core.apply.call(null, goog.string.format, fmt, args);
};
hatti.utils.format.cljs$lang$maxFixedArity = 1;
hatti.utils.format.cljs$lang$applyTo = function(seq19120) {
  var G__19121 = cljs.core.first.call(null, seq19120);
  var seq19120__$1 = cljs.core.next.call(null, seq19120);
  return hatti.utils.format.cljs$core$IFn$_invoke$arity$variadic(G__19121, seq19120__$1);
};
hatti.utils.safe_regex = function hatti$utils$safe_regex() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return hatti.utils.safe_regex.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
hatti.utils.safe_regex.cljs$core$IFn$_invoke$arity$variadic = function(s, p__19124) {
  var map__19125 = p__19124;
  var map__19125__$1 = cljs.core.seq_QMARK_.call(null, map__19125) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19125) : map__19125;
  var ignore_case_QMARK_ = cljs.core.get.call(null, map__19125__$1, new cljs.core.Keyword(null, "ignore-case?", "ignore-case?", -956106212), true);
  var s__$1 = s.replace(/\/[\-\[\]\\/\{\}\(\)\*\+\?\.\\\^\$\|]\//, "\\$\x26");
  return new RegExp(s__$1, "i");
};
hatti.utils.safe_regex.cljs$lang$maxFixedArity = 1;
hatti.utils.safe_regex.cljs$lang$applyTo = function(seq19122) {
  var G__19123 = cljs.core.first.call(null, seq19122);
  var seq19122__$1 = cljs.core.next.call(null, seq19122);
  return hatti.utils.safe_regex.cljs$core$IFn$_invoke$arity$variadic(G__19123, seq19122__$1);
};
hatti.utils.indexed = function hatti$utils$indexed(coll) {
  return cljs.core.map_indexed.call(null, cljs.core.vector, coll);
};
hatti.utils.click_fn = function hatti$utils$click_fn(f) {
  return function(event) {
    event.preventDefault();
    return f.call(null);
  };
};
hatti.utils.pluralize_number = function hatti$utils$pluralize_number(number, kind) {
  return clojure.string.join.call(null, " ", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [number, cljs.core._EQ_.call(null, 1, number) ? kind : inflections.core.plural.call(null, kind)], null));
};
goog.provide("hatti.ona.forms");
goog.require("cljs.core");
goog.require("hatti.utils");
goog.require("clojure.string");
hatti.ona.forms.no_answer = "No Answer";
hatti.ona.forms.submission_time_field = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "name", "name", 1843675177), "_submission_time", new cljs.core.Keyword(null, "full-name", "full-name", 408178550), "_submission_time", new cljs.core.Keyword(null, "label", "label", 1718410804), "Submission Time", new cljs.core.Keyword(null, "type", "type", 1174270348), "dateTime"], null);
hatti.ona.forms.field_type_in_set_QMARK_ = function hatti$ona$forms$field_type_in_set_QMARK_(types, field) {
  return cljs.core.contains_QMARK_.call(null, types, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(field));
};
hatti.ona.forms.group_QMARK_ = function hatti$ona$forms$group_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["group", null], null), null), field);
};
hatti.ona.forms.repeat_QMARK_ = function hatti$ona$forms$repeat_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["repeat", null], null), null), field);
};
hatti.ona.forms.numeric_QMARK_ = function hatti$ona$forms$numeric_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["integer", null, "decimal", null], null), null), field);
};
hatti.ona.forms.time_based_QMARK_ = function hatti$ona$forms$time_based_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, ["today", null, "dateTime", null, "start", null, "time", null, "date", null, "end", null], null), null), field);
};
hatti.ona.forms.categorical_QMARK_ = function hatti$ona$forms$categorical_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["select all that apply", null, "select one", null], null), null), field);
};
hatti.ona.forms.select_one_QMARK_ = function hatti$ona$forms$select_one_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["select one", null], null), null), field);
};
hatti.ona.forms.select_all_QMARK_ = function hatti$ona$forms$select_all_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["select all that apply", null], null), null), field);
};
hatti.ona.forms.text_QMARK_ = function hatti$ona$forms$text_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["string", null, "text", null], null), null), field);
};
hatti.ona.forms.note_QMARK_ = function hatti$ona$forms$note_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["note", null], null), null), field);
};
hatti.ona.forms.meta_QMARK_ = function hatti$ona$forms$meta_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, ["subscriberid", null, "phonenumber", null, "instanceID", null, "today", null, "deviceid", null, "uuid", null, "start", null, "imei", null, "simserial", null, "end", null], null), null), field);
};
hatti.ona.forms.geofield_QMARK_ = function hatti$ona$forms$geofield_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, ["geoshape", null, "geotrace", null, "geopoint", null, "osm", null, "gps", null], null), null), field);
};
hatti.ona.forms.geopoint_QMARK_ = function hatti$ona$forms$geopoint_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["geopoint", null, "gps", null], null), null), field);
};
hatti.ona.forms.geoshape_QMARK_ = function hatti$ona$forms$geoshape_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["geoshape", null], null), null), field);
};
hatti.ona.forms.image_QMARK_ = function hatti$ona$forms$image_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["image", null, "photo", null], null), null), field);
};
hatti.ona.forms.osm_QMARK_ = function hatti$ona$forms$osm_QMARK_(field) {
  return hatti.ona.forms.field_type_in_set_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, ["osm", null], null), null), field);
};
hatti.ona.forms.has_data_QMARK_ = function hatti$ona$forms$has_data_QMARK_(field) {
  return cljs.core.not.call(null, function() {
    var or__4274__auto__ = hatti.ona.forms.note_QMARK_.call(null, field);
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return hatti.ona.forms.group_QMARK_.call(null, field);
    }
  }());
};
hatti.ona.forms.get_icon = function hatti$ona$forms$get_icon(field) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "i", "i", -1386841315), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.truth_(hatti.ona.forms.time_based_QMARK_.call(null, field)) ? "fa fa-clock-o" : cljs.core.truth_(hatti.ona.forms.numeric_QMARK_.call(null, field)) ? "fa fa-bar-chart" : cljs.core.truth_(hatti.ona.forms.categorical_QMARK_.call(null, field)) ? "fa fa-bar-chart fa-flip-h-rotate-90" : 
  ""], null)], null);
};
hatti.ona.forms.get_label = function hatti$ona$forms$get_label() {
  var G__10961 = arguments.length;
  switch(G__10961) {
    case 1:
      return hatti.ona.forms.get_label.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return hatti.ona.forms.get_label.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5326__auto__);
  }
};
hatti.ona.forms.get_label.cljs$core$IFn$_invoke$arity$1 = function(labelled_obj) {
  return hatti.ona.forms.get_label.call(null, labelled_obj, null);
};
hatti.ona.forms.get_label.cljs$core$IFn$_invoke$arity$variadic = function(p__10962, p__10963) {
  var map__10964 = p__10962;
  var map__10964__$1 = cljs.core.seq_QMARK_.call(null, map__10964) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10964) : map__10964;
  var name = cljs.core.get.call(null, map__10964__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var label = cljs.core.get.call(null, map__10964__$1, new cljs.core.Keyword(null, "label", "label", 1718410804));
  var vec__10965 = p__10963;
  var language = cljs.core.nth.call(null, vec__10965, 0, null);
  if (!cljs.core.map_QMARK_.call(null, label)) {
    if (cljs.core.truth_(label)) {
      return label;
    } else {
      return name;
    }
  } else {
    if (cljs.core.contains_QMARK_.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, label)), language)) {
      return label.call(null, language);
    } else {
      return label.call(null, cljs.core.first.call(null, cljs.core.sort.call(null, cljs.core.keys.call(null, label))));
    }
  }
};
hatti.ona.forms.get_label.cljs$lang$applyTo = function(seq10958) {
  var G__10959 = cljs.core.first.call(null, seq10958);
  var seq10958__$1 = cljs.core.next.call(null, seq10958);
  return hatti.ona.forms.get_label.cljs$core$IFn$_invoke$arity$variadic(G__10959, seq10958__$1);
};
hatti.ona.forms.get_label.cljs$lang$maxFixedArity = 1;
hatti.ona.forms.format_answer = function hatti$ona$forms$format_answer() {
  var G__10975 = arguments.length;
  switch(G__10975) {
    case 2:
      return hatti.ona.forms.format_answer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return hatti.ona.forms.format_answer.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
hatti.ona.forms.format_answer.cljs$core$IFn$_invoke$arity$2 = function(field, answer) {
  return hatti.ona.forms.format_answer.call(null, field, answer, null);
};
hatti.ona.forms.format_answer.cljs$core$IFn$_invoke$arity$variadic = function(field, answer, language, p__10976) {
  var map__10977 = p__10976;
  var map__10977__$1 = cljs.core.seq_QMARK_.call(null, map__10977) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10977) : map__10977;
  var compact_QMARK_ = cljs.core.get.call(null, map__10977__$1, new cljs.core.Keyword(null, "compact?", "compact?", 1216893298));
  var which = cljs.core.truth_(hatti.ona.forms.image_QMARK_.call(null, field)) ? new cljs.core.Keyword(null, "img", "img", 1442687358) : cljs.core.truth_(hatti.ona.forms.osm_QMARK_.call(null, field)) ? new cljs.core.Keyword(null, "osm", "osm", 855693280) : cljs.core.truth_(hatti.ona.forms.repeat_QMARK_.call(null, field)) ? new cljs.core.Keyword(null, "rpt", "rpt", 596328309) : cljs.core.truth_(hatti.ona.forms.select_one_QMARK_.call(null, field)) ? new cljs.core.Keyword(null, "sel1", "sel1", -989581477) : 
  cljs.core.truth_(hatti.ona.forms.select_all_QMARK_.call(null, field)) ? new cljs.core.Keyword(null, "selm", "selm", 1619526583) : new cljs.core.Keyword(null, "else", "else", -1508377146);
  var G__10978 = which instanceof cljs.core.Keyword ? which.fqn : null;
  switch(G__10978) {
    case "else":
      return answer;
      break;
    case "rpt":
      if (cljs.core.empty_QMARK_.call(null, answer)) {
        return "";
      } else {
        return[cljs.core.str("Repeated data with "), cljs.core.str(cljs.core.count.call(null, answer)), cljs.core.str(" answers.")].join("");
      }
      break;
    case "osm":
      if (cljs.core.truth_(answer)) {
        var kw__GT_name = cljs.core.name;
        var map__10979 = answer;
        var map__10979__$1 = cljs.core.seq_QMARK_.call(null, map__10979) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10979) : map__10979;
        var osm_id = cljs.core.get.call(null, map__10979__$1, new cljs.core.Keyword(null, "osm-id", "osm-id", -1125866420));
        var type = cljs.core.get.call(null, map__10979__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
        var name = cljs.core.get.call(null, map__10979__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
        var type_cap = cljs.core.truth_(type) ? clojure.string.capitalize.call(null, type) : null;
        var title = [cljs.core.str("OSM "), cljs.core.str(type_cap), cljs.core.str(": "), cljs.core.str(name), cljs.core.str(" ("), cljs.core.str(osm_id), cljs.core.str(")")].join("");
        if (cljs.core.truth_(compact_QMARK_)) {
          return title;
        } else {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table.osm-data", "table.osm-data", -2112963294), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "thead", "thead", -291875296), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "th", "th", -545608566), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
          "col-span", "col-span", -232603210), 2], null), title], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tbody", "tbody", -80678300), cljs.core.map.call(null, function(kw__GT_name, map__10979, map__10979__$1, osm_id, type, name, type_cap, title, G__10978, which, map__10977, map__10977__$1, compact_QMARK_) {
            return function(p__10980) {
              var vec__10981 = p__10980;
              var tk = cljs.core.nth.call(null, vec__10981, 0, null);
              var tv = cljs.core.nth.call(null, vec__10981, 1, null);
              if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, tv))) {
                return null;
              } else {
                return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td.question", "td.question", -381922608), kw__GT_name.call(null, tk)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "td.answer", "td.answer", 1235375692), tv], 
                null)], null);
              }
            };
          }(kw__GT_name, map__10979, map__10979__$1, osm_id, type, name, type_cap, title, G__10978, which, map__10977, map__10977__$1, compact_QMARK_), (new cljs.core.Keyword(null, "tags", "tags", 1771418977)).cljs$core$IFn$_invoke$arity$1(answer))], null)], null);
        }
      } else {
        return null;
      }
      break;
    case "img":
      var image = (new cljs.core.Keyword(null, "download_url", "download_url", -2115471203)).cljs$core$IFn$_invoke$arity$1(answer);
      var thumb = function() {
        var or__4274__auto__ = (new cljs.core.Keyword(null, "small_download_url", "small_download_url", 1654303565)).cljs$core$IFn$_invoke$arity$1(answer);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return image;
        }
      }();
      var fname = hatti.utils.last_url_param.call(null, (new cljs.core.Keyword(null, "filename", "filename", -1428840783)).cljs$core$IFn$_invoke$arity$1(answer));
      if (answer == null || typeof answer === "string") {
        return answer;
      } else {
        if (cljs.core.truth_(compact_QMARK_)) {
          return hatti.utils.format.call(null, "\x3ca href\x3d'%s' target\x3d'_blank'\x3e\n                                      \x3ci class\x3d'fa fa-external-link'\x3e\x3c/i\x3e\n                                      %s \x3c/a\x3e", image, fname);
        } else {
          if (thumb == null) {
            return answer;
          } else {
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), image, new cljs.core.Keyword(null, "target", "target", 253001721), "_blank"], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.PersistentArrayMap(null, 
            2, [new cljs.core.Keyword(null, "width", "width", -384071477), "80px", new cljs.core.Keyword(null, "src", "src", -1651076051), thumb], null)], null)], null);
          }
        }
      }
      break;
    case "selm":
      if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, answer))) {
        return hatti.ona.forms.no_answer;
      } else {
        var names = cljs.core.set.call(null, clojure.string.split.call(null, answer, / /));
        return clojure.string.join.call(null, cljs.core.map.call(null, function(names, G__10978, which, map__10977, map__10977__$1, compact_QMARK_) {
          return function(p1__10969_SHARP_) {
            return[cljs.core.str("\u2611 "), cljs.core.str(hatti.ona.forms.get_label.call(null, p1__10969_SHARP_, language)), cljs.core.str(" ")].join("");
          };
        }(names, G__10978, which, map__10977, map__10977__$1, compact_QMARK_), cljs.core.filter.call(null, function(names, G__10978, which, map__10977, map__10977__$1, compact_QMARK_) {
          return function(p1__10968_SHARP_) {
            return cljs.core.contains_QMARK_.call(null, names, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p1__10968_SHARP_));
          };
        }(names, G__10978, which, map__10977, map__10977__$1, compact_QMARK_), (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(field))));
      }
      break;
    case "sel1":
      if (cljs.core.not.call(null, answer)) {
        return hatti.ona.forms.no_answer;
      } else {
        var option = cljs.core.first.call(null, cljs.core.filter.call(null, function(G__10978, which, map__10977, map__10977__$1, compact_QMARK_) {
          return function(p1__10967_SHARP_) {
            return cljs.core._EQ_.call(null, answer, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p1__10967_SHARP_));
          };
        }(G__10978, which, map__10977, map__10977__$1, compact_QMARK_), (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(field)));
        var formatted = hatti.ona.forms.get_label.call(null, option, language);
        if (cljs.core.truth_(formatted)) {
          return formatted;
        } else {
          return answer;
        }
      }
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(which)].join(""));;
  }
};
hatti.ona.forms.format_answer.cljs$lang$applyTo = function(seq10970) {
  var G__10971 = cljs.core.first.call(null, seq10970);
  var seq10970__$1 = cljs.core.next.call(null, seq10970);
  var G__10972 = cljs.core.first.call(null, seq10970__$1);
  var seq10970__$2 = cljs.core.next.call(null, seq10970__$1);
  var G__10973 = cljs.core.first.call(null, seq10970__$2);
  var seq10970__$3 = cljs.core.next.call(null, seq10970__$2);
  return hatti.ona.forms.format_answer.cljs$core$IFn$_invoke$arity$variadic(G__10971, G__10972, G__10973, seq10970__$3);
};
hatti.ona.forms.format_answer.cljs$lang$maxFixedArity = 2;
hatti.ona.forms.relabel_meta_field = function hatti$ona$forms$relabel_meta_field(field) {
  var label = function() {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(field);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var type = temp__4124__auto__;
      var G__10986 = type;
      switch(G__10986) {
        case "start":
          return "Start time";
          break;
        case "end":
          return "End time";
          break;
        case "today":
          return "Day of survey";
          break;
        case "deviceid":
          return "Device ID (IMEI)";
          break;
        case "imei":
          return "IMEI";
          break;
        case "subscriberid":
          return "IMSI";
          break;
        case "simserial":
          return "SIM serial number";
          break;
        case "uuid":
          return "UUID";
          break;
        case "instanceID":
          return "Instance ID";
          break;
        case "phonenumber":
          return "Phone number";
          break;
        default:
          return(new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(field);
      }
    } else {
      var G__10987 = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(field);
      switch(G__10987) {
        case "_submission_time":
          return "Submission time";
          break;
        default:
          return "";
      }
    }
  }();
  if (cljs.core.truth_((new cljs.core.Keyword(null, "label", "label", 1718410804)).cljs$core$IFn$_invoke$arity$1(field))) {
    return field;
  } else {
    return cljs.core.assoc.call(null, field, new cljs.core.Keyword(null, "label", "label", 1718410804), label);
  }
};
hatti.ona.forms.flatten_form = function hatti$ona$forms$flatten_form() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return hatti.ona.forms.flatten_form.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
hatti.ona.forms.flatten_form.cljs$core$IFn$_invoke$arity$variadic = function(form, p__10995) {
  var map__10996 = p__10995;
  var map__10996__$1 = cljs.core.seq_QMARK_.call(null, map__10996) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10996) : map__10996;
  var flatten_repeats_QMARK_ = cljs.core.get.call(null, map__10996__$1, new cljs.core.Keyword(null, "flatten-repeats?", "flatten-repeats?", 2012911394));
  var name_label_map = function(map__10996, map__10996__$1, flatten_repeats_QMARK_) {
    return function hatti$ona$forms$name_label_map(nd, prefix, acc) {
      var map__11000 = nd;
      var map__11000__$1 = cljs.core.seq_QMARK_.call(null, map__11000) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11000) : map__11000;
      var label = cljs.core.get.call(null, map__11000__$1, new cljs.core.Keyword(null, "label", "label", 1718410804));
      var name = cljs.core.get.call(null, map__11000__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var children = cljs.core.get.call(null, map__11000__$1, new cljs.core.Keyword(null, "children", "children", -940561982));
      var type = cljs.core.get.call(null, map__11000__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
      var full_name = cljs.core.truth_(prefix) ? [cljs.core.str(prefix), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
      var langs = cljs.core.map_QMARK_.call(null, label) ? cljs.core.keys.call(null, label) : null;
      var nd__$1 = cljs.core.with_meta.call(null, cljs.core.assoc.call(null, nd, new cljs.core.Keyword(null, "full-name", "full-name", 408178550), full_name), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "langs", "langs", 1700794362), langs], null));
      var mini_nd = cljs.core.dissoc.call(null, nd__$1, new cljs.core.Keyword(null, "children", "children", -940561982));
      var new_children = cljs.core.map.call(null, function(map__11000, map__11000__$1, label, name, children, type, full_name, langs, nd__$1, mini_nd, map__10996, map__10996__$1, flatten_repeats_QMARK_) {
        return function(p1__10990_SHARP_) {
          return hatti$ona$forms$name_label_map.call(null, p1__10990_SHARP_, full_name, cljs.core.PersistentVector.EMPTY);
        };
      }(map__11000, map__11000__$1, label, name, children, type, full_name, langs, nd__$1, mini_nd, map__10996, map__10996__$1, flatten_repeats_QMARK_), children);
      if (cljs.core.truth_(hatti.ona.forms.group_QMARK_.call(null, nd__$1))) {
        return cljs.core.concat.call(null, cljs.core.conj.call(null, acc, mini_nd), new_children);
      } else {
        if (cljs.core.truth_(hatti.ona.forms.repeat_QMARK_.call(null, nd__$1))) {
          if (cljs.core.truth_(flatten_repeats_QMARK_)) {
            return cljs.core.concat.call(null, cljs.core.conj.call(null, acc, mini_nd), new_children);
          } else {
            return cljs.core.conj.call(null, acc, cljs.core.assoc.call(null, nd__$1, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.apply.call(null, cljs.core.concat, new_children)));
          }
        } else {
          return cljs.core.conj.call(null, acc, nd__$1);
        }
      }
    };
  }(map__10996, map__10996__$1, flatten_repeats_QMARK_);
  var nodes = cljs.core.flatten.call(null, cljs.core.map.call(null, function(map__10996, map__10996__$1, flatten_repeats_QMARK_) {
    return function(p1__10991_SHARP_) {
      return name_label_map.call(null, p1__10991_SHARP_, null, cljs.core.PersistentVector.EMPTY);
    };
  }(map__10996, map__10996__$1, flatten_repeats_QMARK_), (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(form)));
  var langs = cljs.core.distinct.call(null, cljs.core.flatten.call(null, cljs.core.map.call(null, function(nodes, map__10996, map__10996__$1, flatten_repeats_QMARK_) {
    return function(p1__10992_SHARP_) {
      return(new cljs.core.Keyword(null, "langs", "langs", 1700794362)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__10992_SHARP_));
    };
  }(nodes, map__10996, map__10996__$1, flatten_repeats_QMARK_), nodes)));
  return cljs.core.with_meta.call(null, nodes, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "languages", "languages", 1471910331), cljs.core.remove.call(null, cljs.core.nil_QMARK_, langs)], null));
};
hatti.ona.forms.flatten_form.cljs$lang$maxFixedArity = 1;
hatti.ona.forms.flatten_form.cljs$lang$applyTo = function(seq10993) {
  var G__10994 = cljs.core.first.call(null, seq10993);
  var seq10993__$1 = cljs.core.next.call(null, seq10993);
  return hatti.ona.forms.flatten_form.cljs$core$IFn$_invoke$arity$variadic(G__10994, seq10993__$1);
};
hatti.ona.forms.meta_fields = function hatti$ona$forms$meta_fields() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return hatti.ona.forms.meta_fields.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
hatti.ona.forms.meta_fields.cljs$core$IFn$_invoke$arity$variadic = function(flat_form, p__11004) {
  var map__11005 = p__11004;
  var map__11005__$1 = cljs.core.seq_QMARK_.call(null, map__11005) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11005) : map__11005;
  var with_submission_time_QMARK_ = cljs.core.get.call(null, map__11005__$1, new cljs.core.Keyword(null, "with-submission-time?", "with-submission-time?", -1502739741));
  var relabel_QMARK_ = cljs.core.get.call(null, map__11005__$1, new cljs.core.Keyword(null, "relabel?", "relabel?", 898608477), true);
  var meta_fields = cljs.core.filter.call(null, hatti.ona.forms.meta_QMARK_, flat_form);
  var include_stime = cljs.core.truth_(with_submission_time_QMARK_) ? function(meta_fields, map__11005, map__11005__$1, with_submission_time_QMARK_, relabel_QMARK_) {
    return function(p1__11001_SHARP_) {
      return cljs.core.conj.call(null, p1__11001_SHARP_, hatti.ona.forms.submission_time_field);
    };
  }(meta_fields, map__11005, map__11005__$1, with_submission_time_QMARK_, relabel_QMARK_) : cljs.core.identity;
  var relabel = cljs.core.truth_(relabel_QMARK_) ? hatti.ona.forms.relabel_meta_field : cljs.core.identity;
  return include_stime.call(null, cljs.core.map.call(null, relabel, meta_fields));
};
hatti.ona.forms.meta_fields.cljs$lang$maxFixedArity = 1;
hatti.ona.forms.meta_fields.cljs$lang$applyTo = function(seq11002) {
  var G__11003 = cljs.core.first.call(null, seq11002);
  var seq11002__$1 = cljs.core.next.call(null, seq11002);
  return hatti.ona.forms.meta_fields.cljs$core$IFn$_invoke$arity$variadic(G__11003, seq11002__$1);
};
hatti.ona.forms.non_meta_fields = function hatti$ona$forms$non_meta_fields(flat_form) {
  return cljs.core.remove.call(null, hatti.ona.forms.meta_QMARK_, flat_form);
};
hatti.ona.forms.english_QMARK_ = function hatti$ona$forms$english_QMARK_(language) {
  return cljs.core.re_find.call(null, /english/i, [cljs.core.str(language)].join(""));
};
hatti.ona.forms.get_languages = function hatti$ona$forms$get_languages(form) {
  return(new cljs.core.Keyword(null, "languages", "languages", 1471910331)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
};
hatti.ona.forms.multilingual_QMARK_ = function hatti$ona$forms$multilingual_QMARK_(form) {
  return cljs.core.seq.call(null, hatti.ona.forms.get_languages.call(null, form));
};
hatti.ona.forms.default_lang = function hatti$ona$forms$default_lang(languages) {
  var temp__4124__auto__ = cljs.core.first.call(null, cljs.core.filter.call(null, hatti.ona.forms.english_QMARK_, languages));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var eng = temp__4124__auto__;
    return eng;
  } else {
    return cljs.core.first.call(null, cljs.core.sort.call(null, languages));
  }
};
goog.provide("om.dom");
goog.require("cljs.core");
goog.require("goog.object");
om.dom.a = function om$dom$a() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.a.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.a.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.a.cljs$lang$maxFixedArity = 1;
om.dom.a.cljs$lang$applyTo = function(seq9589) {
  var G__9590 = cljs.core.first.call(null, seq9589);
  var seq9589__$1 = cljs.core.next.call(null, seq9589);
  return om.dom.a.cljs$core$IFn$_invoke$arity$variadic(G__9590, seq9589__$1);
};
om.dom.abbr = function om$dom$abbr() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.abbr.cljs$lang$maxFixedArity = 1;
om.dom.abbr.cljs$lang$applyTo = function(seq9591) {
  var G__9592 = cljs.core.first.call(null, seq9591);
  var seq9591__$1 = cljs.core.next.call(null, seq9591);
  return om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(G__9592, seq9591__$1);
};
om.dom.address = function om$dom$address() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.address.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.address.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.address.cljs$lang$maxFixedArity = 1;
om.dom.address.cljs$lang$applyTo = function(seq9593) {
  var G__9594 = cljs.core.first.call(null, seq9593);
  var seq9593__$1 = cljs.core.next.call(null, seq9593);
  return om.dom.address.cljs$core$IFn$_invoke$arity$variadic(G__9594, seq9593__$1);
};
om.dom.area = function om$dom$area() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.area.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.area.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.area.cljs$lang$maxFixedArity = 1;
om.dom.area.cljs$lang$applyTo = function(seq9595) {
  var G__9596 = cljs.core.first.call(null, seq9595);
  var seq9595__$1 = cljs.core.next.call(null, seq9595);
  return om.dom.area.cljs$core$IFn$_invoke$arity$variadic(G__9596, seq9595__$1);
};
om.dom.article = function om$dom$article() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.article.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.article.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.article.cljs$lang$maxFixedArity = 1;
om.dom.article.cljs$lang$applyTo = function(seq9597) {
  var G__9598 = cljs.core.first.call(null, seq9597);
  var seq9597__$1 = cljs.core.next.call(null, seq9597);
  return om.dom.article.cljs$core$IFn$_invoke$arity$variadic(G__9598, seq9597__$1);
};
om.dom.aside = function om$dom$aside() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.aside.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.aside.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.aside.cljs$lang$maxFixedArity = 1;
om.dom.aside.cljs$lang$applyTo = function(seq9599) {
  var G__9600 = cljs.core.first.call(null, seq9599);
  var seq9599__$1 = cljs.core.next.call(null, seq9599);
  return om.dom.aside.cljs$core$IFn$_invoke$arity$variadic(G__9600, seq9599__$1);
};
om.dom.audio = function om$dom$audio() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.audio.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.audio.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.audio.cljs$lang$maxFixedArity = 1;
om.dom.audio.cljs$lang$applyTo = function(seq9601) {
  var G__9602 = cljs.core.first.call(null, seq9601);
  var seq9601__$1 = cljs.core.next.call(null, seq9601);
  return om.dom.audio.cljs$core$IFn$_invoke$arity$variadic(G__9602, seq9601__$1);
};
om.dom.b = function om$dom$b() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.b.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.b.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.b.cljs$lang$maxFixedArity = 1;
om.dom.b.cljs$lang$applyTo = function(seq9603) {
  var G__9604 = cljs.core.first.call(null, seq9603);
  var seq9603__$1 = cljs.core.next.call(null, seq9603);
  return om.dom.b.cljs$core$IFn$_invoke$arity$variadic(G__9604, seq9603__$1);
};
om.dom.base = function om$dom$base() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.base.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.base.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.base.cljs$lang$maxFixedArity = 1;
om.dom.base.cljs$lang$applyTo = function(seq9605) {
  var G__9606 = cljs.core.first.call(null, seq9605);
  var seq9605__$1 = cljs.core.next.call(null, seq9605);
  return om.dom.base.cljs$core$IFn$_invoke$arity$variadic(G__9606, seq9605__$1);
};
om.dom.bdi = function om$dom$bdi() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.bdi.cljs$lang$maxFixedArity = 1;
om.dom.bdi.cljs$lang$applyTo = function(seq9607) {
  var G__9608 = cljs.core.first.call(null, seq9607);
  var seq9607__$1 = cljs.core.next.call(null, seq9607);
  return om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(G__9608, seq9607__$1);
};
om.dom.bdo = function om$dom$bdo() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.bdo.cljs$lang$maxFixedArity = 1;
om.dom.bdo.cljs$lang$applyTo = function(seq9609) {
  var G__9610 = cljs.core.first.call(null, seq9609);
  var seq9609__$1 = cljs.core.next.call(null, seq9609);
  return om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(G__9610, seq9609__$1);
};
om.dom.big = function om$dom$big() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.big.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.big.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.big.cljs$lang$maxFixedArity = 1;
om.dom.big.cljs$lang$applyTo = function(seq9611) {
  var G__9612 = cljs.core.first.call(null, seq9611);
  var seq9611__$1 = cljs.core.next.call(null, seq9611);
  return om.dom.big.cljs$core$IFn$_invoke$arity$variadic(G__9612, seq9611__$1);
};
om.dom.blockquote = function om$dom$blockquote() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.blockquote.cljs$lang$maxFixedArity = 1;
om.dom.blockquote.cljs$lang$applyTo = function(seq9613) {
  var G__9614 = cljs.core.first.call(null, seq9613);
  var seq9613__$1 = cljs.core.next.call(null, seq9613);
  return om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(G__9614, seq9613__$1);
};
om.dom.body = function om$dom$body() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.body.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.body.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.body.cljs$lang$maxFixedArity = 1;
om.dom.body.cljs$lang$applyTo = function(seq9615) {
  var G__9616 = cljs.core.first.call(null, seq9615);
  var seq9615__$1 = cljs.core.next.call(null, seq9615);
  return om.dom.body.cljs$core$IFn$_invoke$arity$variadic(G__9616, seq9615__$1);
};
om.dom.br = function om$dom$br() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.br.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.br.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.br.cljs$lang$maxFixedArity = 1;
om.dom.br.cljs$lang$applyTo = function(seq9617) {
  var G__9618 = cljs.core.first.call(null, seq9617);
  var seq9617__$1 = cljs.core.next.call(null, seq9617);
  return om.dom.br.cljs$core$IFn$_invoke$arity$variadic(G__9618, seq9617__$1);
};
om.dom.button = function om$dom$button() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.button.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.button.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.button.cljs$lang$maxFixedArity = 1;
om.dom.button.cljs$lang$applyTo = function(seq9619) {
  var G__9620 = cljs.core.first.call(null, seq9619);
  var seq9619__$1 = cljs.core.next.call(null, seq9619);
  return om.dom.button.cljs$core$IFn$_invoke$arity$variadic(G__9620, seq9619__$1);
};
om.dom.canvas = function om$dom$canvas() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.canvas.cljs$lang$maxFixedArity = 1;
om.dom.canvas.cljs$lang$applyTo = function(seq9621) {
  var G__9622 = cljs.core.first.call(null, seq9621);
  var seq9621__$1 = cljs.core.next.call(null, seq9621);
  return om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(G__9622, seq9621__$1);
};
om.dom.caption = function om$dom$caption() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.caption.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.caption.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.caption.cljs$lang$maxFixedArity = 1;
om.dom.caption.cljs$lang$applyTo = function(seq9623) {
  var G__9624 = cljs.core.first.call(null, seq9623);
  var seq9623__$1 = cljs.core.next.call(null, seq9623);
  return om.dom.caption.cljs$core$IFn$_invoke$arity$variadic(G__9624, seq9623__$1);
};
om.dom.cite = function om$dom$cite() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.cite.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.cite.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.cite.cljs$lang$maxFixedArity = 1;
om.dom.cite.cljs$lang$applyTo = function(seq9625) {
  var G__9626 = cljs.core.first.call(null, seq9625);
  var seq9625__$1 = cljs.core.next.call(null, seq9625);
  return om.dom.cite.cljs$core$IFn$_invoke$arity$variadic(G__9626, seq9625__$1);
};
om.dom.code = function om$dom$code() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.code.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.code.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.code.cljs$lang$maxFixedArity = 1;
om.dom.code.cljs$lang$applyTo = function(seq9627) {
  var G__9628 = cljs.core.first.call(null, seq9627);
  var seq9627__$1 = cljs.core.next.call(null, seq9627);
  return om.dom.code.cljs$core$IFn$_invoke$arity$variadic(G__9628, seq9627__$1);
};
om.dom.col = function om$dom$col() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.col.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.col.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.col.cljs$lang$maxFixedArity = 1;
om.dom.col.cljs$lang$applyTo = function(seq9629) {
  var G__9630 = cljs.core.first.call(null, seq9629);
  var seq9629__$1 = cljs.core.next.call(null, seq9629);
  return om.dom.col.cljs$core$IFn$_invoke$arity$variadic(G__9630, seq9629__$1);
};
om.dom.colgroup = function om$dom$colgroup() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.colgroup.cljs$lang$maxFixedArity = 1;
om.dom.colgroup.cljs$lang$applyTo = function(seq9631) {
  var G__9632 = cljs.core.first.call(null, seq9631);
  var seq9631__$1 = cljs.core.next.call(null, seq9631);
  return om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(G__9632, seq9631__$1);
};
om.dom.data = function om$dom$data() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.data.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.data.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.data.cljs$lang$maxFixedArity = 1;
om.dom.data.cljs$lang$applyTo = function(seq9633) {
  var G__9634 = cljs.core.first.call(null, seq9633);
  var seq9633__$1 = cljs.core.next.call(null, seq9633);
  return om.dom.data.cljs$core$IFn$_invoke$arity$variadic(G__9634, seq9633__$1);
};
om.dom.datalist = function om$dom$datalist() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.datalist.cljs$lang$maxFixedArity = 1;
om.dom.datalist.cljs$lang$applyTo = function(seq9635) {
  var G__9636 = cljs.core.first.call(null, seq9635);
  var seq9635__$1 = cljs.core.next.call(null, seq9635);
  return om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(G__9636, seq9635__$1);
};
om.dom.dd = function om$dom$dd() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dd.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.dd.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.dd.cljs$lang$maxFixedArity = 1;
om.dom.dd.cljs$lang$applyTo = function(seq9637) {
  var G__9638 = cljs.core.first.call(null, seq9637);
  var seq9637__$1 = cljs.core.next.call(null, seq9637);
  return om.dom.dd.cljs$core$IFn$_invoke$arity$variadic(G__9638, seq9637__$1);
};
om.dom.del = function om$dom$del() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.del.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.del.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.del.cljs$lang$maxFixedArity = 1;
om.dom.del.cljs$lang$applyTo = function(seq9639) {
  var G__9640 = cljs.core.first.call(null, seq9639);
  var seq9639__$1 = cljs.core.next.call(null, seq9639);
  return om.dom.del.cljs$core$IFn$_invoke$arity$variadic(G__9640, seq9639__$1);
};
om.dom.dfn = function om$dom$dfn() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.dfn.cljs$lang$maxFixedArity = 1;
om.dom.dfn.cljs$lang$applyTo = function(seq9641) {
  var G__9642 = cljs.core.first.call(null, seq9641);
  var seq9641__$1 = cljs.core.next.call(null, seq9641);
  return om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(G__9642, seq9641__$1);
};
om.dom.div = function om$dom$div() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.div.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.div.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.div.cljs$lang$maxFixedArity = 1;
om.dom.div.cljs$lang$applyTo = function(seq9643) {
  var G__9644 = cljs.core.first.call(null, seq9643);
  var seq9643__$1 = cljs.core.next.call(null, seq9643);
  return om.dom.div.cljs$core$IFn$_invoke$arity$variadic(G__9644, seq9643__$1);
};
om.dom.dl = function om$dom$dl() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dl.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.dl.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.dl.cljs$lang$maxFixedArity = 1;
om.dom.dl.cljs$lang$applyTo = function(seq9645) {
  var G__9646 = cljs.core.first.call(null, seq9645);
  var seq9645__$1 = cljs.core.next.call(null, seq9645);
  return om.dom.dl.cljs$core$IFn$_invoke$arity$variadic(G__9646, seq9645__$1);
};
om.dom.dt = function om$dom$dt() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.dt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.dt.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.dt.cljs$lang$maxFixedArity = 1;
om.dom.dt.cljs$lang$applyTo = function(seq9647) {
  var G__9648 = cljs.core.first.call(null, seq9647);
  var seq9647__$1 = cljs.core.next.call(null, seq9647);
  return om.dom.dt.cljs$core$IFn$_invoke$arity$variadic(G__9648, seq9647__$1);
};
om.dom.em = function om$dom$em() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.em.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.em.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.em.cljs$lang$maxFixedArity = 1;
om.dom.em.cljs$lang$applyTo = function(seq9649) {
  var G__9650 = cljs.core.first.call(null, seq9649);
  var seq9649__$1 = cljs.core.next.call(null, seq9649);
  return om.dom.em.cljs$core$IFn$_invoke$arity$variadic(G__9650, seq9649__$1);
};
om.dom.embed = function om$dom$embed() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.embed.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.embed.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.embed.cljs$lang$maxFixedArity = 1;
om.dom.embed.cljs$lang$applyTo = function(seq9651) {
  var G__9652 = cljs.core.first.call(null, seq9651);
  var seq9651__$1 = cljs.core.next.call(null, seq9651);
  return om.dom.embed.cljs$core$IFn$_invoke$arity$variadic(G__9652, seq9651__$1);
};
om.dom.fieldset = function om$dom$fieldset() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.fieldset.cljs$lang$maxFixedArity = 1;
om.dom.fieldset.cljs$lang$applyTo = function(seq9655) {
  var G__9656 = cljs.core.first.call(null, seq9655);
  var seq9655__$1 = cljs.core.next.call(null, seq9655);
  return om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(G__9656, seq9655__$1);
};
om.dom.figcaption = function om$dom$figcaption() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.figcaption.cljs$lang$maxFixedArity = 1;
om.dom.figcaption.cljs$lang$applyTo = function(seq9657) {
  var G__9658 = cljs.core.first.call(null, seq9657);
  var seq9657__$1 = cljs.core.next.call(null, seq9657);
  return om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(G__9658, seq9657__$1);
};
om.dom.figure = function om$dom$figure() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.figure.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.figure.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.figure.cljs$lang$maxFixedArity = 1;
om.dom.figure.cljs$lang$applyTo = function(seq9659) {
  var G__9660 = cljs.core.first.call(null, seq9659);
  var seq9659__$1 = cljs.core.next.call(null, seq9659);
  return om.dom.figure.cljs$core$IFn$_invoke$arity$variadic(G__9660, seq9659__$1);
};
om.dom.footer = function om$dom$footer() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.footer.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.footer.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.footer.cljs$lang$maxFixedArity = 1;
om.dom.footer.cljs$lang$applyTo = function(seq9661) {
  var G__9662 = cljs.core.first.call(null, seq9661);
  var seq9661__$1 = cljs.core.next.call(null, seq9661);
  return om.dom.footer.cljs$core$IFn$_invoke$arity$variadic(G__9662, seq9661__$1);
};
om.dom.form = function om$dom$form() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.form.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.form.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.form.cljs$lang$maxFixedArity = 1;
om.dom.form.cljs$lang$applyTo = function(seq9663) {
  var G__9664 = cljs.core.first.call(null, seq9663);
  var seq9663__$1 = cljs.core.next.call(null, seq9663);
  return om.dom.form.cljs$core$IFn$_invoke$arity$variadic(G__9664, seq9663__$1);
};
om.dom.h1 = function om$dom$h1() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h1.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.h1.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.h1.cljs$lang$maxFixedArity = 1;
om.dom.h1.cljs$lang$applyTo = function(seq9665) {
  var G__9666 = cljs.core.first.call(null, seq9665);
  var seq9665__$1 = cljs.core.next.call(null, seq9665);
  return om.dom.h1.cljs$core$IFn$_invoke$arity$variadic(G__9666, seq9665__$1);
};
om.dom.h2 = function om$dom$h2() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h2.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.h2.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.h2.cljs$lang$maxFixedArity = 1;
om.dom.h2.cljs$lang$applyTo = function(seq9667) {
  var G__9668 = cljs.core.first.call(null, seq9667);
  var seq9667__$1 = cljs.core.next.call(null, seq9667);
  return om.dom.h2.cljs$core$IFn$_invoke$arity$variadic(G__9668, seq9667__$1);
};
om.dom.h3 = function om$dom$h3() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h3.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.h3.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.h3.cljs$lang$maxFixedArity = 1;
om.dom.h3.cljs$lang$applyTo = function(seq9669) {
  var G__9670 = cljs.core.first.call(null, seq9669);
  var seq9669__$1 = cljs.core.next.call(null, seq9669);
  return om.dom.h3.cljs$core$IFn$_invoke$arity$variadic(G__9670, seq9669__$1);
};
om.dom.h4 = function om$dom$h4() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h4.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.h4.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.h4.cljs$lang$maxFixedArity = 1;
om.dom.h4.cljs$lang$applyTo = function(seq9671) {
  var G__9672 = cljs.core.first.call(null, seq9671);
  var seq9671__$1 = cljs.core.next.call(null, seq9671);
  return om.dom.h4.cljs$core$IFn$_invoke$arity$variadic(G__9672, seq9671__$1);
};
om.dom.h5 = function om$dom$h5() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h5.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.h5.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.h5.cljs$lang$maxFixedArity = 1;
om.dom.h5.cljs$lang$applyTo = function(seq9673) {
  var G__9674 = cljs.core.first.call(null, seq9673);
  var seq9673__$1 = cljs.core.next.call(null, seq9673);
  return om.dom.h5.cljs$core$IFn$_invoke$arity$variadic(G__9674, seq9673__$1);
};
om.dom.h6 = function om$dom$h6() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.h6.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.h6.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.h6.cljs$lang$maxFixedArity = 1;
om.dom.h6.cljs$lang$applyTo = function(seq9675) {
  var G__9676 = cljs.core.first.call(null, seq9675);
  var seq9675__$1 = cljs.core.next.call(null, seq9675);
  return om.dom.h6.cljs$core$IFn$_invoke$arity$variadic(G__9676, seq9675__$1);
};
om.dom.head = function om$dom$head() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.head.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.head.cljs$lang$maxFixedArity = 1;
om.dom.head.cljs$lang$applyTo = function(seq9677) {
  var G__9678 = cljs.core.first.call(null, seq9677);
  var seq9677__$1 = cljs.core.next.call(null, seq9677);
  return om.dom.head.cljs$core$IFn$_invoke$arity$variadic(G__9678, seq9677__$1);
};
om.dom.header = function om$dom$header() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.header.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.header.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.header.cljs$lang$maxFixedArity = 1;
om.dom.header.cljs$lang$applyTo = function(seq9679) {
  var G__9680 = cljs.core.first.call(null, seq9679);
  var seq9679__$1 = cljs.core.next.call(null, seq9679);
  return om.dom.header.cljs$core$IFn$_invoke$arity$variadic(G__9680, seq9679__$1);
};
om.dom.hr = function om$dom$hr() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.hr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.hr.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.hr.cljs$lang$maxFixedArity = 1;
om.dom.hr.cljs$lang$applyTo = function(seq9681) {
  var G__9682 = cljs.core.first.call(null, seq9681);
  var seq9681__$1 = cljs.core.next.call(null, seq9681);
  return om.dom.hr.cljs$core$IFn$_invoke$arity$variadic(G__9682, seq9681__$1);
};
om.dom.html = function om$dom$html() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.html.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.html.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.html.cljs$lang$maxFixedArity = 1;
om.dom.html.cljs$lang$applyTo = function(seq9683) {
  var G__9684 = cljs.core.first.call(null, seq9683);
  var seq9683__$1 = cljs.core.next.call(null, seq9683);
  return om.dom.html.cljs$core$IFn$_invoke$arity$variadic(G__9684, seq9683__$1);
};
om.dom.i = function om$dom$i() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.i.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.i.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.i.cljs$lang$maxFixedArity = 1;
om.dom.i.cljs$lang$applyTo = function(seq9685) {
  var G__9686 = cljs.core.first.call(null, seq9685);
  var seq9685__$1 = cljs.core.next.call(null, seq9685);
  return om.dom.i.cljs$core$IFn$_invoke$arity$variadic(G__9686, seq9685__$1);
};
om.dom.iframe = function om$dom$iframe() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.iframe.cljs$lang$maxFixedArity = 1;
om.dom.iframe.cljs$lang$applyTo = function(seq9687) {
  var G__9688 = cljs.core.first.call(null, seq9687);
  var seq9687__$1 = cljs.core.next.call(null, seq9687);
  return om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(G__9688, seq9687__$1);
};
om.dom.img = function om$dom$img() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.img.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.img.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.img.cljs$lang$maxFixedArity = 1;
om.dom.img.cljs$lang$applyTo = function(seq9689) {
  var G__9690 = cljs.core.first.call(null, seq9689);
  var seq9689__$1 = cljs.core.next.call(null, seq9689);
  return om.dom.img.cljs$core$IFn$_invoke$arity$variadic(G__9690, seq9689__$1);
};
om.dom.ins = function om$dom$ins() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ins.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.ins.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.ins.cljs$lang$maxFixedArity = 1;
om.dom.ins.cljs$lang$applyTo = function(seq9691) {
  var G__9692 = cljs.core.first.call(null, seq9691);
  var seq9691__$1 = cljs.core.next.call(null, seq9691);
  return om.dom.ins.cljs$core$IFn$_invoke$arity$variadic(G__9692, seq9691__$1);
};
om.dom.kbd = function om$dom$kbd() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.kbd.cljs$lang$maxFixedArity = 1;
om.dom.kbd.cljs$lang$applyTo = function(seq9693) {
  var G__9694 = cljs.core.first.call(null, seq9693);
  var seq9693__$1 = cljs.core.next.call(null, seq9693);
  return om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(G__9694, seq9693__$1);
};
om.dom.keygen = function om$dom$keygen() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.keygen.cljs$lang$maxFixedArity = 1;
om.dom.keygen.cljs$lang$applyTo = function(seq9695) {
  var G__9696 = cljs.core.first.call(null, seq9695);
  var seq9695__$1 = cljs.core.next.call(null, seq9695);
  return om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(G__9696, seq9695__$1);
};
om.dom.label = function om$dom$label() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.label.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.label.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.label.cljs$lang$maxFixedArity = 1;
om.dom.label.cljs$lang$applyTo = function(seq9697) {
  var G__9698 = cljs.core.first.call(null, seq9697);
  var seq9697__$1 = cljs.core.next.call(null, seq9697);
  return om.dom.label.cljs$core$IFn$_invoke$arity$variadic(G__9698, seq9697__$1);
};
om.dom.legend = function om$dom$legend() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.legend.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.legend.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.legend.cljs$lang$maxFixedArity = 1;
om.dom.legend.cljs$lang$applyTo = function(seq9699) {
  var G__9700 = cljs.core.first.call(null, seq9699);
  var seq9699__$1 = cljs.core.next.call(null, seq9699);
  return om.dom.legend.cljs$core$IFn$_invoke$arity$variadic(G__9700, seq9699__$1);
};
om.dom.li = function om$dom$li() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.li.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.li.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.li.cljs$lang$maxFixedArity = 1;
om.dom.li.cljs$lang$applyTo = function(seq9701) {
  var G__9702 = cljs.core.first.call(null, seq9701);
  var seq9701__$1 = cljs.core.next.call(null, seq9701);
  return om.dom.li.cljs$core$IFn$_invoke$arity$variadic(G__9702, seq9701__$1);
};
om.dom.link = function om$dom$link() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.link.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.link.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.link.cljs$lang$maxFixedArity = 1;
om.dom.link.cljs$lang$applyTo = function(seq9703) {
  var G__9704 = cljs.core.first.call(null, seq9703);
  var seq9703__$1 = cljs.core.next.call(null, seq9703);
  return om.dom.link.cljs$core$IFn$_invoke$arity$variadic(G__9704, seq9703__$1);
};
om.dom.main = function om$dom$main() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.main.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.main.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.main.cljs$lang$maxFixedArity = 1;
om.dom.main.cljs$lang$applyTo = function(seq9705) {
  var G__9706 = cljs.core.first.call(null, seq9705);
  var seq9705__$1 = cljs.core.next.call(null, seq9705);
  return om.dom.main.cljs$core$IFn$_invoke$arity$variadic(G__9706, seq9705__$1);
};
om.dom.map = function om$dom$map() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.map.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.map.cljs$lang$maxFixedArity = 1;
om.dom.map.cljs$lang$applyTo = function(seq9707) {
  var G__9708 = cljs.core.first.call(null, seq9707);
  var seq9707__$1 = cljs.core.next.call(null, seq9707);
  return om.dom.map.cljs$core$IFn$_invoke$arity$variadic(G__9708, seq9707__$1);
};
om.dom.mark = function om$dom$mark() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.mark.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.mark.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.mark.cljs$lang$maxFixedArity = 1;
om.dom.mark.cljs$lang$applyTo = function(seq9709) {
  var G__9710 = cljs.core.first.call(null, seq9709);
  var seq9709__$1 = cljs.core.next.call(null, seq9709);
  return om.dom.mark.cljs$core$IFn$_invoke$arity$variadic(G__9710, seq9709__$1);
};
om.dom.marquee = function om$dom$marquee() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.marquee.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.marquee.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.marquee.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.marquee.cljs$lang$maxFixedArity = 1;
om.dom.marquee.cljs$lang$applyTo = function(seq9711) {
  var G__9712 = cljs.core.first.call(null, seq9711);
  var seq9711__$1 = cljs.core.next.call(null, seq9711);
  return om.dom.marquee.cljs$core$IFn$_invoke$arity$variadic(G__9712, seq9711__$1);
};
om.dom.menu = function om$dom$menu() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.menu.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.menu.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.menu.cljs$lang$maxFixedArity = 1;
om.dom.menu.cljs$lang$applyTo = function(seq9713) {
  var G__9714 = cljs.core.first.call(null, seq9713);
  var seq9713__$1 = cljs.core.next.call(null, seq9713);
  return om.dom.menu.cljs$core$IFn$_invoke$arity$variadic(G__9714, seq9713__$1);
};
om.dom.menuitem = function om$dom$menuitem() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.menuitem.cljs$lang$maxFixedArity = 1;
om.dom.menuitem.cljs$lang$applyTo = function(seq9715) {
  var G__9716 = cljs.core.first.call(null, seq9715);
  var seq9715__$1 = cljs.core.next.call(null, seq9715);
  return om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(G__9716, seq9715__$1);
};
om.dom.meta = function om$dom$meta() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.meta.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.meta.cljs$lang$maxFixedArity = 1;
om.dom.meta.cljs$lang$applyTo = function(seq9717) {
  var G__9718 = cljs.core.first.call(null, seq9717);
  var seq9717__$1 = cljs.core.next.call(null, seq9717);
  return om.dom.meta.cljs$core$IFn$_invoke$arity$variadic(G__9718, seq9717__$1);
};
om.dom.meter = function om$dom$meter() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.meter.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.meter.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.meter.cljs$lang$maxFixedArity = 1;
om.dom.meter.cljs$lang$applyTo = function(seq9719) {
  var G__9720 = cljs.core.first.call(null, seq9719);
  var seq9719__$1 = cljs.core.next.call(null, seq9719);
  return om.dom.meter.cljs$core$IFn$_invoke$arity$variadic(G__9720, seq9719__$1);
};
om.dom.nav = function om$dom$nav() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.nav.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.nav.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.nav.cljs$lang$maxFixedArity = 1;
om.dom.nav.cljs$lang$applyTo = function(seq9721) {
  var G__9722 = cljs.core.first.call(null, seq9721);
  var seq9721__$1 = cljs.core.next.call(null, seq9721);
  return om.dom.nav.cljs$core$IFn$_invoke$arity$variadic(G__9722, seq9721__$1);
};
om.dom.noscript = function om$dom$noscript() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.noscript.cljs$lang$maxFixedArity = 1;
om.dom.noscript.cljs$lang$applyTo = function(seq9723) {
  var G__9724 = cljs.core.first.call(null, seq9723);
  var seq9723__$1 = cljs.core.next.call(null, seq9723);
  return om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(G__9724, seq9723__$1);
};
om.dom.object = function om$dom$object() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.object.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.object.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.object.cljs$lang$maxFixedArity = 1;
om.dom.object.cljs$lang$applyTo = function(seq9725) {
  var G__9726 = cljs.core.first.call(null, seq9725);
  var seq9725__$1 = cljs.core.next.call(null, seq9725);
  return om.dom.object.cljs$core$IFn$_invoke$arity$variadic(G__9726, seq9725__$1);
};
om.dom.ol = function om$dom$ol() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ol.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.ol.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.ol.cljs$lang$maxFixedArity = 1;
om.dom.ol.cljs$lang$applyTo = function(seq9727) {
  var G__9728 = cljs.core.first.call(null, seq9727);
  var seq9727__$1 = cljs.core.next.call(null, seq9727);
  return om.dom.ol.cljs$core$IFn$_invoke$arity$variadic(G__9728, seq9727__$1);
};
om.dom.optgroup = function om$dom$optgroup() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.optgroup.cljs$lang$maxFixedArity = 1;
om.dom.optgroup.cljs$lang$applyTo = function(seq9729) {
  var G__9730 = cljs.core.first.call(null, seq9729);
  var seq9729__$1 = cljs.core.next.call(null, seq9729);
  return om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(G__9730, seq9729__$1);
};
om.dom.output = function om$dom$output() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.output.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.output.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.output.cljs$lang$maxFixedArity = 1;
om.dom.output.cljs$lang$applyTo = function(seq9731) {
  var G__9732 = cljs.core.first.call(null, seq9731);
  var seq9731__$1 = cljs.core.next.call(null, seq9731);
  return om.dom.output.cljs$core$IFn$_invoke$arity$variadic(G__9732, seq9731__$1);
};
om.dom.p = function om$dom$p() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.p.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.p.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.p.cljs$lang$maxFixedArity = 1;
om.dom.p.cljs$lang$applyTo = function(seq9733) {
  var G__9734 = cljs.core.first.call(null, seq9733);
  var seq9733__$1 = cljs.core.next.call(null, seq9733);
  return om.dom.p.cljs$core$IFn$_invoke$arity$variadic(G__9734, seq9733__$1);
};
om.dom.param = function om$dom$param() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.param.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.param.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.param.cljs$lang$maxFixedArity = 1;
om.dom.param.cljs$lang$applyTo = function(seq9735) {
  var G__9736 = cljs.core.first.call(null, seq9735);
  var seq9735__$1 = cljs.core.next.call(null, seq9735);
  return om.dom.param.cljs$core$IFn$_invoke$arity$variadic(G__9736, seq9735__$1);
};
om.dom.pre = function om$dom$pre() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.pre.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.pre.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.pre.cljs$lang$maxFixedArity = 1;
om.dom.pre.cljs$lang$applyTo = function(seq9737) {
  var G__9738 = cljs.core.first.call(null, seq9737);
  var seq9737__$1 = cljs.core.next.call(null, seq9737);
  return om.dom.pre.cljs$core$IFn$_invoke$arity$variadic(G__9738, seq9737__$1);
};
om.dom.progress = function om$dom$progress() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.progress.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.progress.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.progress.cljs$lang$maxFixedArity = 1;
om.dom.progress.cljs$lang$applyTo = function(seq9739) {
  var G__9740 = cljs.core.first.call(null, seq9739);
  var seq9739__$1 = cljs.core.next.call(null, seq9739);
  return om.dom.progress.cljs$core$IFn$_invoke$arity$variadic(G__9740, seq9739__$1);
};
om.dom.q = function om$dom$q() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.q.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.q.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.q.cljs$lang$maxFixedArity = 1;
om.dom.q.cljs$lang$applyTo = function(seq9741) {
  var G__9742 = cljs.core.first.call(null, seq9741);
  var seq9741__$1 = cljs.core.next.call(null, seq9741);
  return om.dom.q.cljs$core$IFn$_invoke$arity$variadic(G__9742, seq9741__$1);
};
om.dom.rp = function om$dom$rp() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.rp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.rp.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.rp.cljs$lang$maxFixedArity = 1;
om.dom.rp.cljs$lang$applyTo = function(seq9743) {
  var G__9744 = cljs.core.first.call(null, seq9743);
  var seq9743__$1 = cljs.core.next.call(null, seq9743);
  return om.dom.rp.cljs$core$IFn$_invoke$arity$variadic(G__9744, seq9743__$1);
};
om.dom.rt = function om$dom$rt() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.rt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.rt.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.rt.cljs$lang$maxFixedArity = 1;
om.dom.rt.cljs$lang$applyTo = function(seq9745) {
  var G__9746 = cljs.core.first.call(null, seq9745);
  var seq9745__$1 = cljs.core.next.call(null, seq9745);
  return om.dom.rt.cljs$core$IFn$_invoke$arity$variadic(G__9746, seq9745__$1);
};
om.dom.ruby = function om$dom$ruby() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.ruby.cljs$lang$maxFixedArity = 1;
om.dom.ruby.cljs$lang$applyTo = function(seq9747) {
  var G__9748 = cljs.core.first.call(null, seq9747);
  var seq9747__$1 = cljs.core.next.call(null, seq9747);
  return om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(G__9748, seq9747__$1);
};
om.dom.s = function om$dom$s() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.s.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.s.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.s.cljs$lang$maxFixedArity = 1;
om.dom.s.cljs$lang$applyTo = function(seq9749) {
  var G__9750 = cljs.core.first.call(null, seq9749);
  var seq9749__$1 = cljs.core.next.call(null, seq9749);
  return om.dom.s.cljs$core$IFn$_invoke$arity$variadic(G__9750, seq9749__$1);
};
om.dom.samp = function om$dom$samp() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.samp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.samp.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.samp.cljs$lang$maxFixedArity = 1;
om.dom.samp.cljs$lang$applyTo = function(seq9751) {
  var G__9752 = cljs.core.first.call(null, seq9751);
  var seq9751__$1 = cljs.core.next.call(null, seq9751);
  return om.dom.samp.cljs$core$IFn$_invoke$arity$variadic(G__9752, seq9751__$1);
};
om.dom.script = function om$dom$script() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.script.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.script.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.script.cljs$lang$maxFixedArity = 1;
om.dom.script.cljs$lang$applyTo = function(seq9753) {
  var G__9754 = cljs.core.first.call(null, seq9753);
  var seq9753__$1 = cljs.core.next.call(null, seq9753);
  return om.dom.script.cljs$core$IFn$_invoke$arity$variadic(G__9754, seq9753__$1);
};
om.dom.section = function om$dom$section() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.section.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.section.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.section.cljs$lang$maxFixedArity = 1;
om.dom.section.cljs$lang$applyTo = function(seq9755) {
  var G__9756 = cljs.core.first.call(null, seq9755);
  var seq9755__$1 = cljs.core.next.call(null, seq9755);
  return om.dom.section.cljs$core$IFn$_invoke$arity$variadic(G__9756, seq9755__$1);
};
om.dom.select = function om$dom$select() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.select.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.select.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.select.cljs$lang$maxFixedArity = 1;
om.dom.select.cljs$lang$applyTo = function(seq9757) {
  var G__9758 = cljs.core.first.call(null, seq9757);
  var seq9757__$1 = cljs.core.next.call(null, seq9757);
  return om.dom.select.cljs$core$IFn$_invoke$arity$variadic(G__9758, seq9757__$1);
};
om.dom.small = function om$dom$small() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.small.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.small.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.small.cljs$lang$maxFixedArity = 1;
om.dom.small.cljs$lang$applyTo = function(seq9759) {
  var G__9760 = cljs.core.first.call(null, seq9759);
  var seq9759__$1 = cljs.core.next.call(null, seq9759);
  return om.dom.small.cljs$core$IFn$_invoke$arity$variadic(G__9760, seq9759__$1);
};
om.dom.source = function om$dom$source() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.source.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.source.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.source.cljs$lang$maxFixedArity = 1;
om.dom.source.cljs$lang$applyTo = function(seq9761) {
  var G__9762 = cljs.core.first.call(null, seq9761);
  var seq9761__$1 = cljs.core.next.call(null, seq9761);
  return om.dom.source.cljs$core$IFn$_invoke$arity$variadic(G__9762, seq9761__$1);
};
om.dom.span = function om$dom$span() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.span.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.span.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.span.cljs$lang$maxFixedArity = 1;
om.dom.span.cljs$lang$applyTo = function(seq9763) {
  var G__9764 = cljs.core.first.call(null, seq9763);
  var seq9763__$1 = cljs.core.next.call(null, seq9763);
  return om.dom.span.cljs$core$IFn$_invoke$arity$variadic(G__9764, seq9763__$1);
};
om.dom.strong = function om$dom$strong() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.strong.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.strong.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.strong.cljs$lang$maxFixedArity = 1;
om.dom.strong.cljs$lang$applyTo = function(seq9765) {
  var G__9766 = cljs.core.first.call(null, seq9765);
  var seq9765__$1 = cljs.core.next.call(null, seq9765);
  return om.dom.strong.cljs$core$IFn$_invoke$arity$variadic(G__9766, seq9765__$1);
};
om.dom.style = function om$dom$style() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.style.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.style.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.style.cljs$lang$maxFixedArity = 1;
om.dom.style.cljs$lang$applyTo = function(seq9767) {
  var G__9768 = cljs.core.first.call(null, seq9767);
  var seq9767__$1 = cljs.core.next.call(null, seq9767);
  return om.dom.style.cljs$core$IFn$_invoke$arity$variadic(G__9768, seq9767__$1);
};
om.dom.sub = function om$dom$sub() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.sub.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.sub.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.sub.cljs$lang$maxFixedArity = 1;
om.dom.sub.cljs$lang$applyTo = function(seq9769) {
  var G__9770 = cljs.core.first.call(null, seq9769);
  var seq9769__$1 = cljs.core.next.call(null, seq9769);
  return om.dom.sub.cljs$core$IFn$_invoke$arity$variadic(G__9770, seq9769__$1);
};
om.dom.summary = function om$dom$summary() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.summary.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.summary.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.summary.cljs$lang$maxFixedArity = 1;
om.dom.summary.cljs$lang$applyTo = function(seq9771) {
  var G__9772 = cljs.core.first.call(null, seq9771);
  var seq9771__$1 = cljs.core.next.call(null, seq9771);
  return om.dom.summary.cljs$core$IFn$_invoke$arity$variadic(G__9772, seq9771__$1);
};
om.dom.sup = function om$dom$sup() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.sup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.sup.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.sup.cljs$lang$maxFixedArity = 1;
om.dom.sup.cljs$lang$applyTo = function(seq9773) {
  var G__9774 = cljs.core.first.call(null, seq9773);
  var seq9773__$1 = cljs.core.next.call(null, seq9773);
  return om.dom.sup.cljs$core$IFn$_invoke$arity$variadic(G__9774, seq9773__$1);
};
om.dom.table = function om$dom$table() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.table.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.table.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.table.cljs$lang$maxFixedArity = 1;
om.dom.table.cljs$lang$applyTo = function(seq9775) {
  var G__9776 = cljs.core.first.call(null, seq9775);
  var seq9775__$1 = cljs.core.next.call(null, seq9775);
  return om.dom.table.cljs$core$IFn$_invoke$arity$variadic(G__9776, seq9775__$1);
};
om.dom.tbody = function om$dom$tbody() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.tbody.cljs$lang$maxFixedArity = 1;
om.dom.tbody.cljs$lang$applyTo = function(seq9777) {
  var G__9778 = cljs.core.first.call(null, seq9777);
  var seq9777__$1 = cljs.core.next.call(null, seq9777);
  return om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(G__9778, seq9777__$1);
};
om.dom.td = function om$dom$td() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.td.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.td.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.td.cljs$lang$maxFixedArity = 1;
om.dom.td.cljs$lang$applyTo = function(seq9779) {
  var G__9780 = cljs.core.first.call(null, seq9779);
  var seq9779__$1 = cljs.core.next.call(null, seq9779);
  return om.dom.td.cljs$core$IFn$_invoke$arity$variadic(G__9780, seq9779__$1);
};
om.dom.tfoot = function om$dom$tfoot() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.tfoot.cljs$lang$maxFixedArity = 1;
om.dom.tfoot.cljs$lang$applyTo = function(seq9781) {
  var G__9782 = cljs.core.first.call(null, seq9781);
  var seq9781__$1 = cljs.core.next.call(null, seq9781);
  return om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(G__9782, seq9781__$1);
};
om.dom.th = function om$dom$th() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.th.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.th.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.th.cljs$lang$maxFixedArity = 1;
om.dom.th.cljs$lang$applyTo = function(seq9783) {
  var G__9784 = cljs.core.first.call(null, seq9783);
  var seq9783__$1 = cljs.core.next.call(null, seq9783);
  return om.dom.th.cljs$core$IFn$_invoke$arity$variadic(G__9784, seq9783__$1);
};
om.dom.thead = function om$dom$thead() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.thead.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.thead.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.thead.cljs$lang$maxFixedArity = 1;
om.dom.thead.cljs$lang$applyTo = function(seq9785) {
  var G__9786 = cljs.core.first.call(null, seq9785);
  var seq9785__$1 = cljs.core.next.call(null, seq9785);
  return om.dom.thead.cljs$core$IFn$_invoke$arity$variadic(G__9786, seq9785__$1);
};
om.dom.time = function om$dom$time() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.time.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.time.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.time.cljs$lang$maxFixedArity = 1;
om.dom.time.cljs$lang$applyTo = function(seq9787) {
  var G__9788 = cljs.core.first.call(null, seq9787);
  var seq9787__$1 = cljs.core.next.call(null, seq9787);
  return om.dom.time.cljs$core$IFn$_invoke$arity$variadic(G__9788, seq9787__$1);
};
om.dom.title = function om$dom$title() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.title.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.title.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.title.cljs$lang$maxFixedArity = 1;
om.dom.title.cljs$lang$applyTo = function(seq9789) {
  var G__9790 = cljs.core.first.call(null, seq9789);
  var seq9789__$1 = cljs.core.next.call(null, seq9789);
  return om.dom.title.cljs$core$IFn$_invoke$arity$variadic(G__9790, seq9789__$1);
};
om.dom.tr = function om$dom$tr() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.tr.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.tr.cljs$lang$maxFixedArity = 1;
om.dom.tr.cljs$lang$applyTo = function(seq9791) {
  var G__9792 = cljs.core.first.call(null, seq9791);
  var seq9791__$1 = cljs.core.next.call(null, seq9791);
  return om.dom.tr.cljs$core$IFn$_invoke$arity$variadic(G__9792, seq9791__$1);
};
om.dom.track = function om$dom$track() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.track.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.track.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.track.cljs$lang$maxFixedArity = 1;
om.dom.track.cljs$lang$applyTo = function(seq9793) {
  var G__9794 = cljs.core.first.call(null, seq9793);
  var seq9793__$1 = cljs.core.next.call(null, seq9793);
  return om.dom.track.cljs$core$IFn$_invoke$arity$variadic(G__9794, seq9793__$1);
};
om.dom.u = function om$dom$u() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.u.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.u.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.u.cljs$lang$maxFixedArity = 1;
om.dom.u.cljs$lang$applyTo = function(seq9795) {
  var G__9796 = cljs.core.first.call(null, seq9795);
  var seq9795__$1 = cljs.core.next.call(null, seq9795);
  return om.dom.u.cljs$core$IFn$_invoke$arity$variadic(G__9796, seq9795__$1);
};
om.dom.ul = function om$dom$ul() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ul.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.ul.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.ul.cljs$lang$maxFixedArity = 1;
om.dom.ul.cljs$lang$applyTo = function(seq9797) {
  var G__9798 = cljs.core.first.call(null, seq9797);
  var seq9797__$1 = cljs.core.next.call(null, seq9797);
  return om.dom.ul.cljs$core$IFn$_invoke$arity$variadic(G__9798, seq9797__$1);
};
om.dom.var$ = function om$dom$var() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.var$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.var$.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.var$.cljs$lang$maxFixedArity = 1;
om.dom.var$.cljs$lang$applyTo = function(seq9799) {
  var G__9800 = cljs.core.first.call(null, seq9799);
  var seq9799__$1 = cljs.core.next.call(null, seq9799);
  return om.dom.var$.cljs$core$IFn$_invoke$arity$variadic(G__9800, seq9799__$1);
};
om.dom.video = function om$dom$video() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.video.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.video.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.video.cljs$lang$maxFixedArity = 1;
om.dom.video.cljs$lang$applyTo = function(seq9801) {
  var G__9802 = cljs.core.first.call(null, seq9801);
  var seq9801__$1 = cljs.core.next.call(null, seq9801);
  return om.dom.video.cljs$core$IFn$_invoke$arity$variadic(G__9802, seq9801__$1);
};
om.dom.wbr = function om$dom$wbr() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.wbr.cljs$lang$maxFixedArity = 1;
om.dom.wbr.cljs$lang$applyTo = function(seq9803) {
  var G__9804 = cljs.core.first.call(null, seq9803);
  var seq9803__$1 = cljs.core.next.call(null, seq9803);
  return om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(G__9804, seq9803__$1);
};
om.dom.circle = function om$dom$circle() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.circle.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.circle.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.circle.cljs$lang$maxFixedArity = 1;
om.dom.circle.cljs$lang$applyTo = function(seq9805) {
  var G__9806 = cljs.core.first.call(null, seq9805);
  var seq9805__$1 = cljs.core.next.call(null, seq9805);
  return om.dom.circle.cljs$core$IFn$_invoke$arity$variadic(G__9806, seq9805__$1);
};
om.dom.ellipse = function om$dom$ellipse() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.ellipse.cljs$lang$maxFixedArity = 1;
om.dom.ellipse.cljs$lang$applyTo = function(seq9807) {
  var G__9808 = cljs.core.first.call(null, seq9807);
  var seq9807__$1 = cljs.core.next.call(null, seq9807);
  return om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(G__9808, seq9807__$1);
};
om.dom.g = function om$dom$g() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.g.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.g.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.g.cljs$lang$maxFixedArity = 1;
om.dom.g.cljs$lang$applyTo = function(seq9809) {
  var G__9810 = cljs.core.first.call(null, seq9809);
  var seq9809__$1 = cljs.core.next.call(null, seq9809);
  return om.dom.g.cljs$core$IFn$_invoke$arity$variadic(G__9810, seq9809__$1);
};
om.dom.line = function om$dom$line() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.line.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.line.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.line.cljs$lang$maxFixedArity = 1;
om.dom.line.cljs$lang$applyTo = function(seq9811) {
  var G__9812 = cljs.core.first.call(null, seq9811);
  var seq9811__$1 = cljs.core.next.call(null, seq9811);
  return om.dom.line.cljs$core$IFn$_invoke$arity$variadic(G__9812, seq9811__$1);
};
om.dom.path = function om$dom$path() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.path.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.path.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.path.cljs$lang$maxFixedArity = 1;
om.dom.path.cljs$lang$applyTo = function(seq9813) {
  var G__9814 = cljs.core.first.call(null, seq9813);
  var seq9813__$1 = cljs.core.next.call(null, seq9813);
  return om.dom.path.cljs$core$IFn$_invoke$arity$variadic(G__9814, seq9813__$1);
};
om.dom.polyline = function om$dom$polyline() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.polyline.cljs$lang$maxFixedArity = 1;
om.dom.polyline.cljs$lang$applyTo = function(seq9815) {
  var G__9816 = cljs.core.first.call(null, seq9815);
  var seq9815__$1 = cljs.core.next.call(null, seq9815);
  return om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(G__9816, seq9815__$1);
};
om.dom.rect = function om$dom$rect() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.rect.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.rect.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.rect.cljs$lang$maxFixedArity = 1;
om.dom.rect.cljs$lang$applyTo = function(seq9817) {
  var G__9818 = cljs.core.first.call(null, seq9817);
  var seq9817__$1 = cljs.core.next.call(null, seq9817);
  return om.dom.rect.cljs$core$IFn$_invoke$arity$variadic(G__9818, seq9817__$1);
};
om.dom.svg = function om$dom$svg() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.svg.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.svg.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.svg.cljs$lang$maxFixedArity = 1;
om.dom.svg.cljs$lang$applyTo = function(seq9819) {
  var G__9820 = cljs.core.first.call(null, seq9819);
  var seq9819__$1 = cljs.core.next.call(null, seq9819);
  return om.dom.svg.cljs$core$IFn$_invoke$arity$variadic(G__9820, seq9819__$1);
};
om.dom.text = function om$dom$text() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.text.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.text.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.text.cljs$lang$maxFixedArity = 1;
om.dom.text.cljs$lang$applyTo = function(seq9821) {
  var G__9822 = cljs.core.first.call(null, seq9821);
  var seq9821__$1 = cljs.core.next.call(null, seq9821);
  return om.dom.text.cljs$core$IFn$_invoke$arity$variadic(G__9822, seq9821__$1);
};
om.dom.defs = function om$dom$defs() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.defs.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.defs.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.defs.cljs$lang$maxFixedArity = 1;
om.dom.defs.cljs$lang$applyTo = function(seq9823) {
  var G__9824 = cljs.core.first.call(null, seq9823);
  var seq9823__$1 = cljs.core.next.call(null, seq9823);
  return om.dom.defs.cljs$core$IFn$_invoke$arity$variadic(G__9824, seq9823__$1);
};
om.dom.linearGradient = function om$dom$linearGradient() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.linearGradient.cljs$lang$maxFixedArity = 1;
om.dom.linearGradient.cljs$lang$applyTo = function(seq9825) {
  var G__9826 = cljs.core.first.call(null, seq9825);
  var seq9825__$1 = cljs.core.next.call(null, seq9825);
  return om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(G__9826, seq9825__$1);
};
om.dom.polygon = function om$dom$polygon() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.polygon.cljs$lang$maxFixedArity = 1;
om.dom.polygon.cljs$lang$applyTo = function(seq9827) {
  var G__9828 = cljs.core.first.call(null, seq9827);
  var seq9827__$1 = cljs.core.next.call(null, seq9827);
  return om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(G__9828, seq9827__$1);
};
om.dom.radialGradient = function om$dom$radialGradient() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.radialGradient.cljs$lang$maxFixedArity = 1;
om.dom.radialGradient.cljs$lang$applyTo = function(seq9829) {
  var G__9830 = cljs.core.first.call(null, seq9829);
  var seq9829__$1 = cljs.core.next.call(null, seq9829);
  return om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(G__9830, seq9829__$1);
};
om.dom.stop = function om$dom$stop() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.stop.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.stop.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.stop.cljs$lang$maxFixedArity = 1;
om.dom.stop.cljs$lang$applyTo = function(seq9831) {
  var G__9832 = cljs.core.first.call(null, seq9831);
  var seq9831__$1 = cljs.core.next.call(null, seq9831);
  return om.dom.stop.cljs$core$IFn$_invoke$arity$variadic(G__9832, seq9831__$1);
};
om.dom.tspan = function om$dom$tspan() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic = function(opts__7846__auto__, children__7847__auto__) {
  return React.DOM.tspan.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7846__auto__, children__7847__auto__)));
};
om.dom.tspan.cljs$lang$maxFixedArity = 1;
om.dom.tspan.cljs$lang$applyTo = function(seq9653) {
  var G__9654 = cljs.core.first.call(null, seq9653);
  var seq9653__$1 = cljs.core.next.call(null, seq9653);
  return om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(G__9654, seq9653__$1);
};
om.dom.wrap_form_element = function om$dom$wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]});
    return ctor.call(null, props);
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }}));
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function om$dom$render(component, el) {
  return React.render(component, el);
};
om.dom.render_to_str = function om$dom$render_to_str(c) {
  return React.renderToString(c);
};
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("goog.dom");
goog.require("om.dom");
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_descriptor_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core._STAR_root_key_STAR_ = null;
om.core.IDisplayName = function() {
  var obj9030 = {};
  return obj9030;
}();
om.core.display_name = function om$core$display_name(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.display_name[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.display_name["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj9032 = {};
  return obj9032;
}();
om.core.init_state = function om$core$init_state(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.init_state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.init_state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj9034 = {};
  return obj9034;
}();
om.core.should_update = function om$core$should_update(this$, next_props, next_state) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.should_update[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.should_update["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj9036 = {};
  return obj9036;
}();
om.core.will_mount = function om$core$will_mount(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.will_mount[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.will_mount["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj9038 = {};
  return obj9038;
}();
om.core.did_mount = function om$core$did_mount(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.did_mount[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.did_mount["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj9040 = {};
  return obj9040;
}();
om.core.will_unmount = function om$core$will_unmount(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.will_unmount[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.will_unmount["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj9042 = {};
  return obj9042;
}();
om.core.will_update = function om$core$will_update(this$, next_props, next_state) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.will_update[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.will_update["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj9044 = {};
  return obj9044;
}();
om.core.did_update = function om$core$did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.did_update[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.did_update["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj9046 = {};
  return obj9046;
}();
om.core.will_receive_props = function om$core$will_receive_props(this$, next_props) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.will_receive_props[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.will_receive_props["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj9048 = {};
  return obj9048;
}();
om.core.render = function om$core$render(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.render[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.render["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderProps = function() {
  var obj9050 = {};
  return obj9050;
}();
om.core.render_props = function om$core$render_props(this$, props, state) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRenderProps$render_props$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRenderProps$render_props$arity$3(this$, props, state);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.render_props[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.render_props["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderProps.render-props", this$);
        }
      }
    }().call(null, this$, props, state);
  }
};
om.core.IRenderState = function() {
  var obj9052 = {};
  return obj9052;
}();
om.core.render_state = function om$core$render_state(this$, state) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core.render_state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core.render_state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.ICheckState = function() {
  var obj9054 = {};
  return obj9054;
}();
om.core.IOmSwap = function() {
  var obj9056 = {};
  return obj9056;
}();
om.core._om_swap_BANG_ = function om$core$_om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj9058 = {};
  return obj9058;
}();
om.core._get_state = function om$core$_get_state() {
  var G__9060 = arguments.length;
  switch(G__9060) {
    case 1:
      return om.core._get_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core._get_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._get_state.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IGetState$_get_state$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IGetState$_get_state$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_state.cljs$core$IFn$_invoke$arity$2 = function(this$, ks) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IGetState$_get_state$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
        }
      }
    }().call(null, this$, ks);
  }
};
om.core._get_state.cljs$lang$maxFixedArity = 2;
om.core.IGetRenderState = function() {
  var obj9063 = {};
  return obj9063;
}();
om.core._get_render_state = function om$core$_get_render_state() {
  var G__9065 = arguments.length;
  switch(G__9065) {
    case 1:
      return om.core._get_render_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core._get_render_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._get_render_state.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_render_state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_render_state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_render_state.cljs$core$IFn$_invoke$arity$2 = function(this$, ks) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_render_state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_render_state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
        }
      }
    }().call(null, this$, ks);
  }
};
om.core._get_render_state.cljs$lang$maxFixedArity = 2;
om.core.ISetState = function() {
  var obj9068 = {};
  return obj9068;
}();
om.core._set_state_BANG_ = function om$core$_set_state_BANG_() {
  var G__9070 = arguments.length;
  switch(G__9070) {
    case 3:
      return om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(this$, val, render) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, val, render);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._set_state_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
        }
      }
    }().call(null, this$, val, render);
  }
};
om.core._set_state_BANG_.cljs$core$IFn$_invoke$arity$4 = function(this$, ks, val, render) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$ISetState$_set_state_BANG_$arity$4(this$, ks, val, render);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._set_state_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
        }
      }
    }().call(null, this$, ks, val, render);
  }
};
om.core._set_state_BANG_.cljs$lang$maxFixedArity = 4;
om.core.IRenderQueue = function() {
  var obj9073 = {};
  return obj9073;
}();
om.core._get_queue = function om$core$_get_queue(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_queue[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_queue["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function om$core$_queue_render_BANG_(this$, c) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function om$core$_empty_queue_BANG_(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj9075 = {};
  return obj9075;
}();
om.core._value = function om$core$_value(x) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = om.core._value[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._value["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj9077 = {};
  return obj9077;
}();
om.core._path = function om$core$_path(cursor) {
  if (function() {
    var and__4262__auto__ = cursor;
    if (and__4262__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4910__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4274__auto__ = om.core._path[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._path["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function om$core$_state(cursor) {
  if (function() {
    var and__4262__auto__ = cursor;
    if (and__4262__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4910__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4274__auto__ = om.core._state[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._state["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj9079 = {};
  return obj9079;
}();
om.core._to_cursor = function om$core$_to_cursor() {
  var G__9081 = arguments.length;
  switch(G__9081) {
    case 2:
      return om.core._to_cursor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core._to_cursor.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core._to_cursor.cljs$core$IFn$_invoke$arity$2 = function(value, state) {
  if (function() {
    var and__4262__auto__ = value;
    if (and__4262__auto__) {
      return value.om$core$IToCursor$_to_cursor$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
  } else {
    var x__4910__auto__ = value == null ? null : value;
    return function() {
      var or__4274__auto__ = om.core._to_cursor[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._to_cursor["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
        }
      }
    }().call(null, value, state);
  }
};
om.core._to_cursor.cljs$core$IFn$_invoke$arity$3 = function(value, state, path) {
  if (function() {
    var and__4262__auto__ = value;
    if (and__4262__auto__) {
      return value.om$core$IToCursor$_to_cursor$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
  } else {
    var x__4910__auto__ = value == null ? null : value;
    return function() {
      var or__4274__auto__ = om.core._to_cursor[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._to_cursor["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
        }
      }
    }().call(null, value, state, path);
  }
};
om.core._to_cursor.cljs$lang$maxFixedArity = 3;
om.core.ICursorDerive = function() {
  var obj9084 = {};
  return obj9084;
}();
om.core._derive = function om$core$_derive(cursor, derived, state, path) {
  if (function() {
    var and__4262__auto__ = cursor;
    if (and__4262__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4910__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4274__auto__ = om.core._derive[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._derive["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function om$core$path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function om$core$value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function om$core$state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj9086 = {};
  return obj9086;
}();
om.core._transact_BANG_ = function om$core$_transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__4262__auto__ = cursor;
    if (and__4262__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4910__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4274__auto__ = om.core._transact_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._transact_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj9088 = {};
  return obj9088;
}();
om.core._listen_BANG_ = function om$core$_listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = om.core._listen_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._listen_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function om$core$_unlisten_BANG_(x, key) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function om$core$_notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__4262__auto__ = x;
    if (and__4262__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4910__auto__ = x == null ? null : x;
    return function() {
      var or__4274__auto__ = om.core._notify_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._notify_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.IRootProperties = function() {
  var obj9090 = {};
  return obj9090;
}();
om.core._set_property_BANG_ = function om$core$_set_property_BANG_(this$, id, p, val) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRootProperties$_set_property_BANG_$arity$4;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_set_property_BANG_$arity$4(this$, id, p, val);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._set_property_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._set_property_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-set-property!", this$);
        }
      }
    }().call(null, this$, id, p, val);
  }
};
om.core._remove_property_BANG_ = function om$core$_remove_property_BANG_(this$, id, p) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3(this$, id, p);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._remove_property_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._remove_property_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-property!", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core._remove_properties_BANG_ = function om$core$_remove_properties_BANG_(this$, id) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2(this$, id);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._remove_properties_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._remove_properties_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-properties!", this$);
        }
      }
    }().call(null, this$, id);
  }
};
om.core._get_property = function om$core$_get_property(this$, id, p) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IRootProperties$_get_property$arity$3;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_get_property$arity$3(this$, id, p);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_property[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_property["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-get-property", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core.IRootKey = function() {
  var obj9092 = {};
  return obj9092;
}();
om.core._root_key = function om$core$_root_key(cursor) {
  if (function() {
    var and__4262__auto__ = cursor;
    if (and__4262__auto__) {
      return cursor.om$core$IRootKey$_root_key$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return cursor.om$core$IRootKey$_root_key$arity$1(cursor);
  } else {
    var x__4910__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__4274__auto__ = om.core._root_key[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._root_key["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootKey.-root-key", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IAdapt = function() {
  var obj9094 = {};
  return obj9094;
}();
om.core._adapt = function om$core$_adapt(this$, other) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IAdapt$_adapt$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IAdapt$_adapt$arity$2(this$, other);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._adapt[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._adapt["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAdapt.-adapt", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om.core.IAdapt["_"] = true;
om.core._adapt["_"] = function(_, other) {
  return other;
};
om.core.adapt = function om$core$adapt(x, other) {
  return om.core._adapt.call(null, x, other);
};
om.core.IOmRef = function() {
  var obj9096 = {};
  return obj9096;
}();
om.core._add_dep_BANG_ = function om$core$_add_dep_BANG_(this$, c) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IOmRef$_add_dep_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_add_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._add_dep_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._add_dep_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-add-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._remove_dep_BANG_ = function om$core$_remove_dep_BANG_(this$, c) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._remove_dep_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._remove_dep_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-remove-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._refresh_deps_BANG_ = function om$core$_refresh_deps_BANG_(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._refresh_deps_BANG_[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._refresh_deps_BANG_["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-refresh-deps!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_deps = function om$core$_get_deps(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.om$core$IOmRef$_get_deps$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_get_deps$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = om.core._get_deps[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._get_deps["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-get-deps", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.transact_STAR_ = function om$core$transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__9098 = state;
    if (G__9098) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9098.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__9098.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__9098);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__9098);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f);
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", -1038866178))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1039580704), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    -490349212), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function om$core$cursor_QMARK_(x) {
  var G__9100 = x;
  if (G__9100) {
    var bit__4948__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = bit__4948__auto__;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return G__9100.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__9100.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9100);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9100);
  }
};
om.core.component_QMARK_ = function om$core$component_QMARK_(x) {
  return x["isOmComponent"];
};
om.core.children = function om$core$children(node) {
  var c = node.props.children;
  if (cljs.core.ifn_QMARK_.call(null, c)) {
    return node.props.children = c.call(null, node);
  } else {
    return c;
  }
};
om.core.get_props = function om$core$get_props() {
  var G__9102 = arguments.length;
  switch(G__9102) {
    case 1:
      return om.core.get_props.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_props.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_props.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
  }
  return x.props["__om_cursor"];
};
om.core.get_props.cljs$core$IFn$_invoke$arity$2 = function(x, korks) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
  }
  var korks__$1 = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var G__9103 = x.props["__om_cursor"];
  var G__9103__$1 = cljs.core.seq.call(null, korks__$1) ? cljs.core.get_in.call(null, G__9103, korks__$1) : G__9103;
  return G__9103__$1;
};
om.core.get_props.cljs$lang$maxFixedArity = 2;
om.core.get_state = function om$core$get_state() {
  var G__9106 = arguments.length;
  switch(G__9106) {
    case 1:
      return om.core.get_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_state.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._get_state.call(null, owner);
};
om.core.get_state.cljs$core$IFn$_invoke$arity$2 = function(owner, korks) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._get_state.call(null, owner, ks);
};
om.core.get_state.cljs$lang$maxFixedArity = 2;
om.core.get_shared = function om$core$get_shared() {
  var G__9109 = arguments.length;
  switch(G__9109) {
    case 1:
      return om.core.get_shared.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_shared.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_shared.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  if (owner == null) {
    return null;
  } else {
    return owner.props["__om_shared"];
  }
};
om.core.get_shared.cljs$core$IFn$_invoke$arity$2 = function(owner, korks) {
  if (!cljs.core.sequential_QMARK_.call(null, korks)) {
    return cljs.core.get.call(null, om.core.get_shared.call(null, owner), korks);
  } else {
    if (cljs.core.empty_QMARK_.call(null, korks)) {
      return om.core.get_shared.call(null, owner);
    } else {
      return cljs.core.get_in.call(null, om.core.get_shared.call(null, owner), korks);
    }
  }
};
om.core.get_shared.cljs$lang$maxFixedArity = 2;
om.core.merge_pending_state = function om$core$merge_pending_state(owner) {
  var state = owner.state;
  var temp__4126__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var pending_state = temp__4126__auto__;
    var G__9112 = state;
    G__9112["__om_prev_state"] = state["__om_state"];
    G__9112["__om_state"] = pending_state;
    G__9112["__om_pending_state"] = null;
    return G__9112;
  } else {
    return null;
  }
};
om.core.merge_props_state = function om$core$merge_props_state() {
  var G__9114 = arguments.length;
  switch(G__9114) {
    case 1:
      return om.core.merge_props_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.merge_props_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.merge_props_state.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  return om.core.merge_props_state.call(null, owner, null);
};
om.core.merge_props_state.cljs$core$IFn$_invoke$arity$2 = function(owner, props) {
  var props__$1 = function() {
    var or__4274__auto__ = props;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return owner.props;
    }
  }();
  var temp__4126__auto__ = props__$1["__om_state"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var props_state = temp__4126__auto__;
    var state = owner.state;
    state["__om_pending_state"] = cljs.core.merge.call(null, function() {
      var or__4274__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return state["__om_state"];
      }
    }(), props_state);
    return props__$1["__om_state"] = null;
  } else {
    return null;
  }
};
om.core.merge_props_state.cljs$lang$maxFixedArity = 2;
om.core.ref_changed_QMARK_ = function om$core$ref_changed_QMARK_(ref) {
  var val = om.core.value.call(null, ref);
  var val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.state.call(null, ref)), om.core.path.call(null, ref), new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  return cljs.core.not_EQ_.call(null, val, val_SINGLEQUOTE_);
};
om.core.update_refs = function om$core$update_refs(c) {
  var cstate = c.state;
  var refs = cstate["__om_refs"];
  if (cljs.core.count.call(null, refs) === 0) {
    return null;
  } else {
    return cstate["__om_refs"] = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.filter.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(cstate, refs) {
      return function(ref) {
        var ref_val = om.core.value.call(null, ref);
        var ref_state = om.core.state.call(null, ref);
        var ref_path = om.core.path.call(null, ref);
        var ref_val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, ref_state), ref_path, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
        if (cljs.core.not_EQ_.call(null, ref_val, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
          if (cljs.core.not_EQ_.call(null, ref_val, ref_val_SINGLEQUOTE_)) {
            return om.core.adapt.call(null, ref, om.core.to_cursor.call(null, ref_val_SINGLEQUOTE_, ref_state, ref_path));
          } else {
            return ref;
          }
        } else {
          return null;
        }
      };
    }(cstate, refs), refs)));
  }
};
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), new cljs.core.Keyword(null, "isOmComponent", "isOmComponent", -2070015162), new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 559988974), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), 
new cljs.core.Keyword(null, "render", "render", -1408033454), new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 955710936), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 1324429466), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619)], [function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9117 = c;
    if (G__9117) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9117.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9117.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9117);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9117);
    }
  }()) {
    var state_9138 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__4274__auto__ = state_9138["__om_prev_state"];
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return state_9138["__om_state"];
      }
    }());
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, true, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__9118 = c;
    if (G__9118) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9118.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9118.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9118);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9118);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__9119 = cljs.core.seq.call(null, refs);
    var chunk__9120 = null;
    var count__9121 = 0;
    var i__9122 = 0;
    while (true) {
      if (i__9122 < count__9121) {
        var ref = cljs.core._nth.call(null, chunk__9120, i__9122);
        om.core.unobserve.call(null, this$, ref);
        var G__9139 = seq__9119;
        var G__9140 = chunk__9120;
        var G__9141 = count__9121;
        var G__9142 = i__9122 + 1;
        seq__9119 = G__9139;
        chunk__9120 = G__9140;
        count__9121 = G__9141;
        i__9122 = G__9142;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__9119);
        if (temp__4126__auto____$1) {
          var seq__9119__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9119__$1)) {
            var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__9119__$1);
            var G__9143 = cljs.core.chunk_rest.call(null, seq__9119__$1);
            var G__9144 = c__5059__auto__;
            var G__9145 = cljs.core.count.call(null, c__5059__auto__);
            var G__9146 = 0;
            seq__9119 = G__9143;
            chunk__9120 = G__9144;
            count__9121 = G__9145;
            i__9122 = G__9146;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__9119__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__9147 = cljs.core.next.call(null, seq__9119__$1);
            var G__9148 = null;
            var G__9149 = 0;
            var G__9150 = 0;
            seq__9119 = G__9147;
            chunk__9120 = G__9148;
            count__9121 = G__9149;
            i__9122 = G__9150;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9123 = c;
    if (G__9123) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9123.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__9123.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__9123);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__9123);
    }
  }()) {
    return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}));
  } else {
    return null;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var props = this$.props;
  var state = this$.state;
  var c = om.core.children.call(null, this$);
  om.core.merge_props_state.call(null, this$, next_props);
  if (function() {
    var G__9124 = c;
    if (G__9124) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9124.om$core$IShouldUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9124.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__9124);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__9124);
    }
  }()) {
    return om.core.should_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
    var cursor = props["__om_cursor"];
    var next_cursor = next_props["__om_cursor"];
    if (cljs.core.not_EQ_.call(null, om.core._value.call(null, cursor), om.core._value.call(null, next_cursor))) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = om.core.cursor_QMARK_.call(null, cursor);
        if (cljs.core.truth_(and__4262__auto__)) {
          var and__4262__auto____$1 = om.core.cursor_QMARK_.call(null, next_cursor);
          if (cljs.core.truth_(and__4262__auto____$1)) {
            return cljs.core.not_EQ_.call(null, om.core._path.call(null, cursor), om.core._path.call(null, next_cursor));
          } else {
            return and__4262__auto____$1;
          }
        } else {
          return and__4262__auto__;
        }
      }())) {
        return true;
      } else {
        if (cljs.core.not_EQ_.call(null, om.core._get_state.call(null, this$), om.core._get_render_state.call(null, this$))) {
          return true;
        } else {
          if (cljs.core.truth_(function() {
            var and__4262__auto__ = !(cljs.core.count.call(null, state["__om_refs"]) === 0);
            if (and__4262__auto__) {
              return cljs.core.some.call(null, function(and__4262__auto__, cursor, next_cursor, props, state, c, this$) {
                return function(p1__9116_SHARP_) {
                  return om.core.ref_changed_QMARK_.call(null, p1__9116_SHARP_);
                };
              }(and__4262__auto__, cursor, next_cursor, props, state, c, this$), state["__om_refs"]);
            } else {
              return and__4262__auto__;
            }
          }())) {
            return true;
          } else {
            if (!(props["__om_index"] === next_props["__om_index"])) {
              return true;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_parent_STAR_9125 = om.core._STAR_parent_STAR_;
  var _STAR_state_STAR_9126 = om.core._STAR_state_STAR_;
  var _STAR_instrument_STAR_9127 = om.core._STAR_instrument_STAR_;
  var _STAR_descriptor_STAR_9128 = om.core._STAR_descriptor_STAR_;
  var _STAR_root_key_STAR_9129 = om.core._STAR_root_key_STAR_;
  om.core._STAR_parent_STAR_ = this$;
  om.core._STAR_state_STAR_ = props["__om_app_state"];
  om.core._STAR_instrument_STAR_ = props["__om_instrument"];
  om.core._STAR_descriptor_STAR_ = props["__om_descriptor"];
  om.core._STAR_root_key_STAR_ = props["__om_root_key"];
  try {
    if (function() {
      var G__9130 = c;
      if (G__9130) {
        var bit__4948__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4274__auto__ = bit__4948__auto__;
          if (cljs.core.truth_(or__4274__auto__)) {
            return or__4274__auto__;
          } else {
            return G__9130.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__9130.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9130);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9130);
      }
    }()) {
      return om.core.render.call(null, c);
    } else {
      if (function() {
        var G__9131 = c;
        if (G__9131) {
          var bit__4948__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4274__auto__ = bit__4948__auto__;
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              return G__9131.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__9131.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9131);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9131);
        }
      }()) {
        return om.core.render_props.call(null, c, props["__om_cursor"], om.core.get_state.call(null, this$));
      } else {
        if (function() {
          var G__9132 = c;
          if (G__9132) {
            var bit__4948__auto__ = null;
            if (cljs.core.truth_(function() {
              var or__4274__auto__ = bit__4948__auto__;
              if (cljs.core.truth_(or__4274__auto__)) {
                return or__4274__auto__;
              } else {
                return G__9132.om$core$IRenderState$;
              }
            }())) {
              return true;
            } else {
              if (!G__9132.cljs$lang$protocol_mask$partition$) {
                return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9132);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9132);
          }
        }()) {
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } else {
          return c;
        }
      }
    }
  } finally {
    om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_9129;
    om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_9128;
    om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_9127;
    om.core._STAR_state_STAR_ = _STAR_state_STAR_9126;
    om.core._STAR_parent_STAR_ = _STAR_parent_STAR_9125;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var c_9151 = om.core.children.call(null, this$);
  if (function() {
    var G__9133 = c_9151;
    if (G__9133) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9133.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9133.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9133);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9133);
    }
  }()) {
    var state_9152 = this$.state;
    om.core.will_update.call(null, c_9151, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__4274__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, function() {
    var G__9134 = c;
    if (G__9134) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9134.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__9134.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9134);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9134);
    }
  }() ? om.core.init_state.call(null, c) : null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693))), "__om_id":function() {
    var or__4274__auto__ = id;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__9135 = c;
    if (G__9135) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9135.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9135.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__9135);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__9135);
    }
  }()) {
    return om.core.did_mount.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9136 = c;
    if (G__9136) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9136.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__9136.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__9136);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__9136);
    }
  }()) {
    return om.core.display_name.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_9153 = om.core.children.call(null, this$);
  if (function() {
    var G__9137 = c_9153;
    if (G__9137) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9137.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9137.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9137);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9137);
    }
  }()) {
    om.core.will_mount.call(null, c_9153);
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}]);
om.core.specify_state_methods_BANG_ = function om$core$specify_state_methods_BANG_(obj) {
  var x9155 = obj;
  x9155.om$core$IGetState$ = true;
  x9155.om$core$IGetState$_get_state$arity$1 = function(x9155) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__4274__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x9155);
  x9155.om$core$IGetState$_get_state$arity$2 = function(x9155) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x9155);
  x9155.om$core$IGetRenderState$ = true;
  x9155.om$core$IGetRenderState$_get_render_state$arity$1 = function(x9155) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x9155);
  x9155.om$core$IGetRenderState$_get_render_state$arity$2 = function(x9155) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x9155);
  x9155.om$core$ISetState$ = true;
  x9155.om$core$ISetState$_set_state_BANG_$arity$3 = function(x9155) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var app_state = props["__om_app_state"];
      this$__$1.state["__om_pending_state"] = val;
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = !(app_state == null);
        if (and__4262__auto__) {
          return render;
        } else {
          return and__4262__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x9155);
  x9155.om$core$ISetState$_set_state_BANG_$arity$4 = function(x9155) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var state = this$__$1.state;
      var pstate = om.core._get_state.call(null, this$__$1);
      var app_state = props["__om_app_state"];
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = !(app_state == null);
        if (and__4262__auto__) {
          return render;
        } else {
          return and__4262__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x9155);
  return x9155;
};
om.core.pure_descriptor = om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods));
om.core.react_id = function om$core$react_id(x) {
  var id = x["_rootNodeID"];
  if (cljs.core.truth_(id)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "id", "id", 252129435, null)))].join(""));
  }
  return id;
};
om.core.get_gstate = function om$core$get_gstate(owner) {
  return owner.props["__om_app_state"];
};
om.core.no_local_merge_pending_state = function om$core$no_local_merge_pending_state(owner) {
  var gstate = om.core.get_gstate.call(null, owner);
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, owner)], null);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), spath);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, function(gstate, spath, states) {
      return function(states__$1) {
        return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, states__$1, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923), (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1)), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1), 
        (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states__$1))), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973));
      };
    }(gstate, spath, states));
  } else {
    return null;
  }
};
om.core.no_local_state_methods = cljs.core.assoc.call(null, om.core.pure_methods, new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__4274__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var om_id = function() {
    var or__4274__auto__ = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }();
  var state = cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)), function() {
    var G__9156 = c;
    if (G__9156) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9156.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__9156.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9156);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__9156);
    }
  }() ? om.core.init_state.call(null, c) : null);
  var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
  props["__om_init_state"] = null;
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.assoc_in, spath, state);
  return{"__om_id":om_id};
}, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_9165 = om.core.children.call(null, this$);
  if (function() {
    var G__9157 = c_9165;
    if (G__9157) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9157.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9157.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9157);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__9157);
    }
  }()) {
    om.core.will_mount.call(null, c_9165);
  } else {
  }
  return om.core.no_local_merge_pending_state.call(null, this$);
}, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__9158 = c;
    if (G__9158) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9158.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__9158.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9158);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__9158);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128)], null), cljs.core.dissoc, om.core.react_id.call(null, this$));
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__9159 = cljs.core.seq.call(null, refs);
    var chunk__9160 = null;
    var count__9161 = 0;
    var i__9162 = 0;
    while (true) {
      if (i__9162 < count__9161) {
        var ref = cljs.core._nth.call(null, chunk__9160, i__9162);
        om.core.unobserve.call(null, this$, ref);
        var G__9166 = seq__9159;
        var G__9167 = chunk__9160;
        var G__9168 = count__9161;
        var G__9169 = i__9162 + 1;
        seq__9159 = G__9166;
        chunk__9160 = G__9167;
        count__9161 = G__9168;
        i__9162 = G__9169;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__9159);
        if (temp__4126__auto____$1) {
          var seq__9159__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9159__$1)) {
            var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__9159__$1);
            var G__9170 = cljs.core.chunk_rest.call(null, seq__9159__$1);
            var G__9171 = c__5059__auto__;
            var G__9172 = cljs.core.count.call(null, c__5059__auto__);
            var G__9173 = 0;
            seq__9159 = G__9170;
            chunk__9160 = G__9171;
            count__9161 = G__9172;
            i__9162 = G__9173;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__9159__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__9174 = cljs.core.next.call(null, seq__9159__$1);
            var G__9175 = null;
            var G__9176 = 0;
            var G__9177 = 0;
            seq__9159 = G__9174;
            chunk__9160 = G__9175;
            count__9161 = G__9176;
            i__9162 = G__9177;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), function(next_props, next_state) {
  var this$ = this;
  var props_9178 = this$.props;
  var c_9179 = om.core.children.call(null, this$);
  if (function() {
    var G__9163 = c_9179;
    if (G__9163) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9163.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9163.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9163);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__9163);
    }
  }()) {
    var state_9180 = this$.state;
    om.core.will_update.call(null, c_9179, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.no_local_merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var gstate = om.core.get_gstate.call(null, this$);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null));
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null);
  if (function() {
    var G__9164 = c;
    if (G__9164) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9164.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__9164.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9164);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__9164);
    }
  }()) {
    var state_9181 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__4274__auto__ = (new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    }());
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, cljs.core.dissoc, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923));
  } else {
    return null;
  }
});
om.core.no_local_descriptor = function om$core$no_local_descriptor(methods$) {
  var x9183 = cljs.core.clj__GT_js.call(null, methods$);
  x9183.om$core$IGetState$ = true;
  x9183.om$core$IGetState$_get_state$arity$1 = function(x9183) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1)], null);
      var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
      var or__4274__auto__ = (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    };
  }(x9183);
  x9183.om$core$IGetState$_get_state$arity$2 = function(x9183) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x9183);
  x9183.om$core$IGetRenderState$ = true;
  x9183.om$core$IGetRenderState$_get_render_state$arity$1 = function(x9183) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
    };
  }(x9183);
  x9183.om$core$IGetRenderState$_get_render_state$arity$2 = function(x9183) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x9183);
  x9183.om$core$ISetState$ = true;
  x9183.om$core$ISetState$_set_state_BANG_$arity$3 = function(x9183) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var gstate = om.core.get_gstate.call(null, this$__$1);
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)], null);
      cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$__$1), cljs.core.assoc_in, spath, val);
      if (cljs.core.truth_(function() {
        var and__4262__auto__ = !(gstate == null);
        if (and__4262__auto__) {
          return render;
        } else {
          return and__4262__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, gstate, this$__$1);
      } else {
        return null;
      }
    };
  }(x9183);
  x9183.om$core$ISetState$_set_state_BANG_$arity$4 = function(x9183) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      return om.core._set_state_BANG_.call(null, this$__$1, cljs.core.assoc_in.call(null, om.core._get_state.call(null, this$__$1), ks, val), render);
    };
  }(x9183);
  return x9183;
};
om.core.valid_QMARK_ = function om$core$valid_QMARK_(x) {
  if (function() {
    var G__9185 = x;
    if (G__9185) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9185.om$core$ICursor$;
        }
      }())) {
        return true;
      } else {
        if (!G__9185.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9185);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__9185);
    }
  }()) {
    return!cljs.core.keyword_identical_QMARK_.call(null, cljs.core.deref.call(null, x), new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
  } else {
    return true;
  }
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2163640079;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var v = cljs.core._lookup.call(null, self__.value, k, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  if (!cljs.core._EQ_.call(null, v, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
    return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
  } else {
    return not_found;
  }
};
om.core.MapCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, other))) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(p__9187) {
        var vec__9188 = p__9187;
        var k = cljs.core.nth.call(null, vec__9188, 0, null);
        var v = cljs.core.nth.call(null, vec__9188, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
      };
    }(this$__$1), self__.value);
  } else {
    return null;
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.MapCursor.prototype.call = function() {
  var G__9189 = null;
  var G__9189__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__9189__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__9189 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9189__2.call(this, self__, k);
      case 3:
        return G__9189__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9189.cljs$core$IFn$_invoke$arity$2 = G__9189__2;
  G__9189.cljs$core$IFn$_invoke$arity$3 = G__9189__3;
  return G__9189;
}();
om.core.MapCursor.prototype.apply = function(self__, args9186) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9186)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "om.core/MapCursor");
};
om.core.__GT_MapCursor = function om$core$__GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2180424479;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, null);
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (n < cljs.core._count.call(null, self__.value)) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n, not_found), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    return not_found;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, other))) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(v, i) {
        return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
      };
    }(this$__$1), self__.value, cljs.core.range.call(null));
  } else {
    return null;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.call = function() {
  var G__9191 = null;
  var G__9191__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__9191__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__9191 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9191__2.call(this, self__, k);
      case 3:
        return G__9191__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9191.cljs$core$IFn$_invoke$arity$2 = G__9191__2;
  G__9191.cljs$core$IFn$_invoke$arity$3 = G__9191__3;
  return G__9191;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args9190) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9190)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
  return cljs.core._write.call(null, writer__4854__auto__, "om.core/IndexedCursor");
};
om.core.__GT_IndexedCursor = function om$core$__GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function om$core$to_cursor_STAR_(val, state, path) {
  var x9193 = cljs.core.clone.call(null, val);
  x9193.cljs$core$IEquiv$ = true;
  x9193.cljs$core$IEquiv$_equiv$arity$2 = function(x9193) {
    return function(_, other) {
      var ___$1 = this;
      if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, other))) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    };
  }(x9193);
  x9193.om$core$ITransact$ = true;
  x9193.om$core$ITransact$_transact_BANG_$arity$4 = function(x9193) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x9193);
  x9193.om$core$ICursor$ = true;
  x9193.om$core$ICursor$_path$arity$1 = function(x9193) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x9193);
  x9193.om$core$ICursor$_state$arity$1 = function(x9193) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x9193);
  x9193.cljs$core$IDeref$ = true;
  x9193.cljs$core$IDeref$_deref$arity$1 = function(x9193) {
    return function(this$) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
    };
  }(x9193);
  return x9193;
};
om.core.to_cursor = function om$core$to_cursor() {
  var G__9195 = arguments.length;
  switch(G__9195) {
    case 1:
      return om.core.to_cursor.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.to_cursor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.to_cursor.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.to_cursor.cljs$core$IFn$_invoke$arity$1 = function(val) {
  return om.core.to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
};
om.core.to_cursor.cljs$core$IFn$_invoke$arity$2 = function(val, state) {
  return om.core.to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
};
om.core.to_cursor.cljs$core$IFn$_invoke$arity$3 = function(val, state, path) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, val))) {
    return val;
  } else {
    if (function() {
      var G__9196 = val;
      if (G__9196) {
        var bit__4948__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4274__auto__ = bit__4948__auto__;
          if (cljs.core.truth_(or__4274__auto__)) {
            return or__4274__auto__;
          } else {
            return G__9196.om$core$IToCursor$;
          }
        }())) {
          return true;
        } else {
          if (!G__9196.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__9196);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__9196);
      }
    }()) {
      return om.core._to_cursor.call(null, val, state, path);
    } else {
      if (cljs.core.indexed_QMARK_.call(null, val)) {
        return new om.core.IndexedCursor(val, state, path);
      } else {
        if (cljs.core.map_QMARK_.call(null, val)) {
          return new om.core.MapCursor(val, state, path);
        } else {
          if (function() {
            var G__9197 = val;
            if (G__9197) {
              var bit__4948__auto__ = G__9197.cljs$lang$protocol_mask$partition1$ & 8192;
              if (bit__4948__auto__ || G__9197.cljs$core$ICloneable$) {
                return true;
              } else {
                if (!G__9197.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__9197);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__9197);
            }
          }()) {
            return om.core.to_cursor_STAR_.call(null, val, state, path);
          } else {
            return val;
          }
        }
      }
    }
  }
};
om.core.to_cursor.cljs$lang$maxFixedArity = 3;
om.core.notify_STAR_ = function om$core$notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.root_cursor = function om$core$root_cursor(atom) {
  if (function() {
    var G__9200 = atom;
    if (G__9200) {
      var bit__4948__auto__ = G__9200.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4948__auto__ || G__9200.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__9200.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__9200);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__9200);
    }
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "atom", "atom", 1243487874, null))))].join(""));
  }
  return om.core.to_cursor.call(null, cljs.core.deref.call(null, atom), atom, cljs.core.PersistentVector.EMPTY);
};
om.core._refs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.ref_sub_cursor = function om$core$ref_sub_cursor(x, parent) {
  var x9202 = cljs.core.clone.call(null, x);
  x9202.om$core$ITransact$ = true;
  x9202.om$core$ITransact$_transact_BANG_$arity$4 = function(x9202) {
    return function(cursor, korks, f, tag) {
      var cursor__$1 = this;
      om.core.commit_BANG_.call(null, cursor__$1, korks, f);
      return om.core._refresh_deps_BANG_.call(null, parent);
    };
  }(x9202);
  x9202.om$core$ICursorDerive$ = true;
  x9202.om$core$ICursorDerive$_derive$arity$4 = function(x9202) {
    return function(this$, derived, state, path) {
      var this$__$1 = this;
      var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path);
      if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_))) {
        return om.core.adapt.call(null, this$__$1, cursor_SINGLEQUOTE_);
      } else {
        return cursor_SINGLEQUOTE_;
      }
    };
  }(x9202);
  x9202.om$core$IAdapt$ = true;
  x9202.om$core$IAdapt$_adapt$arity$2 = function(x9202) {
    return function(this$, other) {
      var this$__$1 = this;
      return om$core$ref_sub_cursor.call(null, om.core.adapt.call(null, x, other), parent);
    };
  }(x9202);
  x9202.cljs$core$ICloneable$ = true;
  x9202.cljs$core$ICloneable$_clone$arity$1 = function(x9202) {
    return function(this$) {
      var this$__$1 = this;
      return om$core$ref_sub_cursor.call(null, cljs.core.clone.call(null, x), parent);
    };
  }(x9202);
  return x9202;
};
om.core.ref_cursor = function om$core$ref_cursor(cursor) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (function() {
    var G__9209 = cursor;
    if (G__9209) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9209.om$core$IOmRef$;
        }
      }())) {
        return true;
      } else {
        if (!G__9209.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__9209);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__9209);
    }
  }()) {
    return cursor;
  } else {
    var path = om.core.path.call(null, cursor);
    var storage = cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null), cljs.core.fnil.call(null, cljs.core.identity, cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY))), path);
    var x9210 = cljs.core.clone.call(null, cursor);
    x9210.om$core$ITransact$ = true;
    x9210.om$core$ITransact$_transact_BANG_$arity$4 = function(x9210, path, storage) {
      return function(cursor__$1, korks, f, tag) {
        var cursor__$2 = this;
        om.core.commit_BANG_.call(null, cursor__$2, korks, f);
        return om.core._refresh_deps_BANG_.call(null, cursor__$2);
      };
    }(x9210, path, storage);
    x9210.om$core$IOmRef$ = true;
    x9210.om$core$IOmRef$_add_dep_BANG_$arity$2 = function(x9210, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, storage, cljs.core.assoc, om.core.id.call(null, c), c);
      };
    }(x9210, path, storage);
    x9210.om$core$IOmRef$_remove_dep_BANG_$arity$2 = function(x9210, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        var m = cljs.core.swap_BANG_.call(null, storage, cljs.core.dissoc, om.core.id.call(null, c));
        if (cljs.core.count.call(null, m) === 0) {
          return cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.dissoc, path);
        } else {
          return null;
        }
      };
    }(x9210, path, storage);
    x9210.om$core$IOmRef$_refresh_deps_BANG_$arity$1 = function(x9210, path, storage) {
      return function(_) {
        var ___$1 = this;
        var seq__9211 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, storage)));
        var chunk__9212 = null;
        var count__9213 = 0;
        var i__9214 = 0;
        while (true) {
          if (i__9214 < count__9213) {
            var c = cljs.core._nth.call(null, chunk__9212, i__9214);
            om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
            var G__9215 = seq__9211;
            var G__9216 = chunk__9212;
            var G__9217 = count__9213;
            var G__9218 = i__9214 + 1;
            seq__9211 = G__9215;
            chunk__9212 = G__9216;
            count__9213 = G__9217;
            i__9214 = G__9218;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__9211);
            if (temp__4126__auto__) {
              var seq__9211__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9211__$1)) {
                var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__9211__$1);
                var G__9219 = cljs.core.chunk_rest.call(null, seq__9211__$1);
                var G__9220 = c__5059__auto__;
                var G__9221 = cljs.core.count.call(null, c__5059__auto__);
                var G__9222 = 0;
                seq__9211 = G__9219;
                chunk__9212 = G__9220;
                count__9213 = G__9221;
                i__9214 = G__9222;
                continue;
              } else {
                var c = cljs.core.first.call(null, seq__9211__$1);
                om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
                var G__9223 = cljs.core.next.call(null, seq__9211__$1);
                var G__9224 = null;
                var G__9225 = 0;
                var G__9226 = 0;
                seq__9211 = G__9223;
                chunk__9212 = G__9224;
                count__9213 = G__9225;
                i__9214 = G__9226;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x9210, path, storage);
    x9210.om$core$IOmRef$_get_deps$arity$1 = function(x9210, path, storage) {
      return function(_) {
        var ___$1 = this;
        return cljs.core.deref.call(null, storage);
      };
    }(x9210, path, storage);
    x9210.om$core$ICursorDerive$ = true;
    x9210.om$core$ICursorDerive$_derive$arity$4 = function(x9210, path, storage) {
      return function(this$, derived, state, path__$1) {
        var this$__$1 = this;
        var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path__$1);
        if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_))) {
          return om.core.ref_sub_cursor.call(null, cursor_SINGLEQUOTE_, this$__$1);
        } else {
          return cursor_SINGLEQUOTE_;
        }
      };
    }(x9210, path, storage);
    return x9210;
  }
};
om.core.add_ref_to_component_BANG_ = function om$core$add_ref_to_component_BANG_(c, ref) {
  var state = c.state;
  var refs = function() {
    var or__4274__auto__ = state["__om_refs"];
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  }();
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return null;
  } else {
    return state["__om_refs"] = cljs.core.conj.call(null, refs, ref);
  }
};
om.core.remove_ref_from_component_BANG_ = function om$core$remove_ref_from_component_BANG_(c, ref) {
  var state = c.state;
  var refs = state["__om_refs"];
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return state["__om_refs"] = cljs.core.disj.call(null, refs, ref);
  } else {
    return null;
  }
};
om.core.observe = function om$core$observe(c, ref) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, ref))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "ref", "ref", -1364538802, null))))].join(""));
  }
  om.core.add_ref_to_component_BANG_.call(null, c, ref);
  om.core._add_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.unobserve = function om$core$unobserve(c, ref) {
  om.core.remove_ref_from_component_BANG_.call(null, c, ref);
  om.core._remove_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.get_renderT = function om$core$get_renderT(state) {
  var or__4274__auto__ = state.om$render$T;
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return 0;
  }
};
om.core.render_all = function om$core$render_all() {
  var G__9228 = arguments.length;
  switch(G__9228) {
    case 0:
      return om.core.render_all.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.core.render_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.render_all.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.core.render_all.call(null, null);
};
om.core.render_all.cljs$core$IFn$_invoke$arity$1 = function(state) {
  om.core.refresh_queued = false;
  var seq__9229_9234 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
  var chunk__9230_9235 = null;
  var count__9231_9236 = 0;
  var i__9232_9237 = 0;
  while (true) {
    if (i__9232_9237 < count__9231_9236) {
      var f_9238 = cljs.core._nth.call(null, chunk__9230_9235, i__9232_9237);
      f_9238.call(null);
      var G__9239 = seq__9229_9234;
      var G__9240 = chunk__9230_9235;
      var G__9241 = count__9231_9236;
      var G__9242 = i__9232_9237 + 1;
      seq__9229_9234 = G__9239;
      chunk__9230_9235 = G__9240;
      count__9231_9236 = G__9241;
      i__9232_9237 = G__9242;
      continue;
    } else {
      var temp__4126__auto___9243 = cljs.core.seq.call(null, seq__9229_9234);
      if (temp__4126__auto___9243) {
        var seq__9229_9244__$1 = temp__4126__auto___9243;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9229_9244__$1)) {
          var c__5059__auto___9245 = cljs.core.chunk_first.call(null, seq__9229_9244__$1);
          var G__9246 = cljs.core.chunk_rest.call(null, seq__9229_9244__$1);
          var G__9247 = c__5059__auto___9245;
          var G__9248 = cljs.core.count.call(null, c__5059__auto___9245);
          var G__9249 = 0;
          seq__9229_9234 = G__9246;
          chunk__9230_9235 = G__9247;
          count__9231_9236 = G__9248;
          i__9232_9237 = G__9249;
          continue;
        } else {
          var f_9250 = cljs.core.first.call(null, seq__9229_9244__$1);
          f_9250.call(null);
          var G__9251 = cljs.core.next.call(null, seq__9229_9244__$1);
          var G__9252 = null;
          var G__9253 = 0;
          var G__9254 = 0;
          seq__9229_9234 = G__9251;
          chunk__9230_9235 = G__9252;
          count__9231_9236 = G__9253;
          i__9232_9237 = G__9254;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (state == null) {
    return null;
  } else {
    return state.om$render$T = om.core.get_renderT.call(null, state) + 1;
  }
};
om.core.render_all.cljs$lang$maxFixedArity = 1;
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_component_QMARK_ = function om$core$valid_component_QMARK_(x, f) {
  if (function() {
    var or__4274__auto__ = function() {
      var G__9261 = x;
      if (G__9261) {
        var bit__4948__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4274__auto__ = bit__4948__auto__;
          if (cljs.core.truth_(or__4274__auto__)) {
            return or__4274__auto__;
          } else {
            return G__9261.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__9261.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9261);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__9261);
      }
    }();
    if (or__4274__auto__) {
      return or__4274__auto__;
    } else {
      var or__4274__auto____$1 = function() {
        var G__9263 = x;
        if (G__9263) {
          var bit__4948__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4274__auto____$1 = bit__4948__auto__;
            if (cljs.core.truth_(or__4274__auto____$1)) {
              return or__4274__auto____$1;
            } else {
              return G__9263.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__9263.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9263);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__9263);
        }
      }();
      if (or__4274__auto____$1) {
        return or__4274__auto____$1;
      } else {
        var G__9264 = x;
        if (G__9264) {
          var bit__4948__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4274__auto____$2 = bit__4948__auto__;
            if (cljs.core.truth_(or__4274__auto____$2)) {
              return or__4274__auto____$2;
            } else {
              return G__9264.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__9264.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9264);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__9264);
        }
      }
    }
  }()) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Om component fn, "), cljs.core.str(f.name), cljs.core.str(" does not return valid instance")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRender", "IRender", 590822196, null), new cljs.core.Symbol(null, 
    "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderProps", "IRenderProps", 2115139472, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderState", "IRenderState", -897673898, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)))))].join(""));
  }
};
om.core.valid_opts_QMARK_ = function om$core$valid_opts_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018), null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), null, new cljs.core.Keyword(null, "instrument", "instrument", -960698844), null, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348), null, new cljs.core.Keyword(null, "key", "key", -1516042587), null, new cljs.core.Keyword(null, "init-state", 
  "init-state", 1450863212), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479), null, new cljs.core.Keyword(null, "opts", "opts", 155075701), null, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), null, new cljs.core.Keyword(null, "shared", "shared", -384145993), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function om$core$id(owner) {
  return owner.state["__om_id"];
};
om.core.get_descriptor = function om$core$get_descriptor() {
  var G__9266 = arguments.length;
  switch(G__9266) {
    case 1:
      return om.core.get_descriptor.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_descriptor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_descriptor.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return om.core.get_descriptor.call(null, f, null);
};
om.core.get_descriptor.cljs$core$IFn$_invoke$arity$2 = function(f, descriptor) {
  if (f["om$descriptor"] == null) {
    f["om$descriptor"] = React.createFactory(React.createClass(function() {
      var or__4274__auto__ = descriptor;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = om.core._STAR_descriptor_STAR_;
        if (cljs.core.truth_(or__4274__auto____$1)) {
          return or__4274__auto____$1;
        } else {
          return om.core.pure_descriptor;
        }
      }
    }()));
  } else {
  }
  return f["om$descriptor"];
};
om.core.get_descriptor.cljs$lang$maxFixedArity = 2;
om.core.getf = function om$core$getf() {
  var G__9269 = arguments.length;
  switch(G__9269) {
    case 2:
      return om.core.getf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.getf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.getf.cljs$core$IFn$_invoke$arity$2 = function(f, cursor) {
  if (f instanceof cljs.core.MultiFn) {
    var dv = f.dispatch_fn.call(null, cursor, null);
    return cljs.core.get_method.call(null, f, dv);
  } else {
    return f;
  }
};
om.core.getf.cljs$core$IFn$_invoke$arity$3 = function(f, cursor, opts) {
  if (f instanceof cljs.core.MultiFn) {
    var dv = f.dispatch_fn.call(null, cursor, null, opts);
    return cljs.core.get_method.call(null, f, dv);
  } else {
    return f;
  }
};
om.core.getf.cljs$lang$maxFixedArity = 3;
om.core.build_STAR_ = function om$core$build_STAR_() {
  var G__9272 = arguments.length;
  switch(G__9272) {
    case 2:
      return om.core.build_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.build_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.build_STAR_.cljs$core$IFn$_invoke$arity$2 = function(f, cursor) {
  return om.core.build_STAR_.call(null, f, cursor, null);
};
om.core.build_STAR_.cljs$core$IFn$_invoke$arity$3 = function(f, cursor, m) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
  }
  if (cljs.core.truth_(om.core.valid_opts_QMARK_.call(null, m))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :key-fn :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "m", "m", -1021758608, 
    null))))].join(""));
  }
  if (m == null) {
    var shared = om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
    var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor));
    return ctor.call(null, {"children":function(shared, ctor) {
      return function(this$) {
        var ret = f.call(null, cursor, this$);
        om.core.valid_component_QMARK_.call(null, ret, f);
        return ret;
      };
    }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_, "__om_shared":shared, "__om_cursor":cursor});
  } else {
    var map__9273 = m;
    var map__9273__$1 = cljs.core.seq_QMARK_.call(null, map__9273) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9273) : map__9273;
    var opts = cljs.core.get.call(null, map__9273__$1, new cljs.core.Keyword(null, "opts", "opts", 155075701));
    var init_state = cljs.core.get.call(null, map__9273__$1, new cljs.core.Keyword(null, "init-state", "init-state", 1450863212));
    var state = cljs.core.get.call(null, map__9273__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
    var key_fn = cljs.core.get.call(null, map__9273__$1, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479));
    var key = cljs.core.get.call(null, map__9273__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
    var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", -1175266204));
    var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
      var temp__4124__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var i = temp__4124__auto__;
        return dataf.call(null, cursor, i);
      } else {
        return dataf.call(null, cursor);
      }
    }() : cursor;
    var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : !(key_fn == null) ? key_fn.call(null, cursor_SINGLEQUOTE_) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348));
    var shared = function() {
      var or__4274__auto__ = (new cljs.core.Keyword(null, "shared", "shared", -384145993)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
      }
    }();
    var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor_SINGLEQUOTE_, opts), (new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018)).cljs$core$IFn$_invoke$arity$1(m));
    return ctor.call(null, {"__om_state":state, "__om_instrument":om.core._STAR_instrument_STAR_, "children":opts == null ? function(map__9273, map__9273__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
      return function(this$) {
        var ret = f.call(null, cursor_SINGLEQUOTE_, this$);
        om.core.valid_component_QMARK_.call(null, ret, f);
        return ret;
      };
    }(map__9273, map__9273__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__9273, map__9273__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
      return function(this$) {
        var ret = f.call(null, cursor_SINGLEQUOTE_, this$, opts);
        om.core.valid_component_QMARK_.call(null, ret, f);
        return ret;
      };
    }(map__9273, map__9273__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor), "__om_init_state":init_state, "key":function() {
      var or__4274__auto__ = rkey;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return undefined;
      }
    }(), "__om_app_state":om.core._STAR_state_STAR_, "__om_cursor":cursor_SINGLEQUOTE_, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m), "__om_shared":shared, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_});
  }
};
om.core.build_STAR_.cljs$lang$maxFixedArity = 3;
om.core.build = function om$core$build() {
  var G__9276 = arguments.length;
  switch(G__9276) {
    case 2:
      return om.core.build.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.build.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.build.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return om.core.build.call(null, f, x, null);
};
om.core.build.cljs$core$IFn$_invoke$arity$3 = function(f, x, m) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
  }
  if (!(om.core._STAR_instrument_STAR_ == null)) {
    var ret = om.core._STAR_instrument_STAR_.call(null, f, x, m);
    if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", -1453289268))) {
      return om.core.build_STAR_.call(null, f, x, m);
    } else {
      return ret;
    }
  } else {
    return om.core.build_STAR_.call(null, f, x, m);
  }
};
om.core.build.cljs$lang$maxFixedArity = 3;
om.core.build_all = function om$core$build_all() {
  var G__9279 = arguments.length;
  switch(G__9279) {
    case 2:
      return om.core.build_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.build_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.build_all.cljs$core$IFn$_invoke$arity$2 = function(f, xs) {
  return om.core.build_all.call(null, f, xs, null);
};
om.core.build_all.cljs$core$IFn$_invoke$arity$3 = function(f, xs, m) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (m == null || cljs.core.map_QMARK_.call(null, m)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
  }
  return cljs.core.map.call(null, function(x, i) {
    return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), i));
  }, xs, cljs.core.range.call(null));
};
om.core.build_all.cljs$lang$maxFixedArity = 3;
om.core.setup = function om$core$setup(state, key, tx_listen) {
  if (function() {
    var G__9289 = state;
    if (G__9289) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9289.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__9289.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__9289);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__9289);
    }
  }()) {
  } else {
    var properties_9297 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var listeners_9298 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_9299 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x9290_9300 = state;
    x9290_9300.om$core$IRenderQueue$ = true;
    x9290_9300.om$core$IRenderQueue$_get_queue$arity$1 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_9299);
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_9299), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_9299, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_9299, cljs.core.empty);
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$INotify$ = true;
    x9290_9300.om$core$INotify$_listen_BANG_$arity$3 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_9298, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$INotify$_unlisten_BANG_$arity$2 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_9298, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$INotify$_notify_BANG_$arity$3 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        var seq__9291_9301 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_9298));
        var chunk__9292_9302 = null;
        var count__9293_9303 = 0;
        var i__9294_9304 = 0;
        while (true) {
          if (i__9294_9304 < count__9293_9303) {
            var vec__9295_9305 = cljs.core._nth.call(null, chunk__9292_9302, i__9294_9304);
            var __9306 = cljs.core.nth.call(null, vec__9295_9305, 0, null);
            var f_9307 = cljs.core.nth.call(null, vec__9295_9305, 1, null);
            f_9307.call(null, tx_data, root_cursor);
            var G__9308 = seq__9291_9301;
            var G__9309 = chunk__9292_9302;
            var G__9310 = count__9293_9303;
            var G__9311 = i__9294_9304 + 1;
            seq__9291_9301 = G__9308;
            chunk__9292_9302 = G__9309;
            count__9293_9303 = G__9310;
            i__9294_9304 = G__9311;
            continue;
          } else {
            var temp__4126__auto___9312 = cljs.core.seq.call(null, seq__9291_9301);
            if (temp__4126__auto___9312) {
              var seq__9291_9313__$1 = temp__4126__auto___9312;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9291_9313__$1)) {
                var c__5059__auto___9314 = cljs.core.chunk_first.call(null, seq__9291_9313__$1);
                var G__9315 = cljs.core.chunk_rest.call(null, seq__9291_9313__$1);
                var G__9316 = c__5059__auto___9314;
                var G__9317 = cljs.core.count.call(null, c__5059__auto___9314);
                var G__9318 = 0;
                seq__9291_9301 = G__9315;
                chunk__9292_9302 = G__9316;
                count__9293_9303 = G__9317;
                i__9294_9304 = G__9318;
                continue;
              } else {
                var vec__9296_9319 = cljs.core.first.call(null, seq__9291_9313__$1);
                var __9320 = cljs.core.nth.call(null, vec__9296_9319, 0, null);
                var f_9321 = cljs.core.nth.call(null, vec__9296_9319, 1, null);
                f_9321.call(null, tx_data, root_cursor);
                var G__9322 = cljs.core.next.call(null, seq__9291_9313__$1);
                var G__9323 = null;
                var G__9324 = 0;
                var G__9325 = 0;
                seq__9291_9301 = G__9322;
                chunk__9292_9302 = G__9323;
                count__9293_9303 = G__9324;
                i__9294_9304 = G__9325;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return this$__$1;
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$IRootProperties$ = true;
    x9290_9300.om$core$IRootProperties$_set_property_BANG_$arity$4 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(_, id, k, v) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_9297, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null), v);
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$IRootProperties$_remove_property_BANG_$arity$3 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_9297, cljs.core.dissoc, id, k);
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$IRootProperties$_remove_properties_BANG_$arity$2 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(_, id) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_9297, cljs.core.dissoc, id);
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
    x9290_9300.om$core$IRootProperties$_get_property$arity$3 = function(x9290_9300, properties_9297, listeners_9298, render_queue_9299) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, properties_9297), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null));
      };
    }(x9290_9300, properties_9297, listeners_9298, render_queue_9299);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function om$core$tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.tag_root_key = function om$core$tag_root_key(cursor, root_key) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
    var x9327 = cljs.core.clone.call(null, cursor);
    x9327.om$core$IRootKey$ = true;
    x9327.om$core$IRootKey$_root_key$arity$1 = function(x9327) {
      return function(this$) {
        var this$__$1 = this;
        return root_key;
      };
    }(x9327);
    x9327.om$core$IAdapt$ = true;
    x9327.om$core$IAdapt$_adapt$arity$2 = function(x9327) {
      return function(this$, other) {
        var this$__$1 = this;
        return om$core$tag_root_key.call(null, om.core.adapt.call(null, cursor, other), root_key);
      };
    }(x9327);
    x9327.cljs$core$ICloneable$ = true;
    x9327.cljs$core$ICloneable$_clone$arity$1 = function(x9327) {
      return function(this$) {
        var this$__$1 = this;
        return om$core$tag_root_key.call(null, cljs.core.clone.call(null, cursor), root_key);
      };
    }(x9327);
    return x9327;
  } else {
    return cursor;
  }
};
om.core.root = function om$core$root(f, value, p__9328) {
  var map__9391 = p__9328;
  var map__9391__$1 = cljs.core.seq_QMARK_.call(null, map__9391) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9391) : map__9391;
  var options = map__9391__$1;
  var raf = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var adapt = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "adapt", "adapt", -1817022327));
  var descriptor = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018));
  var instrument = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "instrument", "instrument", -960698844));
  var path = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var tx_listen = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367));
  var target = cljs.core.get.call(null, map__9391__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First argument must be a function"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__9453 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__9453, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__9453, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__9392 = value;
    if (G__9392) {
      var bit__4948__auto__ = G__9392.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4948__auto__ || G__9392.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__9392.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__9392);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__9392);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var adapt__$1 = function() {
    var or__4274__auto__ = adapt;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "adapt", "adapt", -1817022327), new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var ret = cljs.core.atom.call(null, null);
  var rootf = function(watch_key, state, state__$1, adapt__$1, m, ret, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function om$core$root_$_rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, om$core$root_$_rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = adapt__$1.call(null, om.core.tag_root_key.call(null, path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path), watch_key));
      if (cljs.core.truth_(om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643)))) {
      } else {
        var c_9454 = om.dom.render.call(null, function() {
          var _STAR_descriptor_STAR_9423 = om.core._STAR_descriptor_STAR_;
          var _STAR_instrument_STAR_9424 = om.core._STAR_instrument_STAR_;
          var _STAR_state_STAR_9425 = om.core._STAR_state_STAR_;
          var _STAR_root_key_STAR_9426 = om.core._STAR_root_key_STAR_;
          om.core._STAR_descriptor_STAR_ = descriptor;
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          om.core._STAR_root_key_STAR_ = watch_key;
          try {
            return om.core.build.call(null, f, cursor, m);
          } finally {
            om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_9426;
            om.core._STAR_state_STAR_ = _STAR_state_STAR_9425;
            om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_9424;
            om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_9423;
          }
        }(), target);
        if (cljs.core.deref.call(null, ret) == null) {
          cljs.core.reset_BANG_.call(null, ret, c_9454);
        } else {
        }
      }
      var queue_9455 = om.core._get_queue.call(null, state__$1);
      om.core._empty_queue_BANG_.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue_9455)) {
      } else {
        var seq__9427_9456 = cljs.core.seq.call(null, queue_9455);
        var chunk__9428_9457 = null;
        var count__9429_9458 = 0;
        var i__9430_9459 = 0;
        while (true) {
          if (i__9430_9459 < count__9429_9458) {
            var c_9460 = cljs.core._nth.call(null, chunk__9428_9457, i__9430_9459);
            if (cljs.core.truth_(c_9460.isMounted())) {
              var temp__4126__auto___9461 = c_9460.state["__om_next_cursor"];
              if (cljs.core.truth_(temp__4126__auto___9461)) {
                var next_props_9462 = temp__4126__auto___9461;
                c_9460.props["__om_cursor"] = next_props_9462;
                c_9460.state["__om_next_cursor"] = null;
              } else {
              }
              if (cljs.core.truth_(function() {
                var or__4274__auto__ = !function() {
                  var G__9432 = om.core.children.call(null, c_9460);
                  if (G__9432) {
                    var bit__4948__auto__ = null;
                    if (cljs.core.truth_(function() {
                      var or__4274__auto__ = bit__4948__auto__;
                      if (cljs.core.truth_(or__4274__auto__)) {
                        return or__4274__auto__;
                      } else {
                        return G__9432.om$core$ICheckState$;
                      }
                    }())) {
                      return true;
                    } else {
                      if (!G__9432.cljs$lang$protocol_mask$partition$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9432);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9432);
                  }
                }();
                if (or__4274__auto__) {
                  return or__4274__auto__;
                } else {
                  return c_9460.shouldComponentUpdate(c_9460.props, c_9460.state);
                }
              }())) {
                c_9460.forceUpdate();
              } else {
              }
            } else {
            }
            var G__9463 = seq__9427_9456;
            var G__9464 = chunk__9428_9457;
            var G__9465 = count__9429_9458;
            var G__9466 = i__9430_9459 + 1;
            seq__9427_9456 = G__9463;
            chunk__9428_9457 = G__9464;
            count__9429_9458 = G__9465;
            i__9430_9459 = G__9466;
            continue;
          } else {
            var temp__4126__auto___9467 = cljs.core.seq.call(null, seq__9427_9456);
            if (temp__4126__auto___9467) {
              var seq__9427_9468__$1 = temp__4126__auto___9467;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9427_9468__$1)) {
                var c__5059__auto___9469 = cljs.core.chunk_first.call(null, seq__9427_9468__$1);
                var G__9470 = cljs.core.chunk_rest.call(null, seq__9427_9468__$1);
                var G__9471 = c__5059__auto___9469;
                var G__9472 = cljs.core.count.call(null, c__5059__auto___9469);
                var G__9473 = 0;
                seq__9427_9456 = G__9470;
                chunk__9428_9457 = G__9471;
                count__9429_9458 = G__9472;
                i__9430_9459 = G__9473;
                continue;
              } else {
                var c_9474 = cljs.core.first.call(null, seq__9427_9468__$1);
                if (cljs.core.truth_(c_9474.isMounted())) {
                  var temp__4126__auto___9475__$1 = c_9474.state["__om_next_cursor"];
                  if (cljs.core.truth_(temp__4126__auto___9475__$1)) {
                    var next_props_9476 = temp__4126__auto___9475__$1;
                    c_9474.props["__om_cursor"] = next_props_9476;
                    c_9474.state["__om_next_cursor"] = null;
                  } else {
                  }
                  if (cljs.core.truth_(function() {
                    var or__4274__auto__ = !function() {
                      var G__9434 = om.core.children.call(null, c_9474);
                      if (G__9434) {
                        var bit__4948__auto__ = null;
                        if (cljs.core.truth_(function() {
                          var or__4274__auto__ = bit__4948__auto__;
                          if (cljs.core.truth_(or__4274__auto__)) {
                            return or__4274__auto__;
                          } else {
                            return G__9434.om$core$ICheckState$;
                          }
                        }())) {
                          return true;
                        } else {
                          if (!G__9434.cljs$lang$protocol_mask$partition$) {
                            return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9434);
                          } else {
                            return false;
                          }
                        }
                      } else {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__9434);
                      }
                    }();
                    if (or__4274__auto__) {
                      return or__4274__auto__;
                    } else {
                      return c_9474.shouldComponentUpdate(c_9474.props, c_9474.state);
                    }
                  }())) {
                    c_9474.forceUpdate();
                  } else {
                  }
                } else {
                }
                var G__9477 = cljs.core.next.call(null, seq__9427_9468__$1);
                var G__9478 = null;
                var G__9479 = 0;
                var G__9480 = 0;
                seq__9427_9456 = G__9477;
                chunk__9428_9457 = G__9478;
                count__9429_9458 = G__9479;
                i__9430_9459 = G__9480;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      var _refs_9481 = cljs.core.deref.call(null, om.core._refs);
      if (cljs.core.empty_QMARK_.call(null, _refs_9481)) {
      } else {
        var seq__9435_9482 = cljs.core.seq.call(null, _refs_9481);
        var chunk__9436_9483 = null;
        var count__9437_9484 = 0;
        var i__9438_9485 = 0;
        while (true) {
          if (i__9438_9485 < count__9437_9484) {
            var vec__9439_9486 = cljs.core._nth.call(null, chunk__9436_9483, i__9438_9485);
            var path_9487__$1 = cljs.core.nth.call(null, vec__9439_9486, 0, null);
            var cs_9488 = cljs.core.nth.call(null, vec__9439_9486, 1, null);
            var cs_9489__$1 = cljs.core.deref.call(null, cs_9488);
            var seq__9440_9490 = cljs.core.seq.call(null, cs_9489__$1);
            var chunk__9441_9491 = null;
            var count__9442_9492 = 0;
            var i__9443_9493 = 0;
            while (true) {
              if (i__9443_9493 < count__9442_9492) {
                var vec__9444_9494 = cljs.core._nth.call(null, chunk__9441_9491, i__9443_9493);
                var id_9495 = cljs.core.nth.call(null, vec__9444_9494, 0, null);
                var c_9496 = cljs.core.nth.call(null, vec__9444_9494, 1, null);
                if (cljs.core.truth_(c_9496.shouldComponentUpdate(c_9496.props, c_9496.state))) {
                  c_9496.forceUpdate();
                } else {
                }
                var G__9497 = seq__9440_9490;
                var G__9498 = chunk__9441_9491;
                var G__9499 = count__9442_9492;
                var G__9500 = i__9443_9493 + 1;
                seq__9440_9490 = G__9497;
                chunk__9441_9491 = G__9498;
                count__9442_9492 = G__9499;
                i__9443_9493 = G__9500;
                continue;
              } else {
                var temp__4126__auto___9501 = cljs.core.seq.call(null, seq__9440_9490);
                if (temp__4126__auto___9501) {
                  var seq__9440_9502__$1 = temp__4126__auto___9501;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__9440_9502__$1)) {
                    var c__5059__auto___9503 = cljs.core.chunk_first.call(null, seq__9440_9502__$1);
                    var G__9504 = cljs.core.chunk_rest.call(null, seq__9440_9502__$1);
                    var G__9505 = c__5059__auto___9503;
                    var G__9506 = cljs.core.count.call(null, c__5059__auto___9503);
                    var G__9507 = 0;
                    seq__9440_9490 = G__9504;
                    chunk__9441_9491 = G__9505;
                    count__9442_9492 = G__9506;
                    i__9443_9493 = G__9507;
                    continue;
                  } else {
                    var vec__9445_9508 = cljs.core.first.call(null, seq__9440_9502__$1);
                    var id_9509 = cljs.core.nth.call(null, vec__9445_9508, 0, null);
                    var c_9510 = cljs.core.nth.call(null, vec__9445_9508, 1, null);
                    if (cljs.core.truth_(c_9510.shouldComponentUpdate(c_9510.props, c_9510.state))) {
                      c_9510.forceUpdate();
                    } else {
                    }
                    var G__9511 = cljs.core.next.call(null, seq__9440_9502__$1);
                    var G__9512 = null;
                    var G__9513 = 0;
                    var G__9514 = 0;
                    seq__9440_9490 = G__9511;
                    chunk__9441_9491 = G__9512;
                    count__9442_9492 = G__9513;
                    i__9443_9493 = G__9514;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__9515 = seq__9435_9482;
            var G__9516 = chunk__9436_9483;
            var G__9517 = count__9437_9484;
            var G__9518 = i__9438_9485 + 1;
            seq__9435_9482 = G__9515;
            chunk__9436_9483 = G__9516;
            count__9437_9484 = G__9517;
            i__9438_9485 = G__9518;
            continue;
          } else {
            var temp__4126__auto___9519 = cljs.core.seq.call(null, seq__9435_9482);
            if (temp__4126__auto___9519) {
              var seq__9435_9520__$1 = temp__4126__auto___9519;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9435_9520__$1)) {
                var c__5059__auto___9521 = cljs.core.chunk_first.call(null, seq__9435_9520__$1);
                var G__9522 = cljs.core.chunk_rest.call(null, seq__9435_9520__$1);
                var G__9523 = c__5059__auto___9521;
                var G__9524 = cljs.core.count.call(null, c__5059__auto___9521);
                var G__9525 = 0;
                seq__9435_9482 = G__9522;
                chunk__9436_9483 = G__9523;
                count__9437_9484 = G__9524;
                i__9438_9485 = G__9525;
                continue;
              } else {
                var vec__9446_9526 = cljs.core.first.call(null, seq__9435_9520__$1);
                var path_9527__$1 = cljs.core.nth.call(null, vec__9446_9526, 0, null);
                var cs_9528 = cljs.core.nth.call(null, vec__9446_9526, 1, null);
                var cs_9529__$1 = cljs.core.deref.call(null, cs_9528);
                var seq__9447_9530 = cljs.core.seq.call(null, cs_9529__$1);
                var chunk__9448_9531 = null;
                var count__9449_9532 = 0;
                var i__9450_9533 = 0;
                while (true) {
                  if (i__9450_9533 < count__9449_9532) {
                    var vec__9451_9534 = cljs.core._nth.call(null, chunk__9448_9531, i__9450_9533);
                    var id_9535 = cljs.core.nth.call(null, vec__9451_9534, 0, null);
                    var c_9536 = cljs.core.nth.call(null, vec__9451_9534, 1, null);
                    if (cljs.core.truth_(c_9536.shouldComponentUpdate(c_9536.props, c_9536.state))) {
                      c_9536.forceUpdate();
                    } else {
                    }
                    var G__9537 = seq__9447_9530;
                    var G__9538 = chunk__9448_9531;
                    var G__9539 = count__9449_9532;
                    var G__9540 = i__9450_9533 + 1;
                    seq__9447_9530 = G__9537;
                    chunk__9448_9531 = G__9538;
                    count__9449_9532 = G__9539;
                    i__9450_9533 = G__9540;
                    continue;
                  } else {
                    var temp__4126__auto___9541__$1 = cljs.core.seq.call(null, seq__9447_9530);
                    if (temp__4126__auto___9541__$1) {
                      var seq__9447_9542__$1 = temp__4126__auto___9541__$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, seq__9447_9542__$1)) {
                        var c__5059__auto___9543 = cljs.core.chunk_first.call(null, seq__9447_9542__$1);
                        var G__9544 = cljs.core.chunk_rest.call(null, seq__9447_9542__$1);
                        var G__9545 = c__5059__auto___9543;
                        var G__9546 = cljs.core.count.call(null, c__5059__auto___9543);
                        var G__9547 = 0;
                        seq__9447_9530 = G__9544;
                        chunk__9448_9531 = G__9545;
                        count__9449_9532 = G__9546;
                        i__9450_9533 = G__9547;
                        continue;
                      } else {
                        var vec__9452_9548 = cljs.core.first.call(null, seq__9447_9542__$1);
                        var id_9549 = cljs.core.nth.call(null, vec__9452_9548, 0, null);
                        var c_9550 = cljs.core.nth.call(null, vec__9452_9548, 1, null);
                        if (cljs.core.truth_(c_9550.shouldComponentUpdate(c_9550.props, c_9550.state))) {
                          c_9550.forceUpdate();
                        } else {
                        }
                        var G__9551 = cljs.core.next.call(null, seq__9447_9542__$1);
                        var G__9552 = null;
                        var G__9553 = 0;
                        var G__9554 = 0;
                        seq__9447_9530 = G__9551;
                        chunk__9448_9531 = G__9552;
                        count__9449_9532 = G__9553;
                        i__9450_9533 = G__9554;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                var G__9555 = cljs.core.next.call(null, seq__9435_9520__$1);
                var G__9556 = null;
                var G__9557 = 0;
                var G__9558 = 0;
                seq__9435_9482 = G__9555;
                chunk__9436_9483 = G__9556;
                count__9437_9484 = G__9557;
                i__9438_9485 = G__9558;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), true);
      return cljs.core.deref.call(null, ret);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function(_, ___$1, o, n) {
      if (cljs.core.not.call(null, om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033))) && !(o === n)) {
        om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), false);
      } else {
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), false);
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (raf === false || !(typeof requestAnimationFrame !== "undefined")) {
          return setTimeout(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
            return function() {
              return om.core.render_all.call(null, state__$1);
            };
          }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target), 16);
        } else {
          if (cljs.core.fn_QMARK_.call(null, raf)) {
            return raf.call(null);
          } else {
            return requestAnimationFrame(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
              return function() {
                return om.core.render_all.call(null, state__$1);
              };
            }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
          }
        }
      }
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function() {
      om.core._remove_properties_BANG_.call(null, state__$1, watch_key);
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__9391, map__9391__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.detach_root = function om$core$detach_root(target) {
  if (cljs.core.truth_(goog.dom.isElement(target))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("gdom", "isElement", "gdom/isElement", 465934354, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null))))].join(""));
  }
  var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, om.core.roots), target);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    return f.call(null);
  } else {
    return null;
  }
};
om.core.transactable_QMARK_ = function om$core$transactable_QMARK_(x) {
  var G__9560 = x;
  if (G__9560) {
    var bit__4948__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = bit__4948__auto__;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return G__9560.om$core$ITransact$;
      }
    }())) {
      return true;
    } else {
      if (!G__9560.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__9560);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__9560);
  }
};
om.core.transact_BANG_ = function om$core$transact_BANG_() {
  var G__9562 = arguments.length;
  switch(G__9562) {
    case 2:
      return om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2 = function(cursor, f) {
  return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
};
om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$3 = function(cursor, korks, f) {
  return om.core.transact_BANG_.call(null, cursor, korks, f, null);
};
om.core.transact_BANG_.cljs$core$IFn$_invoke$arity$4 = function(cursor, korks, f, tag) {
  if (cljs.core.truth_(om.core.transactable_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "transactable?", "transactable?", 780536292, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
};
om.core.transact_BANG_.cljs$lang$maxFixedArity = 4;
om.core.update_BANG_ = function om$core$update_BANG_() {
  var G__9565 = arguments.length;
  switch(G__9565) {
    case 2:
      return om.core.update_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.update_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.core.update_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.update_BANG_.cljs$core$IFn$_invoke$arity$2 = function(cursor, v) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
    return v;
  }, null);
};
om.core.update_BANG_.cljs$core$IFn$_invoke$arity$3 = function(cursor, korks, v) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
    return v;
  }, null);
};
om.core.update_BANG_.cljs$core$IFn$_invoke$arity$4 = function(cursor, korks, v, tag) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
    return v;
  }, tag);
};
om.core.update_BANG_.cljs$lang$maxFixedArity = 4;
om.core.commit_BANG_ = function om$core$commit_BANG_(cursor, korks, f) {
  if (cljs.core.truth_(om.core.cursor_QMARK_.call(null, cursor))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var key = function() {
    var G__9568 = cursor;
    if (G__9568) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__9568.om$core$IRootKey$;
        }
      }())) {
        return true;
      } else {
        if (!G__9568.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__9568);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__9568);
    }
  }() ? om.core._root_key.call(null, cursor) : null;
  var app_state = om.core.state.call(null, cursor);
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var cpath = om.core.path.call(null, cursor);
  var rpath = cljs.core.into.call(null, cpath, korks__$1);
  if (cljs.core.truth_(key)) {
    om.core._set_property_BANG_.call(null, app_state, key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), true);
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, rpath)) {
    return cljs.core.swap_BANG_.call(null, app_state, f);
  } else {
    return cljs.core.swap_BANG_.call(null, app_state, cljs.core.update_in, rpath, f);
  }
};
om.core.get_node = function om$core$get_node() {
  var G__9570 = arguments.length;
  switch(G__9570) {
    case 1:
      return om.core.get_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_node.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_node.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  return owner.getDOMNode();
};
om.core.get_node.cljs$core$IFn$_invoke$arity$2 = function(owner, name) {
  if (typeof name === "string") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
  }
  var temp__4126__auto__ = owner.refs;
  if (cljs.core.truth_(temp__4126__auto__)) {
    var refs = temp__4126__auto__;
    return refs[name].getDOMNode();
  } else {
    return null;
  }
};
om.core.get_node.cljs$lang$maxFixedArity = 2;
om.core.mounted_QMARK_ = function om$core$mounted_QMARK_(owner) {
  return owner.isMounted();
};
om.core.set_state_BANG_ = function om$core$set_state_BANG_() {
  var G__9573 = arguments.length;
  switch(G__9573) {
    case 2:
      return om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._set_state_BANG_.call(null, owner, v, true);
};
om.core.set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._set_state_BANG_.call(null, owner, ks, v, true);
};
om.core.set_state_BANG_.cljs$lang$maxFixedArity = 3;
om.core.set_state_nr_BANG_ = function om$core$set_state_nr_BANG_() {
  var G__9576 = arguments.length;
  switch(G__9576) {
    case 2:
      return om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._set_state_BANG_.call(null, owner, v, false);
};
om.core.set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, v) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._set_state_BANG_.call(null, owner, ks, v, false);
};
om.core.set_state_nr_BANG_.cljs$lang$maxFixedArity = 3;
om.core.update_state_BANG_ = function om$core$update_state_BANG_() {
  var G__9579 = arguments.length;
  switch(G__9579) {
    case 2:
      return om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
};
om.core.update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
};
om.core.update_state_BANG_.cljs$lang$maxFixedArity = 3;
om.core.update_state_nr_BANG_ = function om$core$update_state_nr_BANG_() {
  var G__9582 = arguments.length;
  switch(G__9582) {
    case 2:
      return om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(owner, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_nr_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
};
om.core.update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(owner, korks, f) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  return om.core.set_state_nr_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
};
om.core.update_state_nr_BANG_.cljs$lang$maxFixedArity = 3;
om.core.refresh_BANG_ = function om$core$refresh_BANG_(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function om$core$get_render_state() {
  var G__9585 = arguments.length;
  switch(G__9585) {
    case 1:
      return om.core.get_render_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.core.get_render_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
om.core.get_render_state.cljs$core$IFn$_invoke$arity$1 = function(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core._get_render_state.call(null, owner);
};
om.core.get_render_state.cljs$core$IFn$_invoke$arity$2 = function(owner, korks) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  return om.core._get_render_state.call(null, owner, ks);
};
om.core.get_render_state.cljs$lang$maxFixedArity = 2;
goog.provide("hatti.shared");
goog.require("cljs.core");
goog.require("hatti.utils");
goog.require("hatti.ona.forms");
goog.require("sablono.core");
goog.require("om.core");
goog.require("cljs.core.async");
hatti.shared.event_chan = cljs.core.async.chan.call(null);
hatti.shared.event_multi_chan = cljs.core.async.mult.call(null, hatti.shared.event_chan);
hatti.shared.event_tap = function hatti$shared$event_tap() {
  return cljs.core.async.tap.call(null, hatti.shared.event_multi_chan, cljs.core.async.chan.call(null));
};
hatti.shared.external_event_chan = cljs.core.async.chan.call(null);
hatti.shared.external_event_multi_chan = cljs.core.async.mult.call(null, hatti.shared.external_event_chan);
hatti.shared.external_event_tap = function hatti$shared$external_event_tap() {
  return cljs.core.async.tap.call(null, hatti.shared.external_event_multi_chan, cljs.core.async.chan.call(null));
};
hatti.shared.default_fields = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "full-name", "full-name", 408178550), "_submission_time", new cljs.core.Keyword(null, "label", "label", 1718410804), "Submission Time", new cljs.core.Keyword(null, "name", "name", 1843675177), "_submission_time", new cljs.core.Keyword(null, "type", "type", 1174270348), "datetime"], null)], null);
hatti.shared.empty_app_state = function hatti$shared$empty_app_state() {
  return cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "map-page", "map-page", 108547100), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "data", "data", -232669377), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "submission-clicked", "submission-clicked", 1228953855), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", -232669377), null], null), new cljs.core.Keyword(null, 
  "geofield", "geofield", 578715548), cljs.core.PersistentArrayMap.EMPTY], null), new cljs.core.Keyword(null, "table-page", "table-page", 1974969102), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "data", "data", -232669377), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "submission-clicked", "submission-clicked", 1228953855), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "data", "data", -232669377), null], null)], null), new cljs.core.Keyword(null, 
  "chart-page", "chart-page", 14505465), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "visible-charts", "visible-charts", -1864927735), hatti.shared.default_fields, new cljs.core.Keyword(null, "chart-data", "chart-data", -1181877206), cljs.core.PersistentArrayMap.EMPTY], null), new cljs.core.Keyword(null, "dataset-info", "dataset-info", -1196999563), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "languages", "languages", 1471910331), new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "current", "current", -1088038603), null, new cljs.core.Keyword(null, "all", "all", 892129742), cljs.core.PersistentVector.EMPTY], null)], null));
};
hatti.shared.app_state = hatti.shared.empty_app_state.call(null);
hatti.shared.transact_BANG_ = function hatti$shared$transact_BANG_(app_state) {
  if (function() {
    var G__19248 = app_state;
    if (G__19248) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__19248.om$core$ITransact$;
        }
      }())) {
        return true;
      } else {
        if (!G__19248.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__19248);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__19248);
    }
  }()) {
    return om.core.transact_BANG_;
  } else {
    return cljs.core.swap_BANG_;
  }
};
hatti.shared.transact_app_state_BANG_ = function hatti$shared$transact_app_state_BANG_(app_state, ks, transact_fn) {
  return hatti.shared.transact_BANG_.call(null, app_state).call(null, app_state, function(p1__19249_SHARP_) {
    return cljs.core.update_in.call(null, p1__19249_SHARP_, ks, transact_fn);
  });
};
hatti.shared.transact_app_data_BANG_ = function hatti$shared$transact_app_data_BANG_(app_state, transact_fn) {
  hatti.shared.transact_app_state_BANG_.call(null, app_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "map-page", "map-page", 108547100), new cljs.core.Keyword(null, "data", "data", -232669377)], null), transact_fn);
  return hatti.shared.transact_app_state_BANG_.call(null, app_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table-page", "table-page", 1974969102), new cljs.core.Keyword(null, "data", "data", -232669377)], null), transact_fn);
};
hatti.shared.update_app_data_BANG_ = function hatti$shared$update_app_data_BANG_() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return hatti.shared.update_app_data_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
hatti.shared.update_app_data_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(app_state, data, p__19254) {
  var map__19255 = p__19254;
  var map__19255__$1 = cljs.core.seq_QMARK_.call(null, map__19255) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19255) : map__19255;
  var rerank_QMARK_ = cljs.core.get.call(null, map__19255__$1, new cljs.core.Keyword(null, "rerank?", "rerank?", -177233089));
  var data__$1 = cljs.core.truth_(function() {
    var and__4262__auto__ = rerank_QMARK_;
    if (cljs.core.truth_(and__4262__auto__)) {
      return cljs.core.seq.call(null, data);
    } else {
      return and__4262__auto__;
    }
  }()) ? cljs.core.vec.call(null, cljs.core.map_indexed.call(null, function(map__19255, map__19255__$1, rerank_QMARK_) {
    return function(i, v) {
      return cljs.core.assoc.call(null, v, "_rank", i + 1);
    };
  }(map__19255, map__19255__$1, rerank_QMARK_), cljs.core.sort_by.call(null, function(map__19255, map__19255__$1, rerank_QMARK_) {
    return function(p1__19250_SHARP_) {
      return cljs.core.get.call(null, p1__19250_SHARP_, "_submission_time");
    };
  }(map__19255, map__19255__$1, rerank_QMARK_), data))) : data;
  hatti.shared.transact_app_data_BANG_.call(null, app_state, function(data__$1, map__19255, map__19255__$1, rerank_QMARK_) {
    return function(_) {
      return data__$1;
    };
  }(data__$1, map__19255, map__19255__$1, rerank_QMARK_));
  return hatti.shared.transact_app_state_BANG_.call(null, app_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "dataset-info", "dataset-info", -1196999563), new cljs.core.Keyword(null, "num_of_submissions", "num_of_submissions", -1720943091)], null), function(data__$1, map__19255, map__19255__$1, rerank_QMARK_) {
    return function(_) {
      return cljs.core.count.call(null, data__$1);
    };
  }(data__$1, map__19255, map__19255__$1, rerank_QMARK_));
};
hatti.shared.update_app_data_BANG_.cljs$lang$maxFixedArity = 2;
hatti.shared.update_app_data_BANG_.cljs$lang$applyTo = function(seq19251) {
  var G__19252 = cljs.core.first.call(null, seq19251);
  var seq19251__$1 = cljs.core.next.call(null, seq19251);
  var G__19253 = cljs.core.first.call(null, seq19251__$1);
  var seq19251__$2 = cljs.core.next.call(null, seq19251__$1);
  return hatti.shared.update_app_data_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19252, G__19253, seq19251__$2);
};
hatti.shared.language_cursor = function hatti$shared$language_cursor() {
  return om.core.ref_cursor.call(null, (new cljs.core.Keyword(null, "languages", "languages", 1471910331)).cljs$core$IFn$_invoke$arity$1(om.core.root_cursor.call(null, hatti.shared.empty_app_state.call(null))));
};
hatti.shared.language_selector = function hatti$shared$language_selector(_, owner) {
  if (typeof hatti.shared.t19272 !== "undefined") {
  } else {
    hatti.shared.t19272 = function(owner, _, language_selector, meta19273) {
      this.owner = owner;
      this._ = _;
      this.language_selector = language_selector;
      this.meta19273 = meta19273;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    hatti.shared.t19272.prototype.om$core$IRender$ = true;
    hatti.shared.t19272.prototype.om$core$IRender$render$arity$1 = function(___$1) {
      var self__ = this;
      var ___$2 = this;
      var map__19275 = om.core.observe.call(null, self__.owner, hatti.shared.language_cursor.call(null));
      var map__19275__$1 = cljs.core.seq_QMARK_.call(null, map__19275) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19275) : map__19275;
      var ls = map__19275__$1;
      var all = cljs.core.get.call(null, map__19275__$1, new cljs.core.Keyword(null, "all", "all", 892129742));
      var current = cljs.core.get.call(null, map__19275__$1, new cljs.core.Keyword(null, "current", "current", -1088038603));
      var update_current = function(map__19275, map__19275__$1, ls, all, current, ___$2) {
        return function(p1__19256_SHARP_) {
          return om.core.update_BANG_.call(null, ls, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "current", "current", -1088038603)], null), p1__19256_SHARP_);
        };
      }(map__19275, map__19275__$1, ls, all, current, ___$2);
      var stringify = function(map__19275, map__19275__$1, ls, all, current, update_current, ___$2) {
        return function(p1__19257_SHARP_) {
          if (p1__19257_SHARP_ instanceof cljs.core.Keyword) {
            return cljs.core.name.call(null, p1__19257_SHARP_);
          } else {
            return[cljs.core.str(p1__19257_SHARP_)].join("");
          }
        };
      }(map__19275, map__19275__$1, ls, all, current, update_current, ___$2);
      return React.DOM.div({"className":"language-selector-inner"}, React.DOM.span({"className":"dropdown drop-hover"}, React.DOM.i({"className":"fa fa-globe", "style":{"marginRight":".2em"}}), React.DOM.span({"className":"t-underline"}, cljs.core.truth_(hatti.ona.forms.english_QMARK_.call(null, current)) ? "EN" : sablono.interpreter.interpret.call(null, stringify.call(null, current))), React.DOM.i({"className":"fa fa-angle-down", "style":{"marginLeft":".5em"}}), React.DOM.ul({"className":"submenu"}, 
      cljs.core.into_array.call(null, function() {
        var iter__5028__auto__ = function(map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2) {
          return function hatti$shared$language_selector_$_iter__19282(s__19283) {
            return new cljs.core.LazySeq(null, function(map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2) {
              return function() {
                var s__19283__$1 = s__19283;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__19283__$1);
                  if (temp__4126__auto__) {
                    var s__19283__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__19283__$2)) {
                      var c__5026__auto__ = cljs.core.chunk_first.call(null, s__19283__$2);
                      var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                      var b__19285 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                      if (function() {
                        var i__19284 = 0;
                        while (true) {
                          if (i__19284 < size__5027__auto__) {
                            var l = cljs.core._nth.call(null, c__5026__auto__, i__19284);
                            cljs.core.chunk_append.call(null, b__19285, React.DOM.li(null, React.DOM.a({"href":"#", "onClick":function(i__19284, l, c__5026__auto__, size__5027__auto__, b__19285, s__19283__$2, temp__4126__auto__, map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2) {
                              return function() {
                                return update_current.call(null, l);
                              };
                            }(i__19284, l, c__5026__auto__, size__5027__auto__, b__19285, s__19283__$2, temp__4126__auto__, map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2)}, sablono.interpreter.interpret.call(null, stringify.call(null, l)))));
                            var G__19286 = i__19284 + 1;
                            i__19284 = G__19286;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19285), hatti$shared$language_selector_$_iter__19282.call(null, cljs.core.chunk_rest.call(null, s__19283__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19285), null);
                      }
                    } else {
                      var l = cljs.core.first.call(null, s__19283__$2);
                      return cljs.core.cons.call(null, React.DOM.li(null, React.DOM.a({"href":"#", "onClick":function(l, s__19283__$2, temp__4126__auto__, map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2) {
                        return function() {
                          return update_current.call(null, l);
                        };
                      }(l, s__19283__$2, temp__4126__auto__, map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2)}, sablono.interpreter.interpret.call(null, stringify.call(null, l)))), hatti$shared$language_selector_$_iter__19282.call(null, cljs.core.rest.call(null, s__19283__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2), null, null);
          };
        }(map__19275, map__19275__$1, ls, all, current, update_current, stringify, ___$2);
        return iter__5028__auto__.call(null, all);
      }()))), React.DOM.div({"className":"divider"}));
    };
    hatti.shared.t19272.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19274) {
      var self__ = this;
      var _19274__$1 = this;
      return self__.meta19273;
    };
    hatti.shared.t19272.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19274, meta19273__$1) {
      var self__ = this;
      var _19274__$1 = this;
      return new hatti.shared.t19272(self__.owner, self__._, self__.language_selector, meta19273__$1);
    };
    hatti.shared.t19272.cljs$lang$type = true;
    hatti.shared.t19272.cljs$lang$ctorStr = "hatti.shared/t19272";
    hatti.shared.t19272.cljs$lang$ctorPrWriter = function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
      return cljs.core._write.call(null, writer__4854__auto__, "hatti.shared/t19272");
    };
    hatti.shared.__GT_t19272 = function hatti$shared$language_selector_$___GT_t19272(owner__$1, ___$1, language_selector__$1, meta19273) {
      return new hatti.shared.t19272(owner__$1, ___$1, language_selector__$1, meta19273);
    };
  }
  return new hatti.shared.t19272(owner, _, hatti$shared$language_selector, cljs.core.PersistentArrayMap.EMPTY);
};
goog.provide("hatti.ona.urls");
goog.require("cljs.core");
goog.require("hatti.utils");
hatti.ona.urls.base_uri = "http://ona.io/api/v1";
hatti.ona.urls.data_url = function hatti$ona$urls$data_url() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return hatti.ona.urls.data_url.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
hatti.ona.urls.data_url.cljs$core$IFn$_invoke$arity$variadic = function(endpoint, dataset_id, p__19243) {
  var map__19244 = p__19243;
  var map__19244__$1 = cljs.core.seq_QMARK_.call(null, map__19244) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19244) : map__19244;
  var format = cljs.core.get.call(null, map__19244__$1, new cljs.core.Keyword(null, "format", "format", -1306924766), "json");
  return hatti.utils.url.call(null, hatti.ona.urls.base_uri, endpoint, [cljs.core.str(dataset_id), cljs.core.str("."), cljs.core.str(format)].join(""));
};
hatti.ona.urls.data_url.cljs$lang$maxFixedArity = 2;
hatti.ona.urls.data_url.cljs$lang$applyTo = function(seq19240) {
  var G__19241 = cljs.core.first.call(null, seq19240);
  var seq19240__$1 = cljs.core.next.call(null, seq19240);
  var G__19242 = cljs.core.first.call(null, seq19240__$1);
  var seq19240__$2 = cljs.core.next.call(null, seq19240__$1);
  return hatti.ona.urls.data_url.cljs$core$IFn$_invoke$arity$variadic(G__19241, G__19242, seq19240__$2);
};
hatti.ona.urls.formjson_url = function hatti$ona$urls$formjson_url(dataset_id) {
  return hatti.utils.url.call(null, hatti.ona.urls.base_uri, "forms", dataset_id, "form.json");
};
hatti.ona.urls.chart_url = function hatti$ona$urls$chart_url(dataset_id, field_name) {
  return hatti.utils.url.call(null, hatti.ona.urls.base_uri, "charts", [cljs.core.str(dataset_id), cljs.core.str(".json?field_name\x3d"), cljs.core.str(field_name)].join(""));
};
hatti.ona.urls.media_url = function hatti$ona$urls$media_url(id, fname) {
  return hatti.utils.url.call(null, hatti.ona.urls.base_uri, "files", hatti.utils.format.call(null, "%s?filename\x3d%s", id, fname));
};
goog.provide("hatti.ona.post_process");
goog.require("cljs.core");
goog.require("hatti.shared");
goog.require("hatti.ona.urls");
goog.require("hatti.ona.forms");
goog.require("hatti.utils");
hatti.ona.post_process.ona_osm_link = function hatti$ona$post_process$ona_osm_link(data, form) {
  var osmfields = cljs.core.filter.call(null, hatti.ona.forms.osm_QMARK_, form);
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.flatten.call(null, function() {
    var iter__5028__auto__ = function(osmfields) {
      return function hatti$ona$post_process$ona_osm_link_$_iter__8928(s__8929) {
        return new cljs.core.LazySeq(null, function(osmfields) {
          return function() {
            var s__8929__$1 = s__8929;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__8929__$1);
              if (temp__4126__auto__) {
                var s__8929__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__8929__$2)) {
                  var c__5026__auto__ = cljs.core.chunk_first.call(null, s__8929__$2);
                  var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                  var b__8931 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                  if (function() {
                    var i__8930 = 0;
                    while (true) {
                      if (i__8930 < size__5027__auto__) {
                        var datum = cljs.core._nth.call(null, c__5026__auto__, i__8930);
                        cljs.core.chunk_append.call(null, b__8931, function() {
                          var iter__5028__auto__ = function(i__8930, datum, c__5026__auto__, size__5027__auto__, b__8931, s__8929__$2, temp__4126__auto__, osmfields) {
                            return function hatti$ona$post_process$ona_osm_link_$_iter__8928_$_iter__8940(s__8941) {
                              return new cljs.core.LazySeq(null, function(i__8930, datum, c__5026__auto__, size__5027__auto__, b__8931, s__8929__$2, temp__4126__auto__, osmfields) {
                                return function() {
                                  var s__8941__$1 = s__8941;
                                  while (true) {
                                    var temp__4126__auto____$1 = cljs.core.seq.call(null, s__8941__$1);
                                    if (temp__4126__auto____$1) {
                                      var s__8941__$2 = temp__4126__auto____$1;
                                      if (cljs.core.chunked_seq_QMARK_.call(null, s__8941__$2)) {
                                        var c__5026__auto____$1 = cljs.core.chunk_first.call(null, s__8941__$2);
                                        var size__5027__auto____$1 = cljs.core.count.call(null, c__5026__auto____$1);
                                        var b__8943 = cljs.core.chunk_buffer.call(null, size__5027__auto____$1);
                                        if (function() {
                                          var i__8942 = 0;
                                          while (true) {
                                            if (i__8942 < size__5027__auto____$1) {
                                              var field = cljs.core._nth.call(null, c__5026__auto____$1, i__8942);
                                              cljs.core.chunk_append.call(null, b__8943, function() {
                                                var osmkey = (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(field);
                                                var osmdatum = cljs.core.get.call(null, datum, osmkey);
                                                var osmid = function() {
                                                  var and__4262__auto__ = osmdatum;
                                                  if (cljs.core.truth_(and__4262__auto__)) {
                                                    return cljs.core.re_find.call(null, /[0-9]+/, osmdatum);
                                                  } else {
                                                    return and__4262__auto__;
                                                  }
                                                }();
                                                if (cljs.core.truth_(osmid)) {
                                                  return new cljs.core.PersistentArrayMap.fromArray([osmid, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "field", "field", -1302436500), field], null), cljs.core.select_keys.call(null, datum, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["_id", null, "_rank", null], null), null)))], true, false);
                                                } else {
                                                  return null;
                                                }
                                              }());
                                              var G__8948 = i__8942 + 1;
                                              i__8942 = G__8948;
                                              continue;
                                            } else {
                                              return true;
                                            }
                                            break;
                                          }
                                        }()) {
                                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8943), hatti$ona$post_process$ona_osm_link_$_iter__8928_$_iter__8940.call(null, cljs.core.chunk_rest.call(null, s__8941__$2)));
                                        } else {
                                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8943), null);
                                        }
                                      } else {
                                        var field = cljs.core.first.call(null, s__8941__$2);
                                        return cljs.core.cons.call(null, function() {
                                          var osmkey = (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(field);
                                          var osmdatum = cljs.core.get.call(null, datum, osmkey);
                                          var osmid = function() {
                                            var and__4262__auto__ = osmdatum;
                                            if (cljs.core.truth_(and__4262__auto__)) {
                                              return cljs.core.re_find.call(null, /[0-9]+/, osmdatum);
                                            } else {
                                              return and__4262__auto__;
                                            }
                                          }();
                                          if (cljs.core.truth_(osmid)) {
                                            return new cljs.core.PersistentArrayMap.fromArray([osmid, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "field", "field", -1302436500), field], null), cljs.core.select_keys.call(null, datum, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["_id", null, "_rank", null], null), null)))], true, false);
                                          } else {
                                            return null;
                                          }
                                        }(), hatti$ona$post_process$ona_osm_link_$_iter__8928_$_iter__8940.call(null, cljs.core.rest.call(null, s__8941__$2)));
                                      }
                                    } else {
                                      return null;
                                    }
                                    break;
                                  }
                                };
                              }(i__8930, datum, c__5026__auto__, size__5027__auto__, b__8931, s__8929__$2, temp__4126__auto__, osmfields), null, null);
                            };
                          }(i__8930, datum, c__5026__auto__, size__5027__auto__, b__8931, s__8929__$2, temp__4126__auto__, osmfields);
                          return iter__5028__auto__.call(null, osmfields);
                        }());
                        var G__8949 = i__8930 + 1;
                        i__8930 = G__8949;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8931), hatti$ona$post_process$ona_osm_link_$_iter__8928.call(null, cljs.core.chunk_rest.call(null, s__8929__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8931), null);
                  }
                } else {
                  var datum = cljs.core.first.call(null, s__8929__$2);
                  return cljs.core.cons.call(null, function() {
                    var iter__5028__auto__ = function(datum, s__8929__$2, temp__4126__auto__, osmfields) {
                      return function hatti$ona$post_process$ona_osm_link_$_iter__8928_$_iter__8944(s__8945) {
                        return new cljs.core.LazySeq(null, function(datum, s__8929__$2, temp__4126__auto__, osmfields) {
                          return function() {
                            var s__8945__$1 = s__8945;
                            while (true) {
                              var temp__4126__auto____$1 = cljs.core.seq.call(null, s__8945__$1);
                              if (temp__4126__auto____$1) {
                                var s__8945__$2 = temp__4126__auto____$1;
                                if (cljs.core.chunked_seq_QMARK_.call(null, s__8945__$2)) {
                                  var c__5026__auto__ = cljs.core.chunk_first.call(null, s__8945__$2);
                                  var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                                  var b__8947 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                                  if (function() {
                                    var i__8946 = 0;
                                    while (true) {
                                      if (i__8946 < size__5027__auto__) {
                                        var field = cljs.core._nth.call(null, c__5026__auto__, i__8946);
                                        cljs.core.chunk_append.call(null, b__8947, function() {
                                          var osmkey = (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(field);
                                          var osmdatum = cljs.core.get.call(null, datum, osmkey);
                                          var osmid = function() {
                                            var and__4262__auto__ = osmdatum;
                                            if (cljs.core.truth_(and__4262__auto__)) {
                                              return cljs.core.re_find.call(null, /[0-9]+/, osmdatum);
                                            } else {
                                              return and__4262__auto__;
                                            }
                                          }();
                                          if (cljs.core.truth_(osmid)) {
                                            return new cljs.core.PersistentArrayMap.fromArray([osmid, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "field", "field", -1302436500), field], null), cljs.core.select_keys.call(null, datum, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["_id", null, "_rank", null], null), null)))], true, false);
                                          } else {
                                            return null;
                                          }
                                        }());
                                        var G__8950 = i__8946 + 1;
                                        i__8946 = G__8950;
                                        continue;
                                      } else {
                                        return true;
                                      }
                                      break;
                                    }
                                  }()) {
                                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8947), hatti$ona$post_process$ona_osm_link_$_iter__8928_$_iter__8944.call(null, cljs.core.chunk_rest.call(null, s__8945__$2)));
                                  } else {
                                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8947), null);
                                  }
                                } else {
                                  var field = cljs.core.first.call(null, s__8945__$2);
                                  return cljs.core.cons.call(null, function() {
                                    var osmkey = (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(field);
                                    var osmdatum = cljs.core.get.call(null, datum, osmkey);
                                    var osmid = function() {
                                      var and__4262__auto__ = osmdatum;
                                      if (cljs.core.truth_(and__4262__auto__)) {
                                        return cljs.core.re_find.call(null, /[0-9]+/, osmdatum);
                                      } else {
                                        return and__4262__auto__;
                                      }
                                    }();
                                    if (cljs.core.truth_(osmid)) {
                                      return new cljs.core.PersistentArrayMap.fromArray([osmid, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "field", "field", -1302436500), field], null), cljs.core.select_keys.call(null, datum, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["_id", null, "_rank", null], null), null)))], true, false);
                                    } else {
                                      return null;
                                    }
                                  }(), hatti$ona$post_process$ona_osm_link_$_iter__8928_$_iter__8944.call(null, cljs.core.rest.call(null, s__8945__$2)));
                                }
                              } else {
                                return null;
                              }
                              break;
                            }
                          };
                        }(datum, s__8929__$2, temp__4126__auto__, osmfields), null, null);
                      };
                    }(datum, s__8929__$2, temp__4126__auto__, osmfields);
                    return iter__5028__auto__.call(null, osmfields);
                  }(), hatti$ona$post_process$ona_osm_link_$_iter__8928.call(null, cljs.core.rest.call(null, s__8929__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(osmfields), null, null);
      };
    }(osmfields);
    return iter__5028__auto__.call(null, data);
  }()));
};
hatti.ona.post_process.osm_xml__GT_geojson = function hatti$ona$post_process$osm_xml__GT_geojson(osm_xml_string) {
  return cljs.core.js__GT_clj.call(null, osmtogeojson(jQuery.parseXML(osm_xml_string)), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
hatti.ona.post_process.osm_id__GT_osm_data = function hatti$ona$post_process$osm_id__GT_osm_data(data, form, osm_xml) {
  var ona_osm_link = hatti.ona.post_process.ona_osm_link.call(null, data, form);
  var osmgeo = hatti.ona.post_process.osm_xml__GT_geojson.call(null, osm_xml);
  var featureset = osmgeo.call(null, new cljs.core.Keyword(null, "features", "features", -1146962336));
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__5028__auto__ = function(ona_osm_link, osmgeo, featureset) {
      return function hatti$ona$post_process$osm_id__GT_osm_data_$_iter__8963(s__8964) {
        return new cljs.core.LazySeq(null, function(ona_osm_link, osmgeo, featureset) {
          return function() {
            var s__8964__$1 = s__8964;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__8964__$1);
              if (temp__4126__auto__) {
                var s__8964__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__8964__$2)) {
                  var c__5026__auto__ = cljs.core.chunk_first.call(null, s__8964__$2);
                  var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                  var b__8966 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                  if (function() {
                    var i__8965 = 0;
                    while (true) {
                      if (i__8965 < size__5027__auto__) {
                        var map__8971 = cljs.core._nth.call(null, c__5026__auto__, i__8965);
                        var map__8971__$1 = cljs.core.seq_QMARK_.call(null, map__8971) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8971) : map__8971;
                        var feature = map__8971__$1;
                        var geometry = cljs.core.get.call(null, map__8971__$1, new cljs.core.Keyword(null, "geometry", "geometry", -405034994));
                        var properties = cljs.core.get.call(null, map__8971__$1, new cljs.core.Keyword(null, "properties", "properties", 685819552));
                        var type = cljs.core.get.call(null, map__8971__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
                        cljs.core.chunk_append.call(null, b__8966, function() {
                          var map__8972 = properties;
                          var map__8972__$1 = cljs.core.seq_QMARK_.call(null, map__8972) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8972) : map__8972;
                          var tags = cljs.core.get.call(null, map__8972__$1, new cljs.core.Keyword(null, "tags", "tags", 1771418977));
                          var id = cljs.core.get.call(null, map__8972__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
                          var type__$1 = cljs.core.get.call(null, map__8972__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
                          return new cljs.core.PersistentArrayMap.fromArray([id, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "osm-id", "osm-id", -1125866420), id, new cljs.core.Keyword(null, "type", "type", 1174270348), type__$1, new cljs.core.Keyword(null, "geom", "geom", 1207084371), geometry, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(tags), new cljs.core.Keyword(null, 
                          "tags", "tags", 1771418977), tags], null)], true, false);
                        }());
                        var G__8975 = i__8965 + 1;
                        i__8965 = G__8975;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8966), hatti$ona$post_process$osm_id__GT_osm_data_$_iter__8963.call(null, cljs.core.chunk_rest.call(null, s__8964__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8966), null);
                  }
                } else {
                  var map__8973 = cljs.core.first.call(null, s__8964__$2);
                  var map__8973__$1 = cljs.core.seq_QMARK_.call(null, map__8973) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8973) : map__8973;
                  var feature = map__8973__$1;
                  var geometry = cljs.core.get.call(null, map__8973__$1, new cljs.core.Keyword(null, "geometry", "geometry", -405034994));
                  var properties = cljs.core.get.call(null, map__8973__$1, new cljs.core.Keyword(null, "properties", "properties", 685819552));
                  var type = cljs.core.get.call(null, map__8973__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
                  return cljs.core.cons.call(null, function() {
                    var map__8974 = properties;
                    var map__8974__$1 = cljs.core.seq_QMARK_.call(null, map__8974) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8974) : map__8974;
                    var tags = cljs.core.get.call(null, map__8974__$1, new cljs.core.Keyword(null, "tags", "tags", 1771418977));
                    var id = cljs.core.get.call(null, map__8974__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
                    var type__$1 = cljs.core.get.call(null, map__8974__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
                    return new cljs.core.PersistentArrayMap.fromArray([id, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "osm-id", "osm-id", -1125866420), id, new cljs.core.Keyword(null, "type", "type", 1174270348), type__$1, new cljs.core.Keyword(null, "geom", "geom", 1207084371), geometry, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(tags), new cljs.core.Keyword(null, "tags", 
                    "tags", 1771418977), tags], null)], true, false);
                  }(), hatti$ona$post_process$osm_id__GT_osm_data_$_iter__8963.call(null, cljs.core.rest.call(null, s__8964__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(ona_osm_link, osmgeo, featureset), null, null);
      };
    }(ona_osm_link, osmgeo, featureset);
    return iter__5028__auto__.call(null, featureset);
  }());
};
hatti.ona.post_process.integrate_osm_data_BANG_ = function hatti$ona$post_process$integrate_osm_data_BANG_(app_state, form, osm_xml) {
  var osm_fields = cljs.core.filter.call(null, hatti.ona.forms.osm_QMARK_, form);
  if (cljs.core.empty_QMARK_.call(null, osm_fields)) {
    return null;
  } else {
    var data = cljs.core.get_in.call(null, app_state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "map-page", "map-page", 108547100), new cljs.core.Keyword(null, "data", "data", -232669377)], null));
    var osm_id__GT_osm_data = hatti.ona.post_process.osm_id__GT_osm_data.call(null, data, form, osm_xml);
    var osm_val__GT_osm_id = function(data, osm_id__GT_osm_data, osm_fields) {
      return function(p1__8976_SHARP_) {
        return cljs.core.re_find.call(null, /[0-9]+/, p1__8976_SHARP_);
      };
    }(data, osm_id__GT_osm_data, osm_fields);
    var osm_val__GT_osm_data = function(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_fields) {
      return function(osm_val) {
        if (cljs.core.truth_(osm_val)) {
          return osm_id__GT_osm_data.call(null, osm_val__GT_osm_id.call(null, osm_val));
        } else {
          return null;
        }
      };
    }(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_fields);
    var updater = function(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields) {
      return function(osm_key) {
        return function(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields) {
          return function(data__$1) {
            var iter__5028__auto__ = function(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields) {
              return function hatti$ona$post_process$integrate_osm_data_BANG__$_iter__8985(s__8986) {
                return new cljs.core.LazySeq(null, function(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields) {
                  return function() {
                    var s__8986__$1 = s__8986;
                    while (true) {
                      var temp__4126__auto__ = cljs.core.seq.call(null, s__8986__$1);
                      if (temp__4126__auto__) {
                        var s__8986__$2 = temp__4126__auto__;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__8986__$2)) {
                          var c__5026__auto__ = cljs.core.chunk_first.call(null, s__8986__$2);
                          var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                          var b__8988 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                          if (function() {
                            var i__8987 = 0;
                            while (true) {
                              if (i__8987 < size__5027__auto__) {
                                var datum = cljs.core._nth.call(null, c__5026__auto__, i__8987);
                                cljs.core.chunk_append.call(null, b__8988, cljs.core.update_in.call(null, datum, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [osm_key], null), osm_val__GT_osm_data));
                                var G__8993 = i__8987 + 1;
                                i__8987 = G__8993;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8988), hatti$ona$post_process$integrate_osm_data_BANG__$_iter__8985.call(null, cljs.core.chunk_rest.call(null, s__8986__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8988), null);
                          }
                        } else {
                          var datum = cljs.core.first.call(null, s__8986__$2);
                          return cljs.core.cons.call(null, cljs.core.update_in.call(null, datum, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [osm_key], null), osm_val__GT_osm_data), hatti$ona$post_process$integrate_osm_data_BANG__$_iter__8985.call(null, cljs.core.rest.call(null, s__8986__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields), null, null);
              };
            }(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields);
            return iter__5028__auto__.call(null, data__$1);
          };
        }(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields);
      };
    }(data, osm_id__GT_osm_data, osm_val__GT_osm_id, osm_val__GT_osm_data, osm_fields);
    var seq__8989 = cljs.core.seq.call(null, osm_fields);
    var chunk__8990 = null;
    var count__8991 = 0;
    var i__8992 = 0;
    while (true) {
      if (i__8992 < count__8991) {
        var osm_field = cljs.core._nth.call(null, chunk__8990, i__8992);
        hatti.shared.transact_app_data_BANG_.call(null, app_state, updater.call(null, (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(osm_field)));
        var G__8994 = seq__8989;
        var G__8995 = chunk__8990;
        var G__8996 = count__8991;
        var G__8997 = i__8992 + 1;
        seq__8989 = G__8994;
        chunk__8990 = G__8995;
        count__8991 = G__8996;
        i__8992 = G__8997;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__8989);
        if (temp__4126__auto__) {
          var seq__8989__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8989__$1)) {
            var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__8989__$1);
            var G__8998 = cljs.core.chunk_rest.call(null, seq__8989__$1);
            var G__8999 = c__5059__auto__;
            var G__9000 = cljs.core.count.call(null, c__5059__auto__);
            var G__9001 = 0;
            seq__8989 = G__8998;
            chunk__8990 = G__8999;
            count__8991 = G__9000;
            i__8992 = G__9001;
            continue;
          } else {
            var osm_field = cljs.core.first.call(null, seq__8989__$1);
            hatti.shared.transact_app_data_BANG_.call(null, app_state, updater.call(null, (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(osm_field)));
            var G__9002 = cljs.core.next.call(null, seq__8989__$1);
            var G__9003 = null;
            var G__9004 = 0;
            var G__9005 = 0;
            seq__8989 = G__9002;
            chunk__8990 = G__9003;
            count__8991 = G__9004;
            i__8992 = G__9005;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }
};
hatti.ona.post_process.url_obj = function hatti$ona$post_process$url_obj(media_obj) {
  var media_id = cljs.core.get.call(null, media_obj, "id");
  var fname = cljs.core.get.call(null, media_obj, "filename");
  var file_url = hatti.ona.urls.media_url.call(null, media_id, fname);
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "filename", "filename", -1428840783), fname, new cljs.core.Keyword(null, "download_url", "download_url", -2115471203), file_url, new cljs.core.Keyword(null, "small_download_url", "small_download_url", 1654303565), [cljs.core.str(file_url), cljs.core.str("\x26suffix\x3dsmall")].join("")], null);
};
hatti.ona.post_process.get_attach_map = function hatti$ona$post_process$get_attach_map(record, attachments) {
  var attachments__$1 = function() {
    var or__4274__auto__ = attachments;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.get.call(null, record, "_attachments");
    }
  }();
  var fnames = cljs.core.map.call(null, function(attachments__$1) {
    return function(p1__9006_SHARP_) {
      return hatti.utils.last_url_param.call(null, cljs.core.get.call(null, p1__9006_SHARP_, "filename"));
    };
  }(attachments__$1), attachments__$1);
  return cljs.core.zipmap.call(null, fnames, cljs.core.map.call(null, hatti.ona.post_process.url_obj, attachments__$1));
};
hatti.ona.post_process.integrate_attachments = function hatti$ona$post_process$integrate_attachments() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return hatti.ona.post_process.integrate_attachments.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
hatti.ona.post_process.integrate_attachments.cljs$core$IFn$_invoke$arity$variadic = function(flat_form, data, p__9010) {
  var map__9011 = p__9010;
  var map__9011__$1 = cljs.core.seq_QMARK_.call(null, map__9011) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9011) : map__9011;
  var attachments = cljs.core.get.call(null, map__9011__$1, new cljs.core.Keyword(null, "attachments", "attachments", -1535547830));
  var image_fields = cljs.core.filter.call(null, hatti.ona.forms.image_QMARK_, flat_form);
  var iter__5028__auto__ = function(image_fields, map__9011, map__9011__$1, attachments) {
    return function hatti$ona$post_process$iter__9012(s__9013) {
      return new cljs.core.LazySeq(null, function(image_fields, map__9011, map__9011__$1, attachments) {
        return function() {
          var s__9013__$1 = s__9013;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__9013__$1);
            if (temp__4126__auto__) {
              var s__9013__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__9013__$2)) {
                var c__5026__auto__ = cljs.core.chunk_first.call(null, s__9013__$2);
                var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                var b__9015 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                if (function() {
                  var i__9014 = 0;
                  while (true) {
                    if (i__9014 < size__5027__auto__) {
                      var record = cljs.core._nth.call(null, c__5026__auto__, i__9014);
                      cljs.core.chunk_append.call(null, b__9015, function() {
                        var attach_map = hatti.ona.post_process.get_attach_map.call(null, record, attachments);
                        return cljs.core.reduce.call(null, function(i__9014, attach_map, record, c__5026__auto__, size__5027__auto__, b__9015, s__9013__$2, temp__4126__auto__, image_fields, map__9011, map__9011__$1, attachments) {
                          return function(record__$1, img_field) {
                            return cljs.core.update_in.call(null, record__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(img_field)], null), attach_map);
                          };
                        }(i__9014, attach_map, record, c__5026__auto__, size__5027__auto__, b__9015, s__9013__$2, temp__4126__auto__, image_fields, map__9011, map__9011__$1, attachments), record, image_fields);
                      }());
                      var G__9016 = i__9014 + 1;
                      i__9014 = G__9016;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9015), hatti$ona$post_process$iter__9012.call(null, cljs.core.chunk_rest.call(null, s__9013__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9015), null);
                }
              } else {
                var record = cljs.core.first.call(null, s__9013__$2);
                return cljs.core.cons.call(null, function() {
                  var attach_map = hatti.ona.post_process.get_attach_map.call(null, record, attachments);
                  return cljs.core.reduce.call(null, function(attach_map, record, s__9013__$2, temp__4126__auto__, image_fields, map__9011, map__9011__$1, attachments) {
                    return function(record__$1, img_field) {
                      return cljs.core.update_in.call(null, record__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(img_field)], null), attach_map);
                    };
                  }(attach_map, record, s__9013__$2, temp__4126__auto__, image_fields, map__9011, map__9011__$1, attachments), record, image_fields);
                }(), hatti$ona$post_process$iter__9012.call(null, cljs.core.rest.call(null, s__9013__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(image_fields, map__9011, map__9011__$1, attachments), null, null);
    };
  }(image_fields, map__9011, map__9011__$1, attachments);
  return iter__5028__auto__.call(null, data);
};
hatti.ona.post_process.integrate_attachments.cljs$lang$maxFixedArity = 2;
hatti.ona.post_process.integrate_attachments.cljs$lang$applyTo = function(seq9007) {
  var G__9008 = cljs.core.first.call(null, seq9007);
  var seq9007__$1 = cljs.core.next.call(null, seq9007);
  var G__9009 = cljs.core.first.call(null, seq9007__$1);
  var seq9007__$2 = cljs.core.next.call(null, seq9007__$1);
  return hatti.ona.post_process.integrate_attachments.cljs$core$IFn$_invoke$arity$variadic(G__9008, G__9009, seq9007__$2);
};
hatti.ona.post_process.integrate_attachments_in_repeats = function hatti$ona$post_process$integrate_attachments_in_repeats(flat_form, data) {
  var repeat_fields = cljs.core.filter.call(null, hatti.ona.forms.repeat_QMARK_, flat_form);
  var integrate = function(repeat_fields) {
    return function(record, rpt_field) {
      var key = (new cljs.core.Keyword(null, "full-name", "full-name", 408178550)).cljs$core$IFn$_invoke$arity$1(rpt_field);
      return cljs.core.assoc.call(null, record, key, hatti.ona.post_process.integrate_attachments.call(null, (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(rpt_field), cljs.core.get.call(null, record, key), new cljs.core.Keyword(null, "attachments", "attachments", -1535547830), cljs.core.get.call(null, record, "_attachments")));
    };
  }(repeat_fields);
  var iter__5028__auto__ = function(repeat_fields, integrate) {
    return function hatti$ona$post_process$integrate_attachments_in_repeats_$_iter__9021(s__9022) {
      return new cljs.core.LazySeq(null, function(repeat_fields, integrate) {
        return function() {
          var s__9022__$1 = s__9022;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__9022__$1);
            if (temp__4126__auto__) {
              var s__9022__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__9022__$2)) {
                var c__5026__auto__ = cljs.core.chunk_first.call(null, s__9022__$2);
                var size__5027__auto__ = cljs.core.count.call(null, c__5026__auto__);
                var b__9024 = cljs.core.chunk_buffer.call(null, size__5027__auto__);
                if (function() {
                  var i__9023 = 0;
                  while (true) {
                    if (i__9023 < size__5027__auto__) {
                      var record = cljs.core._nth.call(null, c__5026__auto__, i__9023);
                      cljs.core.chunk_append.call(null, b__9024, cljs.core.reduce.call(null, integrate, record, repeat_fields));
                      var G__9025 = i__9023 + 1;
                      i__9023 = G__9025;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9024), hatti$ona$post_process$integrate_attachments_in_repeats_$_iter__9021.call(null, cljs.core.chunk_rest.call(null, s__9022__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9024), null);
                }
              } else {
                var record = cljs.core.first.call(null, s__9022__$2);
                return cljs.core.cons.call(null, cljs.core.reduce.call(null, integrate, record, repeat_fields), hatti$ona$post_process$integrate_attachments_in_repeats_$_iter__9021.call(null, cljs.core.rest.call(null, s__9022__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(repeat_fields, integrate), null, null);
    };
  }(repeat_fields, integrate);
  return iter__5028__auto__.call(null, data);
};
hatti.ona.post_process.integrate_attachments_BANG_ = function hatti$ona$post_process$integrate_attachments_BANG_(app_state, flat_form) {
  return hatti.shared.transact_app_data_BANG_.call(null, app_state, function(p1__9026_SHARP_) {
    return hatti.ona.post_process.integrate_attachments_in_repeats.call(null, flat_form, hatti.ona.post_process.integrate_attachments.call(null, flat_form, p1__9026_SHARP_));
  });
};
goog.provide("hatti.views");
goog.require("cljs.core");
goog.require("om.core");
hatti.views.view_type_dispatcher = function() {
  var hatti$views$view_type_dispatcher__delegate = function(_, owner, args) {
    return om.core.get_shared.call(null, owner, new cljs.core.Keyword(null, "view-type", "view-type", -1848894559));
  };
  var hatti$views$view_type_dispatcher = function(_, owner, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__8570__i = 0, G__8570__a = new Array(arguments.length - 2);
      while (G__8570__i < G__8570__a.length) {
        G__8570__a[G__8570__i] = arguments[G__8570__i + 2];
        ++G__8570__i;
      }
      args = new cljs.core.IndexedSeq(G__8570__a, 0);
    }
    return hatti$views$view_type_dispatcher__delegate.call(this, _, owner, args);
  };
  hatti$views$view_type_dispatcher.cljs$lang$maxFixedArity = 2;
  hatti$views$view_type_dispatcher.cljs$lang$applyTo = function(arglist__8571) {
    var _ = cljs.core.first(arglist__8571);
    arglist__8571 = cljs.core.next(arglist__8571);
    var owner = cljs.core.first(arglist__8571);
    var args = cljs.core.rest(arglist__8571);
    return hatti$views$view_type_dispatcher__delegate(_, owner, args);
  };
  hatti$views$view_type_dispatcher.cljs$core$IFn$_invoke$arity$variadic = hatti$views$view_type_dispatcher__delegate;
  return hatti$views$view_type_dispatcher;
}();
if (typeof hatti.views.tabbed_dataview !== "undefined") {
} else {
  hatti.views.tabbed_dataview = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "tabbed-dataview"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.dataview_infobar !== "undefined") {
} else {
  hatti.views.dataview_infobar = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "dataview-infobar"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.dataview_actions !== "undefined") {
} else {
  hatti.views.dataview_actions = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "dataview-actions"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_page !== "undefined") {
} else {
  hatti.views.map_page = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-page"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_geofield_chooser !== "undefined") {
} else {
  hatti.views.map_geofield_chooser = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-geofield-chooser"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_and_markers !== "undefined") {
} else {
  hatti.views.map_and_markers = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-and-markers"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_record_legend !== "undefined") {
} else {
  hatti.views.map_record_legend = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-record-legend"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_viewby_legend !== "undefined") {
} else {
  hatti.views.map_viewby_legend = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-viewby-legend"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_viewby_answer_legend !== "undefined") {
} else {
  hatti.views.map_viewby_answer_legend = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-viewby-answer-legend"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.map_viewby_menu !== "undefined") {
} else {
  hatti.views.map_viewby_menu = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "map-viewby-menu"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.table_page !== "undefined") {
} else {
  hatti.views.table_page = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "table-page"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.table_header !== "undefined") {
} else {
  hatti.views.table_header = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "table-header"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.table_search !== "undefined") {
} else {
  hatti.views.table_search = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "table-search"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.label_changer !== "undefined") {
} else {
  hatti.views.label_changer = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "label-changer"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.chart_page !== "undefined") {
} else {
  hatti.views.chart_page = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "chart-page"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.chart_chooser !== "undefined") {
} else {
  hatti.views.chart_chooser = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "chart-chooser"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.single_chart !== "undefined") {
} else {
  hatti.views.single_chart = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "single-chart"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.list_of_charts !== "undefined") {
} else {
  hatti.views.list_of_charts = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "list-of-charts"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.submission_view !== "undefined") {
} else {
  hatti.views.submission_view = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "submission-view"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.print_xls_report_btn !== "undefined") {
} else {
  hatti.views.print_xls_report_btn = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "print-xls-report-btn"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.repeat_view !== "undefined") {
} else {
  hatti.views.repeat_view = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "repeat-view"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.edit_delete !== "undefined") {
} else {
  hatti.views.edit_delete = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "edit-delete"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.details_page !== "undefined") {
} else {
  hatti.views.details_page = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "details-page"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
if (typeof hatti.views.form_details !== "undefined") {
} else {
  hatti.views.form_details = function() {
    var method_table__5169__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__5170__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__5171__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__5172__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__5173__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "hatti.views", "form-details"), hatti.views.view_type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__5173__auto__, method_table__5169__auto__, prefer_table__5170__auto__, method_cache__5171__auto__, cached_hierarchy__5172__auto__);
  }();
}
;goog.provide("milia.utils.url");
goog.require("cljs.core");
goog.require("clojure.string");
milia.utils.url.last_url_param = function milia$utils$url$last_url_param(url) {
  var last_param = cljs.core.last.call(null, clojure.string.split.call(null, [cljs.core.str(url)].join(""), /\//));
  return cljs.core.first.call(null, clojure.string.split.call(null, [cljs.core.str(last_param)].join(""), /.json/));
};
milia.utils.url.url = function milia$utils$url$url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return milia.utils.url.url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
milia.utils.url.url.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return[cljs.core.str("/"), cljs.core.str(clojure.string.join.call(null, "/", args))].join("");
};
milia.utils.url.url.cljs$lang$maxFixedArity = 0;
milia.utils.url.url.cljs$lang$applyTo = function(seq10949) {
  return milia.utils.url.url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10949));
};
goog.provide("milia.utils.remote");
goog.require("cljs.core");
goog.require("milia.utils.url");
goog.require("clojure.string");
milia.utils.remote.hosts = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "ui", "ui", -469653645), "beta.ona.io", new cljs.core.Keyword(null, "data", "data", -232669377), "stage.ona.io", new cljs.core.Keyword(null, "j2x", "j2x", 2112415912), "j2x.ona.io", new cljs.core.Keyword(null, "ona-api-server-protocol", "ona-api-server-protocol", 1305279248), "https"], null));
milia.utils.remote.protocol_prefixed = function milia$utils$remote$protocol_prefixed(resources) {
  return clojure.string.join.call(null, cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "ona-api-server-protocol", "ona-api-server-protocol", 1305279248)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, milia.utils.remote.hosts)), "://", resources], null)));
};
milia.utils.remote.thumbor_server = "https://images.ona.io";
milia.utils.remote.url_join = function milia$utils$remote$url_join(host, args) {
  return clojure.string.join.call(null, cljs.core.conj.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [host], null), cljs.core.apply.call(null, milia.utils.url.url, args)));
};
milia.utils.remote.make_url = function milia$utils$remote$make_url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return milia.utils.remote.make_url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
milia.utils.remote.make_url.cljs$core$IFn$_invoke$arity$variadic = function(postfix) {
  return milia.utils.remote.url_join.call(null, [cljs.core.str(milia.utils.remote.protocol_prefixed.call(null, (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, milia.utils.remote.hosts)))), cljs.core.str("/api/v1")].join(""), postfix);
};
milia.utils.remote.make_url.cljs$lang$maxFixedArity = 0;
milia.utils.remote.make_url.cljs$lang$applyTo = function(seq10944) {
  return milia.utils.remote.make_url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10944));
};
milia.utils.remote.make_zebra_url = function milia$utils$remote$make_zebra_url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return milia.utils.remote.make_zebra_url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
milia.utils.remote.make_zebra_url.cljs$core$IFn$_invoke$arity$variadic = function(postfix) {
  return milia.utils.remote.url_join.call(null, milia.utils.remote.protocol_prefixed.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "ui", "ui", -469653645)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, milia.utils.remote.hosts)), "/"], null)), postfix);
};
milia.utils.remote.make_zebra_url.cljs$lang$maxFixedArity = 0;
milia.utils.remote.make_zebra_url.cljs$lang$applyTo = function(seq10945) {
  return milia.utils.remote.make_zebra_url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10945));
};
milia.utils.remote.make_j2x_url = function milia$utils$remote$make_j2x_url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return milia.utils.remote.make_j2x_url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
milia.utils.remote.make_j2x_url.cljs$core$IFn$_invoke$arity$variadic = function(postfix) {
  return milia.utils.remote.url_join.call(null, milia.utils.remote.protocol_prefixed.call(null, (new cljs.core.Keyword(null, "j2x", "j2x", 2112415912)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, milia.utils.remote.hosts))), postfix);
};
milia.utils.remote.make_j2x_url.cljs$lang$maxFixedArity = 0;
milia.utils.remote.make_j2x_url.cljs$lang$applyTo = function(seq10946) {
  return milia.utils.remote.make_j2x_url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10946));
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("cljs_http.util");
goog.require("cljs.core");
goog.require("no.en.core");
goog.require("goog.userAgent");
goog.require("cognitect.transit");
goog.require("clojure.string");
goog.require("goog.Uri");
cljs_http.util.basic_auth = function cljs_http$util$basic_auth(credentials) {
  if (cljs.core.truth_(credentials)) {
    var vec__8583 = cljs.core.map_QMARK_.call(null, credentials) ? cljs.core.map.call(null, credentials, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "password", "password", 417022471)], null)) : credentials;
    var username = cljs.core.nth.call(null, vec__8583, 0, null);
    var password = cljs.core.nth.call(null, vec__8583, 1, null);
    return[cljs.core.str("Basic "), cljs.core.str(no.en.core.base64_encode.call(null, [cljs.core.str(username), cljs.core.str(":"), cljs.core.str(password)].join("")))].join("");
  } else {
    return null;
  }
};
cljs_http.util.build_url = function cljs_http$util$build_url(p__8584) {
  var map__8587 = p__8584;
  var map__8587__$1 = cljs.core.seq_QMARK_.call(null, map__8587) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8587) : map__8587;
  var query_string = cljs.core.get.call(null, map__8587__$1, new cljs.core.Keyword(null, "query-string", "query-string", -1018845061));
  var uri = cljs.core.get.call(null, map__8587__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var server_port = cljs.core.get.call(null, map__8587__$1, new cljs.core.Keyword(null, "server-port", "server-port", 663745648));
  var server_name = cljs.core.get.call(null, map__8587__$1, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295));
  var scheme = cljs.core.get.call(null, map__8587__$1, new cljs.core.Keyword(null, "scheme", "scheme", 90199613));
  return[cljs.core.str(function() {
    var G__8588 = new goog.Uri;
    G__8588.setScheme(cljs.core.name.call(null, function() {
      var or__4274__auto__ = scheme;
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return new cljs.core.Keyword(null, "http", "http", 382524695);
      }
    }()));
    G__8588.setDomain(server_name);
    G__8588.setPort(server_port);
    G__8588.setPath(uri);
    G__8588.setQuery(query_string, true);
    return G__8588;
  }())].join("");
};
cljs_http.util.camelize = function cljs_http$util$camelize(s) {
  return clojure.string.join.call(null, "-", cljs.core.map.call(null, clojure.string.capitalize, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /-/)));
};
cljs_http.util.build_headers = function cljs_http$util$build_headers(m) {
  return cljs.core.clj__GT_js.call(null, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, m)), cljs.core.vals.call(null, m)));
};
cljs_http.util.user_agent = function cljs_http$util$user_agent() {
  return goog.userAgent.getUserAgentString();
};
cljs_http.util.android_QMARK_ = function cljs_http$util$android_QMARK_() {
  return cljs.core.re_matches.call(null, /.*android.*/i, cljs_http.util.user_agent.call(null));
};
cljs_http.util.transit_decode = function cljs_http$util$transit_decode(s, type, opts) {
  var rdr = cognitect.transit.reader.call(null, type, opts);
  return cognitect.transit.read.call(null, rdr, s);
};
cljs_http.util.transit_encode = function cljs_http$util$transit_encode(x, type, opts) {
  var wrtr = cognitect.transit.writer.call(null, type, opts);
  return cognitect.transit.write.call(null, wrtr, x);
};
cljs_http.util.json_decode = function cljs_http$util$json_decode(s) {
  var temp__4124__auto__ = JSON.parse(s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var v = temp__4124__auto__;
    return cljs.core.js__GT_clj.call(null, v, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
  } else {
    return null;
  }
};
cljs_http.util.json_encode = function cljs_http$util$json_encode(x) {
  return JSON.stringify(cljs.core.clj__GT_js.call(null, x));
};
cljs_http.util.parse_headers = function cljs_http$util$parse_headers(headers) {
  return cljs.core.reduce.call(null, function(p1__8590_SHARP_, p2__8589_SHARP_) {
    var vec__8592 = clojure.string.split.call(null, p2__8589_SHARP_, /:\s+/);
    var k = cljs.core.nth.call(null, vec__8592, 0, null);
    var v = cljs.core.nth.call(null, vec__8592, 1, null);
    if (cljs.core.truth_(function() {
      var or__4274__auto__ = clojure.string.blank_QMARK_.call(null, k);
      if (cljs.core.truth_(or__4274__auto__)) {
        return or__4274__auto__;
      } else {
        return clojure.string.blank_QMARK_.call(null, v);
      }
    }())) {
      return p1__8590_SHARP_;
    } else {
      return cljs.core.assoc.call(null, p1__8590_SHARP_, clojure.string.lower_case.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, function() {
    var or__4274__auto__ = headers;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return "";
    }
  }(), /(\n)|(\r)|(\r\n)|(\n\r)/));
};
goog.provide("cljs_http.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs_http.util");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
cljs_http.core.pending_requests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs_http.core.abort_BANG_ = function cljs_http$core$abort_BANG_(channel) {
  var temp__4126__auto__ = cljs.core.deref.call(null, cljs_http.core.pending_requests).call(null, channel);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var xhr = temp__4126__auto__;
    cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
    cljs.core.async.close_BANG_.call(null, channel);
    return xhr.abort();
  } else {
    return null;
  }
};
cljs_http.core.channel_for_request = function cljs_http$core$channel_for_request(request) {
  var or__4274__auto__ = (new cljs.core.Keyword(null, "channel", "channel", 734187692)).cljs$core$IFn$_invoke$arity$1(request);
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return cljs.core.async.chan.call(null);
  }
};
cljs_http.core.request = function cljs_http$core$request(p__8575) {
  var map__8578 = p__8575;
  var map__8578__$1 = cljs.core.seq_QMARK_.call(null, map__8578) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8578) : map__8578;
  var request__$1 = map__8578__$1;
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__8578__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var body = cljs.core.get.call(null, map__8578__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var headers = cljs.core.get.call(null, map__8578__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var request_method = cljs.core.get.call(null, map__8578__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  var channel = cljs_http.core.channel_for_request.call(null, request__$1);
  var request_url = cljs_http.util.build_url.call(null, request__$1);
  var method = cljs.core.name.call(null, function() {
    var or__4274__auto__ = request_method;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return new cljs.core.Keyword(null, "get", "get", 1683182755);
    }
  }());
  var timeout = function() {
    var or__4274__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(request__$1);
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return 0;
    }
  }();
  var headers__$1 = cljs_http.util.build_headers.call(null, headers);
  var send_credentials = with_credentials_QMARK_ == null ? true : with_credentials_QMARK_;
  var xhr = function() {
    var G__8579 = new goog.net.XhrIo;
    G__8579.setTimeoutInterval(timeout);
    G__8579.setWithCredentials(send_credentials);
    return G__8579;
  }();
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, xhr);
  xhr.listen(goog.net.EventType.COMPLETE, function(channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__8578, map__8578__$1, request__$1, with_credentials_QMARK_, body, headers, request_method) {
    return function(p1__8574_SHARP_) {
      var target = p1__8574_SHARP_.target;
      cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "status", "status", -1997798413), target.getStatus(), new cljs.core.Keyword(null, "success", "success", 1890645906), target.isSuccess(), new cljs.core.Keyword(null, "body", "body", -2049205669), target.getResponseText(), new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs_http.util.parse_headers.call(null, target.getAllResponseHeaders()), new cljs.core.Keyword(null, 
      "trace-redirects", "trace-redirects", -1149427907), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [request_url, target.getLastUri()], null)], null));
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__8578, map__8578__$1, request__$1, with_credentials_QMARK_, body, headers, request_method));
  xhr.send(request_url, method, body, headers__$1);
  return channel;
};
goog.provide("cljs_http.client");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cljs_http.core");
goog.require("no.en.core");
goog.require("cljs_http.util");
goog.require("cljs.core.async");
goog.require("clojure.string");
goog.require("cljs.reader");
cljs_http.client.if_pos = function cljs_http$client$if_pos(v) {
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = v;
    if (cljs.core.truth_(and__4262__auto__)) {
      return v > 0;
    } else {
      return and__4262__auto__;
    }
  }())) {
    return v;
  } else {
    return null;
  }
};
cljs_http.client.parse_query_params = function cljs_http$client$parse_query_params(s) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
    return cljs.core.reduce.call(null, function(p1__11009_SHARP_, p2__11008_SHARP_) {
      var vec__11011 = clojure.string.split.call(null, p2__11008_SHARP_, /=/);
      var k = cljs.core.nth.call(null, vec__11011, 0, null);
      var v = cljs.core.nth.call(null, vec__11011, 1, null);
      return cljs.core.assoc.call(null, p1__11009_SHARP_, cljs.core.keyword.call(null, no.en.core.url_decode.call(null, k)), no.en.core.url_decode.call(null, v));
    }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/));
  } else {
    return null;
  }
};
cljs_http.client.parse_url = function cljs_http$client$parse_url(url) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, url))) {
    var uri = goog.Uri.parse(url);
    var query_data = uri.getQueryData();
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "scheme", "scheme", 90199613), cljs.core.keyword.call(null, uri.getScheme()), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), uri.getDomain(), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), cljs_http.client.if_pos.call(null, uri.getPort()), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri.getPath(), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), 
    cljs.core.not.call(null, query_data.isEmpty()) ? [cljs.core.str(query_data)].join("") : null, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), cljs.core.not.call(null, query_data.isEmpty()) ? cljs_http.client.parse_query_params.call(null, [cljs.core.str(query_data)].join("")) : null], null);
  } else {
    return null;
  }
};
cljs_http.client.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [205, null, 206, null, 300, null, 204, null, 307, null, 303, null, 301, null, 201, null, 302, null, 202, null, 200, null, 203, null, 207, null], null), null);
cljs_http.client.encode_val = function cljs_http$client$encode_val(k, v) {
  return[cljs.core.str(no.en.core.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str("\x3d"), cljs.core.str(no.en.core.url_encode.call(null, [cljs.core.str(v)].join("")))].join("");
};
cljs_http.client.encode_vals = function cljs_http$client$encode_vals(k, vs) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__11012_SHARP_) {
    return cljs_http.client.encode_val.call(null, k, p1__11012_SHARP_);
  }, vs));
};
cljs_http.client.encode_param = function cljs_http$client$encode_param(p__11013) {
  var vec__11015 = p__11013;
  var k = cljs.core.nth.call(null, vec__11015, 0, null);
  var v = cljs.core.nth.call(null, vec__11015, 1, null);
  if (cljs.core.coll_QMARK_.call(null, v)) {
    return cljs_http.client.encode_vals.call(null, k, v);
  } else {
    return cljs_http.client.encode_val.call(null, k, v);
  }
};
cljs_http.client.generate_query_string = function cljs_http$client$generate_query_string(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, cljs_http.client.encode_param, params));
};
cljs_http.client.regex_char_esc_smap = function() {
  var esc_chars = "()*\x26^%$#!+";
  return cljs.core.zipmap.call(null, esc_chars, cljs.core.map.call(null, function(esc_chars) {
    return function(p1__11016_SHARP_) {
      return[cljs.core.str("\\"), cljs.core.str(p1__11016_SHARP_)].join("");
    };
  }(esc_chars), esc_chars));
}();
cljs_http.client.escape_special = function cljs_http$client$escape_special(string) {
  return cljs.core.reduce.call(null, cljs.core.str, cljs.core.replace.call(null, cljs_http.client.regex_char_esc_smap, string));
};
cljs_http.client.decode_body = function cljs_http$client$decode_body(response, decode_fn, content_type, request_method) {
  if (cljs.core.truth_(function() {
    var and__4262__auto__ = cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "head", "head", -771383919), request_method);
    if (and__4262__auto__) {
      return cljs.core.re_find.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("(?i)"), cljs.core.str(cljs_http.client.escape_special.call(null, content_type))].join("")), [cljs.core.str(cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(response), "content-type", ""))].join(""));
    } else {
      return and__4262__auto__;
    }
  }())) {
    return cljs.core.update_in.call(null, response, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), decode_fn);
  } else {
    return response;
  }
};
cljs_http.client.wrap_edn_params = function cljs_http$client$wrap_edn_params(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var params = temp__4124__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.pr_str.call(null, params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/edn"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_edn_response = function cljs_http$client$wrap_edn_response(client) {
  return function(request) {
    var channel = cljs_http.core.channel_for_request.call(null, request);
    var c__6569__auto___11053 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11053, channel) {
      return function() {
        var f__6570__auto__ = function() {
          var switch__6548__auto__ = function(c__6569__auto___11053, channel) {
            return function(state_11043) {
              var state_val_11044 = state_11043[1];
              if (state_val_11044 === 2) {
                var inst_11037 = state_11043[2];
                var inst_11038 = (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request);
                var inst_11039 = cljs_http.client.decode_body.call(null, inst_11037, cljs.reader.read_string, "application/edn", inst_11038);
                var inst_11040 = cljs.core.async.put_BANG_.call(null, channel, inst_11039);
                var inst_11041 = cljs.core.async.close_BANG_.call(null, channel);
                var state_11043__$1 = function() {
                  var statearr_11045 = state_11043;
                  statearr_11045[7] = inst_11040;
                  return statearr_11045;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11043__$1, inst_11041);
              } else {
                if (state_val_11044 === 1) {
                  var inst_11035 = client.call(null, request);
                  var state_11043__$1 = state_11043;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11043__$1, 2, inst_11035);
                } else {
                  return null;
                }
              }
            };
          }(c__6569__auto___11053, channel);
          return function(switch__6548__auto__, c__6569__auto___11053, channel) {
            return function() {
              var cljs_http$client$wrap_edn_response_$_state_machine__6549__auto__ = null;
              var cljs_http$client$wrap_edn_response_$_state_machine__6549__auto____0 = function() {
                var statearr_11049 = [null, null, null, null, null, null, null, null];
                statearr_11049[0] = cljs_http$client$wrap_edn_response_$_state_machine__6549__auto__;
                statearr_11049[1] = 1;
                return statearr_11049;
              };
              var cljs_http$client$wrap_edn_response_$_state_machine__6549__auto____1 = function(state_11043) {
                while (true) {
                  var ret_value__6550__auto__ = function() {
                    try {
                      while (true) {
                        var result__6551__auto__ = switch__6548__auto__.call(null, state_11043);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6551__auto__;
                        }
                        break;
                      }
                    } catch (e11050) {
                      if (e11050 instanceof Object) {
                        var ex__6552__auto__ = e11050;
                        var statearr_11051_11054 = state_11043;
                        statearr_11051_11054[5] = ex__6552__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11043);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11050;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11055 = state_11043;
                    state_11043 = G__11055;
                    continue;
                  } else {
                    return ret_value__6550__auto__;
                  }
                  break;
                }
              };
              cljs_http$client$wrap_edn_response_$_state_machine__6549__auto__ = function(state_11043) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$client$wrap_edn_response_$_state_machine__6549__auto____0.call(this);
                  case 1:
                    return cljs_http$client$wrap_edn_response_$_state_machine__6549__auto____1.call(this, state_11043);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$client$wrap_edn_response_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$client$wrap_edn_response_$_state_machine__6549__auto____0;
              cljs_http$client$wrap_edn_response_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$client$wrap_edn_response_$_state_machine__6549__auto____1;
              return cljs_http$client$wrap_edn_response_$_state_machine__6549__auto__;
            }();
          }(switch__6548__auto__, c__6569__auto___11053, channel);
        }();
        var state__6571__auto__ = function() {
          var statearr_11052 = f__6570__auto__.call(null);
          statearr_11052[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11053;
          return statearr_11052;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
      };
    }(c__6569__auto___11053, channel));
    return channel;
  };
};
cljs_http.client.wrap_accept = function cljs_http$client$wrap_accept() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic = function(client, p__11058) {
  var vec__11059 = p__11058;
  var accept = cljs.core.nth.call(null, vec__11059, 0, null);
  return function(vec__11059, accept) {
    return function(request) {
      var temp__4124__auto__ = function() {
        var or__4274__auto__ = (new cljs.core.Keyword(null, "accept", "accept", 1874130431)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return accept;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var accept__$1 = temp__4124__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "accept"], null), accept__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__11059, accept);
};
cljs_http.client.wrap_accept.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_accept.cljs$lang$applyTo = function(seq11056) {
  var G__11057 = cljs.core.first.call(null, seq11056);
  var seq11056__$1 = cljs.core.next.call(null, seq11056);
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(G__11057, seq11056__$1);
};
cljs_http.client.wrap_content_type = function cljs_http$client$wrap_content_type() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic = function(client, p__11062) {
  var vec__11063 = p__11062;
  var content_type = cljs.core.nth.call(null, vec__11063, 0, null);
  return function(vec__11063, content_type) {
    return function(request) {
      var temp__4124__auto__ = function() {
        var or__4274__auto__ = (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return content_type;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var content_type__$1 = temp__4124__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), content_type__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__11063, content_type);
};
cljs_http.client.wrap_content_type.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_content_type.cljs$lang$applyTo = function(seq11060) {
  var G__11061 = cljs.core.first.call(null, seq11060);
  var seq11060__$1 = cljs.core.next.call(null, seq11060);
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(G__11061, seq11060__$1);
};
cljs_http.client.default_transit_opts = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "encoding", "encoding", 1728578272), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "decoding", "decoding", -568180903), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 
1050289140), cljs.core.PersistentArrayMap.EMPTY], null);
cljs_http.client.wrap_transit_params = function cljs_http$client$wrap_transit_params(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var params = temp__4124__auto__;
      var map__11065 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
      var map__11065__$1 = cljs.core.seq_QMARK_.call(null, map__11065) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11065) : map__11065;
      var encoding_opts = cljs.core.get.call(null, map__11065__$1, new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631));
      var encoding = cljs.core.get.call(null, map__11065__$1, new cljs.core.Keyword(null, "encoding", "encoding", 1728578272));
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.transit_encode.call(null, params, encoding, encoding_opts)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), 
      "application/transit+json"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_transit_response = function cljs_http$client$wrap_transit_response(client) {
  return function(request) {
    var channel = cljs_http.core.channel_for_request.call(null, request);
    var map__11087 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
    var map__11087__$1 = cljs.core.seq_QMARK_.call(null, map__11087) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11087) : map__11087;
    var decoding_opts = cljs.core.get.call(null, map__11087__$1, new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 1050289140));
    var decoding = cljs.core.get.call(null, map__11087__$1, new cljs.core.Keyword(null, "decoding", "decoding", -568180903));
    var c__6569__auto___11107 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding) {
      return function() {
        var f__6570__auto__ = function() {
          var switch__6548__auto__ = function(c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding) {
            return function(state_11097) {
              var state_val_11098 = state_11097[1];
              if (state_val_11098 === 2) {
                var inst_11090 = state_11097[2];
                var inst_11091 = function() {
                  var response = inst_11090;
                  return function(response, inst_11090, state_val_11098, c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding) {
                    return function(p1__11066_SHARP_) {
                      return cljs_http.util.transit_decode.call(null, p1__11066_SHARP_, decoding, decoding_opts);
                    };
                  }(response, inst_11090, state_val_11098, c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding);
                }();
                var inst_11092 = (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request);
                var inst_11093 = cljs_http.client.decode_body.call(null, inst_11090, inst_11091, "application/transit+json", inst_11092);
                var inst_11094 = cljs.core.async.put_BANG_.call(null, channel, inst_11093);
                var inst_11095 = cljs.core.async.close_BANG_.call(null, channel);
                var state_11097__$1 = function() {
                  var statearr_11099 = state_11097;
                  statearr_11099[7] = inst_11094;
                  return statearr_11099;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11097__$1, inst_11095);
              } else {
                if (state_val_11098 === 1) {
                  var inst_11088 = client.call(null, request);
                  var state_11097__$1 = state_11097;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11097__$1, 2, inst_11088);
                } else {
                  return null;
                }
              }
            };
          }(c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding);
          return function(switch__6548__auto__, c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding) {
            return function() {
              var cljs_http$client$wrap_transit_response_$_state_machine__6549__auto__ = null;
              var cljs_http$client$wrap_transit_response_$_state_machine__6549__auto____0 = function() {
                var statearr_11103 = [null, null, null, null, null, null, null, null];
                statearr_11103[0] = cljs_http$client$wrap_transit_response_$_state_machine__6549__auto__;
                statearr_11103[1] = 1;
                return statearr_11103;
              };
              var cljs_http$client$wrap_transit_response_$_state_machine__6549__auto____1 = function(state_11097) {
                while (true) {
                  var ret_value__6550__auto__ = function() {
                    try {
                      while (true) {
                        var result__6551__auto__ = switch__6548__auto__.call(null, state_11097);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6551__auto__;
                        }
                        break;
                      }
                    } catch (e11104) {
                      if (e11104 instanceof Object) {
                        var ex__6552__auto__ = e11104;
                        var statearr_11105_11108 = state_11097;
                        statearr_11105_11108[5] = ex__6552__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11097);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11104;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11109 = state_11097;
                    state_11097 = G__11109;
                    continue;
                  } else {
                    return ret_value__6550__auto__;
                  }
                  break;
                }
              };
              cljs_http$client$wrap_transit_response_$_state_machine__6549__auto__ = function(state_11097) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$client$wrap_transit_response_$_state_machine__6549__auto____0.call(this);
                  case 1:
                    return cljs_http$client$wrap_transit_response_$_state_machine__6549__auto____1.call(this, state_11097);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$client$wrap_transit_response_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$client$wrap_transit_response_$_state_machine__6549__auto____0;
              cljs_http$client$wrap_transit_response_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$client$wrap_transit_response_$_state_machine__6549__auto____1;
              return cljs_http$client$wrap_transit_response_$_state_machine__6549__auto__;
            }();
          }(switch__6548__auto__, c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding);
        }();
        var state__6571__auto__ = function() {
          var statearr_11106 = f__6570__auto__.call(null);
          statearr_11106[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11107;
          return statearr_11106;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
      };
    }(c__6569__auto___11107, channel, map__11087, map__11087__$1, decoding_opts, decoding));
    return channel;
  };
};
cljs_http.client.wrap_json_params = function cljs_http$client$wrap_json_params(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var params = temp__4124__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.json_encode.call(null, params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/json"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_json_response = function cljs_http$client$wrap_json_response(client) {
  return function(request) {
    var channel = cljs_http.core.channel_for_request.call(null, request);
    var c__6569__auto___11146 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___11146, channel) {
      return function() {
        var f__6570__auto__ = function() {
          var switch__6548__auto__ = function(c__6569__auto___11146, channel) {
            return function(state_11136) {
              var state_val_11137 = state_11136[1];
              if (state_val_11137 === 2) {
                var inst_11130 = state_11136[2];
                var inst_11131 = (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request);
                var inst_11132 = cljs_http.client.decode_body.call(null, inst_11130, cljs_http.util.json_decode, "application/json", inst_11131);
                var inst_11133 = cljs.core.async.put_BANG_.call(null, channel, inst_11132);
                var inst_11134 = cljs.core.async.close_BANG_.call(null, channel);
                var state_11136__$1 = function() {
                  var statearr_11138 = state_11136;
                  statearr_11138[7] = inst_11133;
                  return statearr_11138;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11136__$1, inst_11134);
              } else {
                if (state_val_11137 === 1) {
                  var inst_11128 = client.call(null, request);
                  var state_11136__$1 = state_11136;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11136__$1, 2, inst_11128);
                } else {
                  return null;
                }
              }
            };
          }(c__6569__auto___11146, channel);
          return function(switch__6548__auto__, c__6569__auto___11146, channel) {
            return function() {
              var cljs_http$client$wrap_json_response_$_state_machine__6549__auto__ = null;
              var cljs_http$client$wrap_json_response_$_state_machine__6549__auto____0 = function() {
                var statearr_11142 = [null, null, null, null, null, null, null, null];
                statearr_11142[0] = cljs_http$client$wrap_json_response_$_state_machine__6549__auto__;
                statearr_11142[1] = 1;
                return statearr_11142;
              };
              var cljs_http$client$wrap_json_response_$_state_machine__6549__auto____1 = function(state_11136) {
                while (true) {
                  var ret_value__6550__auto__ = function() {
                    try {
                      while (true) {
                        var result__6551__auto__ = switch__6548__auto__.call(null, state_11136);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6551__auto__;
                        }
                        break;
                      }
                    } catch (e11143) {
                      if (e11143 instanceof Object) {
                        var ex__6552__auto__ = e11143;
                        var statearr_11144_11147 = state_11136;
                        statearr_11144_11147[5] = ex__6552__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11136);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e11143;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11148 = state_11136;
                    state_11136 = G__11148;
                    continue;
                  } else {
                    return ret_value__6550__auto__;
                  }
                  break;
                }
              };
              cljs_http$client$wrap_json_response_$_state_machine__6549__auto__ = function(state_11136) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$client$wrap_json_response_$_state_machine__6549__auto____0.call(this);
                  case 1:
                    return cljs_http$client$wrap_json_response_$_state_machine__6549__auto____1.call(this, state_11136);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$client$wrap_json_response_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$client$wrap_json_response_$_state_machine__6549__auto____0;
              cljs_http$client$wrap_json_response_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$client$wrap_json_response_$_state_machine__6549__auto____1;
              return cljs_http$client$wrap_json_response_$_state_machine__6549__auto__;
            }();
          }(switch__6548__auto__, c__6569__auto___11146, channel);
        }();
        var state__6571__auto__ = function() {
          var statearr_11145 = f__6570__auto__.call(null);
          statearr_11145[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___11146;
          return statearr_11145;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
      };
    }(c__6569__auto___11146, channel));
    return channel;
  };
};
cljs_http.client.wrap_query_params = function cljs_http$client$wrap_query_params(client) {
  return function(p__11151) {
    var map__11152 = p__11151;
    var map__11152__$1 = cljs.core.seq_QMARK_.call(null, map__11152) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11152) : map__11152;
    var req = map__11152__$1;
    var query_params = cljs.core.get.call(null, map__11152__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    if (cljs.core.truth_(query_params)) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "query-params", "query-params", 900640534)), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), cljs_http.client.generate_query_string.call(null, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_form_params = function cljs_http$client$wrap_form_params(client) {
  return function(p__11155) {
    var map__11156 = p__11155;
    var map__11156__$1 = cljs.core.seq_QMARK_.call(null, map__11156) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11156) : map__11156;
    var request = map__11156__$1;
    var request_method = cljs.core.get.call(null, map__11156__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    var form_params = cljs.core.get.call(null, map__11156__$1, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467));
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = form_params;
      if (cljs.core.truth_(and__4262__auto__)) {
        return(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__4262__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_query_string.call(null, form_params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/x-www-form-urlencoded"))
      ;
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_android_cors_bugfix = function cljs_http$client$wrap_android_cors_bugfix(client) {
  return function(request) {
    return client.call(null, cljs.core.truth_(cljs_http.util.android_QMARK_.call(null)) ? cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "android", "android", -2084094573)], null), Math.random.call(null)) : request);
  };
};
cljs_http.client.wrap_method = function cljs_http$client$wrap_method(client) {
  return function(req) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "method", "method", 55703592)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var m = temp__4124__auto__;
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "method", "method", 55703592)), new cljs.core.Keyword(null, "request-method", "request-method", 1764796830), m));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_server_name = function cljs_http$client$wrap_server_name(client, server_name) {
  return function(p1__11157_SHARP_) {
    return client.call(null, cljs.core.assoc.call(null, p1__11157_SHARP_, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), server_name));
  };
};
cljs_http.client.wrap_url = function cljs_http$client$wrap_url(client) {
  return function(p__11161) {
    var map__11162 = p__11161;
    var map__11162__$1 = cljs.core.seq_QMARK_.call(null, map__11162) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11162) : map__11162;
    var req = map__11162__$1;
    var query_params = cljs.core.get.call(null, map__11162__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var temp__4124__auto__ = cljs_http.client.parse_url.call(null, (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(req));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var spec = temp__4124__auto__;
      return client.call(null, cljs.core.update_in.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, req, spec), new cljs.core.Keyword(null, "url", "url", 276297046)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534)], null), function(spec, temp__4124__auto__, map__11162, map__11162__$1, req, query_params) {
        return function(p1__11158_SHARP_) {
          return cljs.core.merge.call(null, p1__11158_SHARP_, query_params);
        };
      }(spec, temp__4124__auto__, map__11162, map__11162__$1, req, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_basic_auth = function cljs_http$client$wrap_basic_auth() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic = function(client, p__11165) {
  var vec__11166 = p__11165;
  var credentials = cljs.core.nth.call(null, vec__11166, 0, null);
  return function(vec__11166, credentials) {
    return function(req) {
      var credentials__$1 = function() {
        var or__4274__auto__ = (new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)).cljs$core$IFn$_invoke$arity$1(req);
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return credentials;
        }
      }();
      if (!cljs.core.empty_QMARK_.call(null, credentials__$1)) {
        return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), cljs_http.util.basic_auth.call(null, credentials__$1)));
      } else {
        return client.call(null, req);
      }
    };
  }(vec__11166, credentials);
};
cljs_http.client.wrap_basic_auth.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_basic_auth.cljs$lang$applyTo = function(seq11163) {
  var G__11164 = cljs.core.first.call(null, seq11163);
  var seq11163__$1 = cljs.core.next.call(null, seq11163);
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(G__11164, seq11163__$1);
};
cljs_http.client.wrap_oauth = function cljs_http$client$wrap_oauth(client) {
  return function(req) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var oauth_token = temp__4124__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), [cljs.core.str("Bearer "), cljs.core.str(oauth_token)].join("")));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_request = function cljs_http$client$wrap_request(request) {
  return cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_android_cors_bugfix.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_json_response.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_transit_response.call(null, cljs_http.client.wrap_transit_params.call(null, cljs_http.client.wrap_edn_response.call(null, 
  cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, request)))))))))))))));
};
cljs_http.client.request = cljs_http.client.wrap_request.call(null, cljs_http.core.request);
cljs_http.client.delete$ = function cljs_http$client$delete() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11169) {
  var vec__11170 = p__11169;
  var req = cljs.core.nth.call(null, vec__11170, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "delete", "delete", -1768633620), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.delete$.cljs$lang$maxFixedArity = 1;
cljs_http.client.delete$.cljs$lang$applyTo = function(seq11167) {
  var G__11168 = cljs.core.first.call(null, seq11167);
  var seq11167__$1 = cljs.core.next.call(null, seq11167);
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(G__11168, seq11167__$1);
};
cljs_http.client.get = function cljs_http$client$get() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11173) {
  var vec__11174 = p__11173;
  var req = cljs.core.nth.call(null, vec__11174, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.get.cljs$lang$maxFixedArity = 1;
cljs_http.client.get.cljs$lang$applyTo = function(seq11171) {
  var G__11172 = cljs.core.first.call(null, seq11171);
  var seq11171__$1 = cljs.core.next.call(null, seq11171);
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(G__11172, seq11171__$1);
};
cljs_http.client.head = function cljs_http$client$head() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11177) {
  var vec__11178 = p__11177;
  var req = cljs.core.nth.call(null, vec__11178, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.head.cljs$lang$maxFixedArity = 1;
cljs_http.client.head.cljs$lang$applyTo = function(seq11175) {
  var G__11176 = cljs.core.first.call(null, seq11175);
  var seq11175__$1 = cljs.core.next.call(null, seq11175);
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(G__11176, seq11175__$1);
};
cljs_http.client.move = function cljs_http$client$move() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11181) {
  var vec__11182 = p__11181;
  var req = cljs.core.nth.call(null, vec__11182, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.move.cljs$lang$maxFixedArity = 1;
cljs_http.client.move.cljs$lang$applyTo = function(seq11179) {
  var G__11180 = cljs.core.first.call(null, seq11179);
  var seq11179__$1 = cljs.core.next.call(null, seq11179);
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(G__11180, seq11179__$1);
};
cljs_http.client.options = function cljs_http$client$options() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11185) {
  var vec__11186 = p__11185;
  var req = cljs.core.nth.call(null, vec__11186, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "options", "options", 99638489), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.options.cljs$lang$maxFixedArity = 1;
cljs_http.client.options.cljs$lang$applyTo = function(seq11183) {
  var G__11184 = cljs.core.first.call(null, seq11183);
  var seq11183__$1 = cljs.core.next.call(null, seq11183);
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(G__11184, seq11183__$1);
};
cljs_http.client.patch = function cljs_http$client$patch() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11189) {
  var vec__11190 = p__11189;
  var req = cljs.core.nth.call(null, vec__11190, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "patch", "patch", 380775109), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.patch.cljs$lang$maxFixedArity = 1;
cljs_http.client.patch.cljs$lang$applyTo = function(seq11187) {
  var G__11188 = cljs.core.first.call(null, seq11187);
  var seq11187__$1 = cljs.core.next.call(null, seq11187);
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(G__11188, seq11187__$1);
};
cljs_http.client.post = function cljs_http$client$post() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11193) {
  var vec__11194 = p__11193;
  var req = cljs.core.nth.call(null, vec__11194, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.post.cljs$lang$maxFixedArity = 1;
cljs_http.client.post.cljs$lang$applyTo = function(seq11191) {
  var G__11192 = cljs.core.first.call(null, seq11191);
  var seq11191__$1 = cljs.core.next.call(null, seq11191);
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(G__11192, seq11191__$1);
};
cljs_http.client.put = function cljs_http$client$put() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic = function(url, p__11197) {
  var vec__11198 = p__11197;
  var req = cljs.core.nth.call(null, vec__11198, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "put", "put", 1299772570), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.put.cljs$lang$maxFixedArity = 1;
cljs_http.client.put.cljs$lang$applyTo = function(seq11195) {
  var G__11196 = cljs.core.first.call(null, seq11195);
  var seq11195__$1 = cljs.core.next.call(null, seq11195);
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(G__11196, seq11195__$1);
};
goog.provide("cljs_hash.md5");
goog.require("cljs.core");
cljs_hash.md5.md5 = function(string) {
  function RotateLeft(lValue, iShiftBits) {
    return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
  }
  function AddUnsigned(lX, lY) {
    var lX4, lY4, lX8, lY8, lResult;
    lX8 = lX & 2147483648;
    lY8 = lY & 2147483648;
    lX4 = lX & 1073741824;
    lY4 = lY & 1073741824;
    lResult = (lX & 1073741823) + (lY & 1073741823);
    if (lX4 & lY4) {
      return lResult ^ 2147483648 ^ lX8 ^ lY8;
    }
    if (lX4 | lY4) {
      if (lResult & 1073741824) {
        return lResult ^ 3221225472 ^ lX8 ^ lY8;
      } else {
        return lResult ^ 1073741824 ^ lX8 ^ lY8;
      }
    } else {
      return lResult ^ lX8 ^ lY8;
    }
  }
  function F(x, y, z) {
    return x & y | ~x & z;
  }
  function G(x, y, z) {
    return x & z | y & ~z;
  }
  function H(x, y, z) {
    return x ^ y ^ z;
  }
  function I(x, y, z) {
    return y ^ (x | ~z);
  }
  function FF(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  }
  function GG(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  }
  function HH(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  }
  function II(a, b, c, d, x, s, ac) {
    a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
    return AddUnsigned(RotateLeft(a, s), b);
  }
  function ConvertToWordArray(string) {
    var lWordCount;
    var lMessageLength = string.length;
    var lNumberOfWords_temp1 = lMessageLength + 8;
    var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
    var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
    var lWordArray = Array(lNumberOfWords - 1);
    var lBytePosition = 0;
    var lByteCount = 0;
    while (lByteCount < lMessageLength) {
      lWordCount = (lByteCount - lByteCount % 4) / 4;
      lBytePosition = lByteCount % 4 * 8;
      lWordArray[lWordCount] = lWordArray[lWordCount] | string.charCodeAt(lByteCount) << lBytePosition;
      lByteCount++;
    }
    lWordCount = (lByteCount - lByteCount % 4) / 4;
    lBytePosition = lByteCount % 4 * 8;
    lWordArray[lWordCount] = lWordArray[lWordCount] | 128 << lBytePosition;
    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
    return lWordArray;
  }
  function WordToHex(lValue) {
    var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
    for (lCount = 0;lCount <= 3;lCount++) {
      lByte = lValue >>> lCount * 8 & 255;
      WordToHexValue_temp = "0" + lByte.toString(16);
      WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
    }
    return WordToHexValue;
  }
  function Utf8Encode(string) {
    string = string.replace(/\r\n/g, "\n");
    var utftext = "";
    for (var n = 0;n < string.length;n++) {
      var c = string.charCodeAt(n);
      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else {
        if (c > 127 && c < 2048) {
          utftext += String.fromCharCode(c >> 6 | 192);
          utftext += String.fromCharCode(c & 63 | 128);
        } else {
          utftext += String.fromCharCode(c >> 12 | 224);
          utftext += String.fromCharCode(c >> 6 & 63 | 128);
          utftext += String.fromCharCode(c & 63 | 128);
        }
      }
    }
    return utftext;
  }
  var x = Array();
  var k, AA, BB, CC, DD, a, b, c, d;
  var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
  var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
  var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
  var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
  string = Utf8Encode(string);
  x = ConvertToWordArray(string);
  a = 1732584193;
  b = 4023233417;
  c = 2562383102;
  d = 271733878;
  for (k = 0;k < x.length;k += 16) {
    AA = a;
    BB = b;
    CC = c;
    DD = d;
    a = FF(a, b, c, d, x[k + 0], S11, 3614090360);
    d = FF(d, a, b, c, x[k + 1], S12, 3905402710);
    c = FF(c, d, a, b, x[k + 2], S13, 606105819);
    b = FF(b, c, d, a, x[k + 3], S14, 3250441966);
    a = FF(a, b, c, d, x[k + 4], S11, 4118548399);
    d = FF(d, a, b, c, x[k + 5], S12, 1200080426);
    c = FF(c, d, a, b, x[k + 6], S13, 2821735955);
    b = FF(b, c, d, a, x[k + 7], S14, 4249261313);
    a = FF(a, b, c, d, x[k + 8], S11, 1770035416);
    d = FF(d, a, b, c, x[k + 9], S12, 2336552879);
    c = FF(c, d, a, b, x[k + 10], S13, 4294925233);
    b = FF(b, c, d, a, x[k + 11], S14, 2304563134);
    a = FF(a, b, c, d, x[k + 12], S11, 1804603682);
    d = FF(d, a, b, c, x[k + 13], S12, 4254626195);
    c = FF(c, d, a, b, x[k + 14], S13, 2792965006);
    b = FF(b, c, d, a, x[k + 15], S14, 1236535329);
    a = GG(a, b, c, d, x[k + 1], S21, 4129170786);
    d = GG(d, a, b, c, x[k + 6], S22, 3225465664);
    c = GG(c, d, a, b, x[k + 11], S23, 643717713);
    b = GG(b, c, d, a, x[k + 0], S24, 3921069994);
    a = GG(a, b, c, d, x[k + 5], S21, 3593408605);
    d = GG(d, a, b, c, x[k + 10], S22, 38016083);
    c = GG(c, d, a, b, x[k + 15], S23, 3634488961);
    b = GG(b, c, d, a, x[k + 4], S24, 3889429448);
    a = GG(a, b, c, d, x[k + 9], S21, 568446438);
    d = GG(d, a, b, c, x[k + 14], S22, 3275163606);
    c = GG(c, d, a, b, x[k + 3], S23, 4107603335);
    b = GG(b, c, d, a, x[k + 8], S24, 1163531501);
    a = GG(a, b, c, d, x[k + 13], S21, 2850285829);
    d = GG(d, a, b, c, x[k + 2], S22, 4243563512);
    c = GG(c, d, a, b, x[k + 7], S23, 1735328473);
    b = GG(b, c, d, a, x[k + 12], S24, 2368359562);
    a = HH(a, b, c, d, x[k + 5], S31, 4294588738);
    d = HH(d, a, b, c, x[k + 8], S32, 2272392833);
    c = HH(c, d, a, b, x[k + 11], S33, 1839030562);
    b = HH(b, c, d, a, x[k + 14], S34, 4259657740);
    a = HH(a, b, c, d, x[k + 1], S31, 2763975236);
    d = HH(d, a, b, c, x[k + 4], S32, 1272893353);
    c = HH(c, d, a, b, x[k + 7], S33, 4139469664);
    b = HH(b, c, d, a, x[k + 10], S34, 3200236656);
    a = HH(a, b, c, d, x[k + 13], S31, 681279174);
    d = HH(d, a, b, c, x[k + 0], S32, 3936430074);
    c = HH(c, d, a, b, x[k + 3], S33, 3572445317);
    b = HH(b, c, d, a, x[k + 6], S34, 76029189);
    a = HH(a, b, c, d, x[k + 9], S31, 3654602809);
    d = HH(d, a, b, c, x[k + 12], S32, 3873151461);
    c = HH(c, d, a, b, x[k + 15], S33, 530742520);
    b = HH(b, c, d, a, x[k + 2], S34, 3299628645);
    a = II(a, b, c, d, x[k + 0], S41, 4096336452);
    d = II(d, a, b, c, x[k + 7], S42, 1126891415);
    c = II(c, d, a, b, x[k + 14], S43, 2878612391);
    b = II(b, c, d, a, x[k + 5], S44, 4237533241);
    a = II(a, b, c, d, x[k + 12], S41, 1700485571);
    d = II(d, a, b, c, x[k + 3], S42, 2399980690);
    c = II(c, d, a, b, x[k + 10], S43, 4293915773);
    b = II(b, c, d, a, x[k + 1], S44, 2240044497);
    a = II(a, b, c, d, x[k + 8], S41, 1873313359);
    d = II(d, a, b, c, x[k + 15], S42, 4264355552);
    c = II(c, d, a, b, x[k + 6], S43, 2734768916);
    b = II(b, c, d, a, x[k + 13], S44, 1309151649);
    a = II(a, b, c, d, x[k + 4], S41, 4149444226);
    d = II(d, a, b, c, x[k + 11], S42, 3174756917);
    c = II(c, d, a, b, x[k + 2], S43, 718787259);
    b = II(b, c, d, a, x[k + 9], S44, 3951481745);
    a = AddUnsigned(a, AA);
    b = AddUnsigned(b, BB);
    c = AddUnsigned(c, CC);
    d = AddUnsigned(d, DD);
  }
  var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
  return temp.toLowerCase();
};
goog.provide("goog.net.IframeIo");
goog.provide("goog.net.IframeIo.IncrementalDataEvent");
goog.require("goog.Timer");
goog.require("goog.Uri");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.reflect");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.userAgent");
goog.net.IframeIo = function() {
  goog.net.IframeIo.base(this, "constructor");
  this.name_ = goog.net.IframeIo.getNextName_();
  this.iframesForDisposal_ = [];
  goog.net.IframeIo.instances_[this.name_] = this;
};
goog.inherits(goog.net.IframeIo, goog.events.EventTarget);
goog.net.IframeIo.instances_ = {};
goog.net.IframeIo.FRAME_NAME_PREFIX = "closure_frame";
goog.net.IframeIo.INNER_FRAME_SUFFIX = "_inner";
goog.net.IframeIo.IFRAME_DISPOSE_DELAY_MS = 2E3;
goog.net.IframeIo.counter_ = 0;
goog.net.IframeIo.form_;
goog.net.IframeIo.send = function(uri, opt_callback, opt_method, opt_noCache, opt_data) {
  var io = new goog.net.IframeIo;
  goog.events.listen(io, goog.net.EventType.READY, io.dispose, false, io);
  if (opt_callback) {
    goog.events.listen(io, goog.net.EventType.COMPLETE, opt_callback);
  }
  io.send(uri, opt_method, opt_noCache, opt_data);
};
goog.net.IframeIo.getIframeByName = function(fname) {
  return window.frames[fname];
};
goog.net.IframeIo.getInstanceByName = function(fname) {
  return goog.net.IframeIo.instances_[fname];
};
goog.net.IframeIo.handleIncrementalData = function(win, data) {
  var iframeName = goog.string.endsWith(win.name, goog.net.IframeIo.INNER_FRAME_SUFFIX) ? win.parent.name : win.name;
  var iframeIoName = iframeName.substring(0, iframeName.lastIndexOf("_"));
  var iframeIo = goog.net.IframeIo.getInstanceByName(iframeIoName);
  if (iframeIo && iframeName == iframeIo.iframeName_) {
    iframeIo.handleIncrementalData_(data);
  } else {
    var logger = goog.log.getLogger("goog.net.IframeIo");
    goog.log.info(logger, "Incremental iframe data routed for unknown iframe");
  }
};
goog.net.IframeIo.getNextName_ = function() {
  return goog.net.IframeIo.FRAME_NAME_PREFIX + goog.net.IframeIo.counter_++;
};
goog.net.IframeIo.getForm_ = function() {
  if (!goog.net.IframeIo.form_) {
    goog.net.IframeIo.form_ = (goog.dom.createDom("form"));
    goog.net.IframeIo.form_.acceptCharset = "utf-8";
    var s = goog.net.IframeIo.form_.style;
    s.position = "absolute";
    s.visibility = "hidden";
    s.top = s.left = "-10px";
    s.width = s.height = "10px";
    s.overflow = "hidden";
    goog.dom.getDocument().body.appendChild(goog.net.IframeIo.form_);
  }
  return goog.net.IframeIo.form_;
};
goog.net.IframeIo.addFormInputs_ = function(form, data) {
  var helper = goog.dom.getDomHelper(form);
  goog.structs.forEach(data, function(value, key) {
    var inp = helper.createDom("input", {"type":"hidden", "name":key, "value":value});
    form.appendChild(inp);
  });
};
goog.net.IframeIo.useIeReadyStateCodePath_ = function() {
  return goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("11");
};
goog.net.IframeIo.prototype.logger_ = goog.log.getLogger("goog.net.IframeIo");
goog.net.IframeIo.prototype.form_ = null;
goog.net.IframeIo.prototype.iframe_ = null;
goog.net.IframeIo.prototype.iframeName_ = null;
goog.net.IframeIo.prototype.nextIframeId_ = 0;
goog.net.IframeIo.prototype.active_ = false;
goog.net.IframeIo.prototype.complete_ = false;
goog.net.IframeIo.prototype.success_ = false;
goog.net.IframeIo.prototype.lastUri_ = null;
goog.net.IframeIo.prototype.lastContent_ = null;
goog.net.IframeIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.IframeIo.prototype.timeoutInterval_ = 0;
goog.net.IframeIo.prototype.timeoutId_ = null;
goog.net.IframeIo.prototype.firefoxSilentErrorTimeout_ = null;
goog.net.IframeIo.prototype.iframeDisposalTimer_ = null;
goog.net.IframeIo.prototype.errorHandled_;
goog.net.IframeIo.prototype.ignoreResponse_ = false;
goog.net.IframeIo.prototype.send = function(uri, opt_method, opt_noCache, opt_data) {
  if (this.active_) {
    throw Error("[goog.net.IframeIo] Unable to send, already active.");
  }
  var uriObj = new goog.Uri(uri);
  this.lastUri_ = uriObj;
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  if (opt_noCache) {
    uriObj.makeUnique();
  }
  goog.log.info(this.logger_, "Sending iframe request: " + uriObj + " [" + method + "]");
  this.form_ = goog.net.IframeIo.getForm_();
  if (method == "GET") {
    goog.net.IframeIo.addFormInputs_(this.form_, uriObj.getQueryData());
  }
  if (opt_data) {
    goog.net.IframeIo.addFormInputs_(this.form_, opt_data);
  }
  this.form_.action = uriObj.toString();
  this.form_.method = method;
  this.sendFormInternal_();
  this.clearForm_();
};
goog.net.IframeIo.prototype.sendFromForm = function(form, opt_uri, opt_noCache) {
  if (this.active_) {
    throw Error("[goog.net.IframeIo] Unable to send, already active.");
  }
  var uri = new goog.Uri(opt_uri || form.action);
  if (opt_noCache) {
    uri.makeUnique();
  }
  goog.log.info(this.logger_, "Sending iframe request from form: " + uri);
  this.lastUri_ = uri;
  this.form_ = form;
  this.form_.action = uri.toString();
  this.sendFormInternal_();
};
goog.net.IframeIo.prototype.abort = function(opt_failureCode) {
  if (this.active_) {
    goog.log.info(this.logger_, "Request aborted");
    var requestIframe = this.getRequestIframe();
    goog.asserts.assert(requestIframe);
    goog.events.removeAll(requestIframe);
    this.complete_ = false;
    this.active_ = false;
    this.success_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.makeReady_();
  }
};
goog.net.IframeIo.prototype.disposeInternal = function() {
  goog.log.fine(this.logger_, "Disposing iframeIo instance");
  if (this.active_) {
    goog.log.fine(this.logger_, "Aborting active request");
    this.abort();
  }
  goog.net.IframeIo.superClass_.disposeInternal.call(this);
  if (this.iframe_) {
    this.scheduleIframeDisposal_();
  }
  this.disposeForm_();
  delete this.errorChecker_;
  this.form_ = null;
  this.lastCustomError_ = this.lastContent_ = this.lastContentHtml_ = null;
  this.lastUri_ = null;
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  delete goog.net.IframeIo.instances_[this.name_];
};
goog.net.IframeIo.prototype.isComplete = function() {
  return this.complete_;
};
goog.net.IframeIo.prototype.isSuccess = function() {
  return this.success_;
};
goog.net.IframeIo.prototype.isActive = function() {
  return this.active_;
};
goog.net.IframeIo.prototype.getResponseText = function() {
  return this.lastContent_;
};
goog.net.IframeIo.prototype.getResponseHtml = function() {
  return this.lastContentHtml_;
};
goog.net.IframeIo.prototype.getResponseJson = function() {
  return goog.json.parse(this.lastContent_);
};
goog.net.IframeIo.prototype.getResponseXml = function() {
  if (!this.iframe_) {
    return null;
  }
  return this.getContentDocument_();
};
goog.net.IframeIo.prototype.getLastUri = function() {
  return this.lastUri_;
};
goog.net.IframeIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.IframeIo.prototype.getLastError = function() {
  return goog.net.ErrorCode.getDebugMessage(this.lastErrorCode_);
};
goog.net.IframeIo.prototype.getLastCustomError = function() {
  return this.lastCustomError_;
};
goog.net.IframeIo.prototype.setErrorChecker = function(fn) {
  this.errorChecker_ = fn;
};
goog.net.IframeIo.prototype.getErrorChecker = function() {
  return this.errorChecker_;
};
goog.net.IframeIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.IframeIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.IframeIo.prototype.isIgnoringResponse = function() {
  return this.ignoreResponse_;
};
goog.net.IframeIo.prototype.setIgnoreResponse = function(ignore) {
  this.ignoreResponse_ = ignore;
};
goog.net.IframeIo.prototype.sendFormInternal_ = function() {
  this.active_ = true;
  this.complete_ = false;
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.createIframe_();
  if (goog.net.IframeIo.useIeReadyStateCodePath_()) {
    this.form_.target = this.iframeName_ || "";
    this.appendIframe_();
    if (!this.ignoreResponse_) {
      goog.events.listen(this.iframe_, goog.events.EventType.READYSTATECHANGE, this.onIeReadyStateChange_, false, this);
    }
    try {
      this.errorHandled_ = false;
      this.form_.submit();
    } catch (e) {
      if (!this.ignoreResponse_) {
        goog.events.unlisten(this.iframe_, goog.events.EventType.READYSTATECHANGE, this.onIeReadyStateChange_, false, this);
      }
      this.handleError_(goog.net.ErrorCode.ACCESS_DENIED);
    }
  } else {
    goog.log.fine(this.logger_, "Setting up iframes and cloning form");
    this.appendIframe_();
    var innerFrameName = this.iframeName_ + goog.net.IframeIo.INNER_FRAME_SUFFIX;
    var doc = goog.dom.getFrameContentDocument(this.iframe_);
    var html = "\x3cbody\x3e\x3ciframe id\x3d" + innerFrameName + " name\x3d" + innerFrameName + "\x3e\x3c/iframe\x3e";
    if (document.baseURI) {
      html = '\x3chead\x3e\x3cbase href\x3d"' + goog.string.htmlEscape(document.baseURI) + '"\x3e\x3c/head\x3e' + html;
    }
    if (goog.userAgent.OPERA) {
      doc.documentElement.innerHTML = html;
    } else {
      doc.write(html);
    }
    if (!this.ignoreResponse_) {
      goog.events.listen(doc.getElementById(innerFrameName), goog.events.EventType.LOAD, this.onIframeLoaded_, false, this);
    }
    var textareas = this.form_.getElementsByTagName("textarea");
    for (var i = 0, n = textareas.length;i < n;i++) {
      var value = textareas[i].value;
      if (goog.dom.getRawTextContent(textareas[i]) != value) {
        goog.dom.setTextContent(textareas[i], value);
        textareas[i].value = value;
      }
    }
    var clone = doc.importNode(this.form_, true);
    clone.target = innerFrameName;
    clone.action = this.form_.action;
    doc.body.appendChild(clone);
    var selects = this.form_.getElementsByTagName("select");
    var clones = clone.getElementsByTagName("select");
    for (var i = 0, n = selects.length;i < n;i++) {
      var selectsOptions = selects[i].getElementsByTagName("option");
      var clonesOptions = clones[i].getElementsByTagName("option");
      for (var j = 0, m = selectsOptions.length;j < m;j++) {
        clonesOptions[j].selected = selectsOptions[j].selected;
      }
    }
    var inputs = this.form_.getElementsByTagName("input");
    var inputClones = clone.getElementsByTagName("input");
    for (var i = 0, n = inputs.length;i < n;i++) {
      if (inputs[i].type == "file") {
        if (inputs[i].value != inputClones[i].value) {
          goog.log.fine(this.logger_, "File input value not cloned properly.  Will " + "submit using original form.");
          this.form_.target = innerFrameName;
          clone = this.form_;
          break;
        }
      }
    }
    goog.log.fine(this.logger_, "Submitting form");
    try {
      this.errorHandled_ = false;
      clone.submit();
      doc.close();
      if (goog.userAgent.GECKO) {
        this.firefoxSilentErrorTimeout_ = goog.Timer.callOnce(this.testForFirefoxSilentError_, 250, this);
      }
    } catch (e) {
      goog.log.error(this.logger_, "Error when submitting form: " + goog.debug.exposeException(e));
      if (!this.ignoreResponse_) {
        goog.events.unlisten(doc.getElementById(innerFrameName), goog.events.EventType.LOAD, this.onIframeLoaded_, false, this);
      }
      doc.close();
      this.handleError_(goog.net.ErrorCode.FILE_NOT_FOUND);
    }
  }
};
goog.net.IframeIo.prototype.onIeReadyStateChange_ = function(e) {
  if (this.iframe_.readyState == "complete") {
    goog.events.unlisten(this.iframe_, goog.events.EventType.READYSTATECHANGE, this.onIeReadyStateChange_, false, this);
    var doc;
    try {
      doc = goog.dom.getFrameContentDocument(this.iframe_);
      if (goog.userAgent.IE && doc.location == "about:blank" && !navigator.onLine) {
        this.handleError_(goog.net.ErrorCode.OFFLINE);
        return;
      }
    } catch (ex) {
      this.handleError_(goog.net.ErrorCode.ACCESS_DENIED);
      return;
    }
    this.handleLoad_((doc));
  }
};
goog.net.IframeIo.prototype.onIframeLoaded_ = function(e) {
  if (goog.userAgent.OPERA && this.getContentDocument_().location == "about:blank") {
    return;
  }
  goog.events.unlisten(this.getRequestIframe(), goog.events.EventType.LOAD, this.onIframeLoaded_, false, this);
  try {
    this.handleLoad_(this.getContentDocument_());
  } catch (ex) {
    this.handleError_(goog.net.ErrorCode.ACCESS_DENIED);
  }
};
goog.net.IframeIo.prototype.handleLoad_ = function(contentDocument) {
  goog.log.fine(this.logger_, "Iframe loaded");
  this.complete_ = true;
  this.active_ = false;
  var errorCode;
  try {
    var body = contentDocument.body;
    this.lastContent_ = body.textContent || body.innerText;
    this.lastContentHtml_ = body.innerHTML;
  } catch (ex) {
    errorCode = goog.net.ErrorCode.ACCESS_DENIED;
  }
  var customError;
  if (!errorCode && typeof this.errorChecker_ == "function") {
    customError = this.errorChecker_(contentDocument);
    if (customError) {
      errorCode = goog.net.ErrorCode.CUSTOM_ERROR;
    }
  }
  goog.log.log(this.logger_, goog.log.Level.FINER, "Last content: " + this.lastContent_);
  goog.log.log(this.logger_, goog.log.Level.FINER, "Last uri: " + this.lastUri_);
  if (errorCode) {
    goog.log.fine(this.logger_, "Load event occurred but failed");
    this.handleError_(errorCode, customError);
  } else {
    goog.log.fine(this.logger_, "Load succeeded");
    this.success_ = true;
    this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.SUCCESS);
    this.makeReady_();
  }
};
goog.net.IframeIo.prototype.handleError_ = function(errorCode, opt_customError) {
  if (!this.errorHandled_) {
    this.success_ = false;
    this.active_ = false;
    this.complete_ = true;
    this.lastErrorCode_ = errorCode;
    if (errorCode == goog.net.ErrorCode.CUSTOM_ERROR) {
      this.lastCustomError_ = opt_customError;
    }
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
    this.makeReady_();
    this.errorHandled_ = true;
  }
};
goog.net.IframeIo.prototype.handleIncrementalData_ = function(data) {
  this.dispatchEvent(new goog.net.IframeIo.IncrementalDataEvent(data));
};
goog.net.IframeIo.prototype.makeReady_ = function() {
  goog.log.info(this.logger_, "Ready for new requests");
  var iframe = this.iframe_;
  this.scheduleIframeDisposal_();
  this.disposeForm_();
  this.dispatchEvent(goog.net.EventType.READY);
};
goog.net.IframeIo.prototype.createIframe_ = function() {
  goog.log.fine(this.logger_, "Creating iframe");
  this.iframeName_ = this.name_ + "_" + (this.nextIframeId_++).toString(36);
  var iframeAttributes = {"name":this.iframeName_, "id":this.iframeName_};
  if (goog.userAgent.IE && goog.userAgent.VERSION < 7) {
    iframeAttributes.src = 'javascript:""';
  }
  this.iframe_ = (goog.dom.getDomHelper(this.form_).createDom("iframe", iframeAttributes));
  var s = this.iframe_.style;
  s.visibility = "hidden";
  s.width = s.height = "10px";
  s.display = "none";
  if (!goog.userAgent.WEBKIT) {
    s.position = "absolute";
    s.top = s.left = "-10px";
  } else {
    s.marginTop = s.marginLeft = "-10px";
  }
};
goog.net.IframeIo.prototype.appendIframe_ = function() {
  goog.dom.getDomHelper(this.form_).getDocument().body.appendChild(this.iframe_);
};
goog.net.IframeIo.prototype.scheduleIframeDisposal_ = function() {
  var iframe = this.iframe_;
  if (iframe) {
    iframe.onreadystatechange = null;
    iframe.onload = null;
    iframe.onerror = null;
    this.iframesForDisposal_.push(iframe);
  }
  if (this.iframeDisposalTimer_) {
    goog.Timer.clear(this.iframeDisposalTimer_);
    this.iframeDisposalTimer_ = null;
  }
  if (goog.userAgent.GECKO || goog.userAgent.OPERA) {
    this.iframeDisposalTimer_ = goog.Timer.callOnce(this.disposeIframes_, goog.net.IframeIo.IFRAME_DISPOSE_DELAY_MS, this);
  } else {
    this.disposeIframes_();
  }
  this.iframe_ = null;
  this.iframeName_ = null;
};
goog.net.IframeIo.prototype.disposeIframes_ = function() {
  if (this.iframeDisposalTimer_) {
    goog.Timer.clear(this.iframeDisposalTimer_);
    this.iframeDisposalTimer_ = null;
  }
  while (this.iframesForDisposal_.length != 0) {
    var iframe = this.iframesForDisposal_.pop();
    goog.log.info(this.logger_, "Disposing iframe");
    goog.dom.removeNode(iframe);
  }
};
goog.net.IframeIo.prototype.clearForm_ = function() {
  if (this.form_ && this.form_ == goog.net.IframeIo.form_) {
    goog.dom.removeChildren(this.form_);
  }
};
goog.net.IframeIo.prototype.disposeForm_ = function() {
  this.clearForm_();
  this.form_ = null;
};
goog.net.IframeIo.prototype.getContentDocument_ = function() {
  if (this.iframe_) {
    return(goog.dom.getFrameContentDocument(this.getRequestIframe()));
  }
  return null;
};
goog.net.IframeIo.prototype.getRequestIframe = function() {
  if (this.iframe_) {
    return(goog.net.IframeIo.useIeReadyStateCodePath_() ? this.iframe_ : goog.dom.getFrameContentDocument(this.iframe_).getElementById(this.iframeName_ + goog.net.IframeIo.INNER_FRAME_SUFFIX));
  }
  return null;
};
goog.net.IframeIo.prototype.testForFirefoxSilentError_ = function() {
  if (this.active_) {
    var doc = this.getContentDocument_();
    if (doc && !goog.reflect.canAccessProperty(doc, "documentUri")) {
      if (!this.ignoreResponse_) {
        goog.events.unlisten(this.getRequestIframe(), goog.events.EventType.LOAD, this.onIframeLoaded_, false, this);
      }
      if (navigator.onLine) {
        goog.log.warning(this.logger_, "Silent Firefox error detected");
        this.handleError_(goog.net.ErrorCode.FF_SILENT_ERROR);
      } else {
        goog.log.warning(this.logger_, "Firefox is offline so report offline error " + "instead of silent error");
        this.handleError_(goog.net.ErrorCode.OFFLINE);
      }
      return;
    }
    this.firefoxSilentErrorTimeout_ = goog.Timer.callOnce(this.testForFirefoxSilentError_, 250, this);
  }
};
goog.net.IframeIo.IncrementalDataEvent = function(data) {
  goog.events.Event.call(this, goog.net.EventType.INCREMENTAL_DATA);
  this.data = data;
};
goog.inherits(goog.net.IframeIo.IncrementalDataEvent, goog.events.Event);
goog.provide("goog.net.Cookies");
goog.provide("goog.net.cookies");
goog.net.Cookies = function(context) {
  this.document_ = context;
};
goog.net.Cookies.MAX_COOKIE_LENGTH = 3950;
goog.net.Cookies.SPLIT_RE_ = /\s*;\s*/;
goog.net.Cookies.prototype.isEnabled = function() {
  return navigator.cookieEnabled;
};
goog.net.Cookies.prototype.isValidName = function(name) {
  return!/[;=\s]/.test(name);
};
goog.net.Cookies.prototype.isValidValue = function(value) {
  return!/[;\r\n]/.test(value);
};
goog.net.Cookies.prototype.set = function(name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {
  if (!this.isValidName(name)) {
    throw Error('Invalid cookie name "' + name + '"');
  }
  if (!this.isValidValue(value)) {
    throw Error('Invalid cookie value "' + value + '"');
  }
  if (!goog.isDef(opt_maxAge)) {
    opt_maxAge = -1;
  }
  var domainStr = opt_domain ? ";domain\x3d" + opt_domain : "";
  var pathStr = opt_path ? ";path\x3d" + opt_path : "";
  var secureStr = opt_secure ? ";secure" : "";
  var expiresStr;
  if (opt_maxAge < 0) {
    expiresStr = "";
  } else {
    if (opt_maxAge == 0) {
      var pastDate = new Date(1970, 1, 1);
      expiresStr = ";expires\x3d" + pastDate.toUTCString();
    } else {
      var futureDate = new Date(goog.now() + opt_maxAge * 1E3);
      expiresStr = ";expires\x3d" + futureDate.toUTCString();
    }
  }
  this.setCookie_(name + "\x3d" + value + domainStr + pathStr + expiresStr + secureStr);
};
goog.net.Cookies.prototype.get = function(name, opt_default) {
  var nameEq = name + "\x3d";
  var parts = this.getParts_();
  for (var i = 0, part;part = parts[i];i++) {
    if (part.lastIndexOf(nameEq, 0) == 0) {
      return part.substr(nameEq.length);
    }
    if (part == name) {
      return "";
    }
  }
  return opt_default;
};
goog.net.Cookies.prototype.remove = function(name, opt_path, opt_domain) {
  var rv = this.containsKey(name);
  this.set(name, "", 0, opt_path, opt_domain);
  return rv;
};
goog.net.Cookies.prototype.getKeys = function() {
  return this.getKeyValues_().keys;
};
goog.net.Cookies.prototype.getValues = function() {
  return this.getKeyValues_().values;
};
goog.net.Cookies.prototype.isEmpty = function() {
  return!this.getCookie_();
};
goog.net.Cookies.prototype.getCount = function() {
  var cookie = this.getCookie_();
  if (!cookie) {
    return 0;
  }
  return this.getParts_().length;
};
goog.net.Cookies.prototype.containsKey = function(key) {
  return goog.isDef(this.get(key));
};
goog.net.Cookies.prototype.containsValue = function(value) {
  var values = this.getKeyValues_().values;
  for (var i = 0;i < values.length;i++) {
    if (values[i] == value) {
      return true;
    }
  }
  return false;
};
goog.net.Cookies.prototype.clear = function() {
  var keys = this.getKeyValues_().keys;
  for (var i = keys.length - 1;i >= 0;i--) {
    this.remove(keys[i]);
  }
};
goog.net.Cookies.prototype.setCookie_ = function(s) {
  this.document_.cookie = s;
};
goog.net.Cookies.prototype.getCookie_ = function() {
  return this.document_.cookie;
};
goog.net.Cookies.prototype.getParts_ = function() {
  return(this.getCookie_() || "").split(goog.net.Cookies.SPLIT_RE_);
};
goog.net.Cookies.prototype.getKeyValues_ = function() {
  var parts = this.getParts_();
  var keys = [], values = [], index, part;
  for (var i = 0;part = parts[i];i++) {
    index = part.indexOf("\x3d");
    if (index == -1) {
      keys.push("");
      values.push(part);
    } else {
      keys.push(part.substring(0, index));
      values.push(part.substring(index + 1));
    }
  }
  return{keys:keys, values:values};
};
goog.net.cookies = new goog.net.Cookies(document);
goog.net.cookies.MAX_COOKIE_LENGTH = goog.net.Cookies.MAX_COOKIE_LENGTH;
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function dommy$attrs$class_match_QMARK_(class_name, class$, idx) {
  var and__4262__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__4262__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__4262__auto__;
  }
};
dommy.attrs.class_index = function dommy$attrs$class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__10464 = i + class$.length;
        start_from = G__10464;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function dommy$attrs$has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function dommy$attrs$add_class_BANG_() {
  var G__10469 = arguments.length;
  switch(G__10469) {
    case 2:
      return dommy.attrs.add_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.attrs.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
dommy.attrs.add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, classes) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
  if (cljs.core.seq.call(null, classes__$1)) {
    var temp__4124__auto___10483 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___10483)) {
      var class_list_10484 = temp__4124__auto___10483;
      var seq__10470_10485 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
      var chunk__10471_10486 = null;
      var count__10472_10487 = 0;
      var i__10473_10488 = 0;
      while (true) {
        if (i__10473_10488 < count__10472_10487) {
          var class_10489 = cljs.core._nth.call(null, chunk__10471_10486, i__10473_10488);
          class_list_10484.add(class_10489);
          var G__10490 = seq__10470_10485;
          var G__10491 = chunk__10471_10486;
          var G__10492 = count__10472_10487;
          var G__10493 = i__10473_10488 + 1;
          seq__10470_10485 = G__10490;
          chunk__10471_10486 = G__10491;
          count__10472_10487 = G__10492;
          i__10473_10488 = G__10493;
          continue;
        } else {
          var temp__4126__auto___10494 = cljs.core.seq.call(null, seq__10470_10485);
          if (temp__4126__auto___10494) {
            var seq__10470_10495__$1 = temp__4126__auto___10494;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10470_10495__$1)) {
              var c__5059__auto___10496 = cljs.core.chunk_first.call(null, seq__10470_10495__$1);
              var G__10497 = cljs.core.chunk_rest.call(null, seq__10470_10495__$1);
              var G__10498 = c__5059__auto___10496;
              var G__10499 = cljs.core.count.call(null, c__5059__auto___10496);
              var G__10500 = 0;
              seq__10470_10485 = G__10497;
              chunk__10471_10486 = G__10498;
              count__10472_10487 = G__10499;
              i__10473_10488 = G__10500;
              continue;
            } else {
              var class_10501 = cljs.core.first.call(null, seq__10470_10495__$1);
              class_list_10484.add(class_10501);
              var G__10502 = cljs.core.next.call(null, seq__10470_10495__$1);
              var G__10503 = null;
              var G__10504 = 0;
              var G__10505 = 0;
              seq__10470_10485 = G__10502;
              chunk__10471_10486 = G__10503;
              count__10472_10487 = G__10504;
              i__10473_10488 = G__10505;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      var class_name_10506 = elem__$1.className;
      var seq__10474_10507 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
      var chunk__10475_10508 = null;
      var count__10476_10509 = 0;
      var i__10477_10510 = 0;
      while (true) {
        if (i__10477_10510 < count__10476_10509) {
          var class_10511 = cljs.core._nth.call(null, chunk__10475_10508, i__10477_10510);
          if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_10506, class_10511))) {
          } else {
            elem__$1.className = class_name_10506 === "" ? class_10511 : [cljs.core.str(class_name_10506), cljs.core.str(" "), cljs.core.str(class_10511)].join("");
          }
          var G__10512 = seq__10474_10507;
          var G__10513 = chunk__10475_10508;
          var G__10514 = count__10476_10509;
          var G__10515 = i__10477_10510 + 1;
          seq__10474_10507 = G__10512;
          chunk__10475_10508 = G__10513;
          count__10476_10509 = G__10514;
          i__10477_10510 = G__10515;
          continue;
        } else {
          var temp__4126__auto___10516 = cljs.core.seq.call(null, seq__10474_10507);
          if (temp__4126__auto___10516) {
            var seq__10474_10517__$1 = temp__4126__auto___10516;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10474_10517__$1)) {
              var c__5059__auto___10518 = cljs.core.chunk_first.call(null, seq__10474_10517__$1);
              var G__10519 = cljs.core.chunk_rest.call(null, seq__10474_10517__$1);
              var G__10520 = c__5059__auto___10518;
              var G__10521 = cljs.core.count.call(null, c__5059__auto___10518);
              var G__10522 = 0;
              seq__10474_10507 = G__10519;
              chunk__10475_10508 = G__10520;
              count__10476_10509 = G__10521;
              i__10477_10510 = G__10522;
              continue;
            } else {
              var class_10523 = cljs.core.first.call(null, seq__10474_10517__$1);
              if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_10506, class_10523))) {
              } else {
                elem__$1.className = class_name_10506 === "" ? class_10523 : [cljs.core.str(class_name_10506), cljs.core.str(" "), cljs.core.str(class_10523)].join("");
              }
              var G__10524 = cljs.core.next.call(null, seq__10474_10517__$1);
              var G__10525 = null;
              var G__10526 = 0;
              var G__10527 = 0;
              seq__10474_10507 = G__10524;
              chunk__10475_10508 = G__10525;
              count__10476_10509 = G__10526;
              i__10477_10510 = G__10527;
              continue;
            }
          } else {
          }
        }
        break;
      }
    }
  } else {
  }
  return elem__$1;
};
dommy.attrs.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, classes, more_classes) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var seq__10478_10528 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
  var chunk__10479_10529 = null;
  var count__10480_10530 = 0;
  var i__10481_10531 = 0;
  while (true) {
    if (i__10481_10531 < count__10480_10530) {
      var c_10532 = cljs.core._nth.call(null, chunk__10479_10529, i__10481_10531);
      dommy.attrs.add_class_BANG_.call(null, elem__$1, c_10532);
      var G__10533 = seq__10478_10528;
      var G__10534 = chunk__10479_10529;
      var G__10535 = count__10480_10530;
      var G__10536 = i__10481_10531 + 1;
      seq__10478_10528 = G__10533;
      chunk__10479_10529 = G__10534;
      count__10480_10530 = G__10535;
      i__10481_10531 = G__10536;
      continue;
    } else {
      var temp__4126__auto___10537 = cljs.core.seq.call(null, seq__10478_10528);
      if (temp__4126__auto___10537) {
        var seq__10478_10538__$1 = temp__4126__auto___10537;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10478_10538__$1)) {
          var c__5059__auto___10539 = cljs.core.chunk_first.call(null, seq__10478_10538__$1);
          var G__10540 = cljs.core.chunk_rest.call(null, seq__10478_10538__$1);
          var G__10541 = c__5059__auto___10539;
          var G__10542 = cljs.core.count.call(null, c__5059__auto___10539);
          var G__10543 = 0;
          seq__10478_10528 = G__10540;
          chunk__10479_10529 = G__10541;
          count__10480_10530 = G__10542;
          i__10481_10531 = G__10543;
          continue;
        } else {
          var c_10544 = cljs.core.first.call(null, seq__10478_10538__$1);
          dommy.attrs.add_class_BANG_.call(null, elem__$1, c_10544);
          var G__10545 = cljs.core.next.call(null, seq__10478_10538__$1);
          var G__10546 = null;
          var G__10547 = 0;
          var G__10548 = 0;
          seq__10478_10528 = G__10545;
          chunk__10479_10529 = G__10546;
          count__10480_10530 = G__10547;
          i__10481_10531 = G__10548;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem__$1;
};
dommy.attrs.add_class_BANG_.cljs$lang$applyTo = function(seq10465) {
  var G__10466 = cljs.core.first.call(null, seq10465);
  var seq10465__$1 = cljs.core.next.call(null, seq10465);
  var G__10467 = cljs.core.first.call(null, seq10465__$1);
  var seq10465__$2 = cljs.core.next.call(null, seq10465__$1);
  return dommy.attrs.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10466, G__10467, seq10465__$2);
};
dommy.attrs.add_class_BANG_.cljs$lang$maxFixedArity = 2;
dommy.attrs.remove_class_str = function dommy$attrs$remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__10549 = function() {
        var end = i + class$.length;
        return[cljs.core.str(end < class_len ? [cljs.core.str(class_name.substring(0, i)), cljs.core.str(class_name.substr(end + 1))].join("") : class_name.substring(0, i - 1))].join("");
      }();
      class_name = G__10549;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function dommy$attrs$remove_class_BANG_() {
  var G__10554 = arguments.length;
  switch(G__10554) {
    case 2:
      return dommy.attrs.remove_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.attrs.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
dommy.attrs.remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto___10560 = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto___10560)) {
    var class_list_10561 = temp__4124__auto___10560;
    class_list_10561.remove(class$__$1);
  } else {
    var class_name_10562 = elem__$1.className;
    var new_class_name_10563 = dommy.attrs.remove_class_str.call(null, class_name_10562, class$__$1);
    if (class_name_10562 === new_class_name_10563) {
    } else {
      elem__$1.className = new_class_name_10563;
    }
  }
  return elem__$1;
};
dommy.attrs.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, class$, classes) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var seq__10555 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
  var chunk__10556 = null;
  var count__10557 = 0;
  var i__10558 = 0;
  while (true) {
    if (i__10558 < count__10557) {
      var c = cljs.core._nth.call(null, chunk__10556, i__10558);
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, c);
      var G__10564 = seq__10555;
      var G__10565 = chunk__10556;
      var G__10566 = count__10557;
      var G__10567 = i__10558 + 1;
      seq__10555 = G__10564;
      chunk__10556 = G__10565;
      count__10557 = G__10566;
      i__10558 = G__10567;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__10555);
      if (temp__4126__auto__) {
        var seq__10555__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10555__$1)) {
          var c__5059__auto__ = cljs.core.chunk_first.call(null, seq__10555__$1);
          var G__10568 = cljs.core.chunk_rest.call(null, seq__10555__$1);
          var G__10569 = c__5059__auto__;
          var G__10570 = cljs.core.count.call(null, c__5059__auto__);
          var G__10571 = 0;
          seq__10555 = G__10568;
          chunk__10556 = G__10569;
          count__10557 = G__10570;
          i__10558 = G__10571;
          continue;
        } else {
          var c = cljs.core.first.call(null, seq__10555__$1);
          dommy.attrs.remove_class_BANG_.call(null, elem__$1, c);
          var G__10572 = cljs.core.next.call(null, seq__10555__$1);
          var G__10573 = null;
          var G__10574 = 0;
          var G__10575 = 0;
          seq__10555 = G__10572;
          chunk__10556 = G__10573;
          count__10557 = G__10574;
          i__10558 = G__10575;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_.cljs$lang$applyTo = function(seq10550) {
  var G__10551 = cljs.core.first.call(null, seq10550);
  var seq10550__$1 = cljs.core.next.call(null, seq10550);
  var G__10552 = cljs.core.first.call(null, seq10550__$1);
  var seq10550__$2 = cljs.core.next.call(null, seq10550__$1);
  return dommy.attrs.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10551, G__10552, seq10550__$2);
};
dommy.attrs.remove_class_BANG_.cljs$lang$maxFixedArity = 2;
dommy.attrs.toggle_class_BANG_ = function dommy$attrs$toggle_class_BANG_() {
  var G__10577 = arguments.length;
  switch(G__10577) {
    case 2:
      return dommy.attrs.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.attrs.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.attrs.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto___10579 = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto___10579)) {
    var class_list_10580 = temp__4124__auto___10579;
    class_list_10580.toggle(class$__$1);
  } else {
    dommy.attrs.toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
  }
  return elem__$1;
};
dommy.attrs.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, class$, add_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (add_QMARK_) {
    dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
  } else {
    dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
  }
  return elem__$1;
};
dommy.attrs.toggle_class_BANG_.cljs$lang$maxFixedArity = 3;
dommy.attrs.style_str = function dommy$attrs$style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__10583) {
      var vec__10584 = p__10583;
      var k = cljs.core.nth.call(null, vec__10584, 0, null);
      var v = cljs.core.nth.call(null, vec__10584, 1, null);
      return[cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str(":"), cljs.core.str(cljs.core.name.call(null, v)), cljs.core.str(";")].join("");
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function dommy$attrs$set_style_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.attrs.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
dommy.attrs.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var style = elem__$1.style;
  var seq__10587_10593 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
  var chunk__10588_10594 = null;
  var count__10589_10595 = 0;
  var i__10590_10596 = 0;
  while (true) {
    if (i__10590_10596 < count__10589_10595) {
      var vec__10591_10597 = cljs.core._nth.call(null, chunk__10588_10594, i__10590_10596);
      var k_10598 = cljs.core.nth.call(null, vec__10591_10597, 0, null);
      var v_10599 = cljs.core.nth.call(null, vec__10591_10597, 1, null);
      style[cljs.core.name.call(null, k_10598)] = v_10599;
      var G__10600 = seq__10587_10593;
      var G__10601 = chunk__10588_10594;
      var G__10602 = count__10589_10595;
      var G__10603 = i__10590_10596 + 1;
      seq__10587_10593 = G__10600;
      chunk__10588_10594 = G__10601;
      count__10589_10595 = G__10602;
      i__10590_10596 = G__10603;
      continue;
    } else {
      var temp__4126__auto___10604 = cljs.core.seq.call(null, seq__10587_10593);
      if (temp__4126__auto___10604) {
        var seq__10587_10605__$1 = temp__4126__auto___10604;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10587_10605__$1)) {
          var c__5059__auto___10606 = cljs.core.chunk_first.call(null, seq__10587_10605__$1);
          var G__10607 = cljs.core.chunk_rest.call(null, seq__10587_10605__$1);
          var G__10608 = c__5059__auto___10606;
          var G__10609 = cljs.core.count.call(null, c__5059__auto___10606);
          var G__10610 = 0;
          seq__10587_10593 = G__10607;
          chunk__10588_10594 = G__10608;
          count__10589_10595 = G__10609;
          i__10590_10596 = G__10610;
          continue;
        } else {
          var vec__10592_10611 = cljs.core.first.call(null, seq__10587_10605__$1);
          var k_10612 = cljs.core.nth.call(null, vec__10592_10611, 0, null);
          var v_10613 = cljs.core.nth.call(null, vec__10592_10611, 1, null);
          style[cljs.core.name.call(null, k_10612)] = v_10613;
          var G__10614 = cljs.core.next.call(null, seq__10587_10605__$1);
          var G__10615 = null;
          var G__10616 = 0;
          var G__10617 = 0;
          seq__10587_10593 = G__10614;
          chunk__10588_10594 = G__10615;
          count__10589_10595 = G__10616;
          i__10590_10596 = G__10617;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem__$1;
};
dommy.attrs.set_style_BANG_.cljs$lang$maxFixedArity = 1;
dommy.attrs.set_style_BANG_.cljs$lang$applyTo = function(seq10585) {
  var G__10586 = cljs.core.first.call(null, seq10585);
  var seq10585__$1 = cljs.core.next.call(null, seq10585);
  return dommy.attrs.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10586, seq10585__$1);
};
dommy.attrs.style = function dommy$attrs$style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -505765866, null)))].join(""));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function dommy$attrs$set_px_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.attrs.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
dommy.attrs.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var seq__10620_10626 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
  var chunk__10621_10627 = null;
  var count__10622_10628 = 0;
  var i__10623_10629 = 0;
  while (true) {
    if (i__10623_10629 < count__10622_10628) {
      var vec__10624_10630 = cljs.core._nth.call(null, chunk__10621_10627, i__10623_10629);
      var k_10631 = cljs.core.nth.call(null, vec__10624_10630, 0, null);
      var v_10632 = cljs.core.nth.call(null, vec__10624_10630, 1, null);
      dommy.attrs.set_style_BANG_.call(null, elem__$1, k_10631, [cljs.core.str(v_10632), cljs.core.str("px")].join(""));
      var G__10633 = seq__10620_10626;
      var G__10634 = chunk__10621_10627;
      var G__10635 = count__10622_10628;
      var G__10636 = i__10623_10629 + 1;
      seq__10620_10626 = G__10633;
      chunk__10621_10627 = G__10634;
      count__10622_10628 = G__10635;
      i__10623_10629 = G__10636;
      continue;
    } else {
      var temp__4126__auto___10637 = cljs.core.seq.call(null, seq__10620_10626);
      if (temp__4126__auto___10637) {
        var seq__10620_10638__$1 = temp__4126__auto___10637;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10620_10638__$1)) {
          var c__5059__auto___10639 = cljs.core.chunk_first.call(null, seq__10620_10638__$1);
          var G__10640 = cljs.core.chunk_rest.call(null, seq__10620_10638__$1);
          var G__10641 = c__5059__auto___10639;
          var G__10642 = cljs.core.count.call(null, c__5059__auto___10639);
          var G__10643 = 0;
          seq__10620_10626 = G__10640;
          chunk__10621_10627 = G__10641;
          count__10622_10628 = G__10642;
          i__10623_10629 = G__10643;
          continue;
        } else {
          var vec__10625_10644 = cljs.core.first.call(null, seq__10620_10638__$1);
          var k_10645 = cljs.core.nth.call(null, vec__10625_10644, 0, null);
          var v_10646 = cljs.core.nth.call(null, vec__10625_10644, 1, null);
          dommy.attrs.set_style_BANG_.call(null, elem__$1, k_10645, [cljs.core.str(v_10646), cljs.core.str("px")].join(""));
          var G__10647 = cljs.core.next.call(null, seq__10620_10638__$1);
          var G__10648 = null;
          var G__10649 = 0;
          var G__10650 = 0;
          seq__10620_10626 = G__10647;
          chunk__10621_10627 = G__10648;
          count__10622_10628 = G__10649;
          i__10623_10629 = G__10650;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem__$1;
};
dommy.attrs.set_px_BANG_.cljs$lang$maxFixedArity = 1;
dommy.attrs.set_px_BANG_.cljs$lang$applyTo = function(seq10618) {
  var G__10619 = cljs.core.first.call(null, seq10618);
  var seq10618__$1 = cljs.core.next.call(null, seq10618);
  return dommy.attrs.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10619, seq10618__$1);
};
dommy.attrs.px = function dommy$attrs$px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function dommy$attrs$set_attr_BANG_() {
  var G__10656 = arguments.length;
  switch(G__10656) {
    case 2:
      return dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5326__auto__);
  }
};
dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return dommy.attrs.set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
};
dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, k, v) {
  if (cljs.core.truth_(v)) {
    if (cljs.core.fn_QMARK_.call(null, v)) {
      var G__10657 = dommy.template.__GT_node_like.call(null, elem);
      G__10657[cljs.core.name.call(null, k)] = v;
      return G__10657;
    } else {
      var G__10658 = dommy.template.__GT_node_like.call(null, elem);
      G__10658.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", -496642736) ? dommy.attrs.style_str.call(null, v) : v);
      return G__10658;
    }
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, k, v, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var seq__10659_10666 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
  var chunk__10660_10667 = null;
  var count__10661_10668 = 0;
  var i__10662_10669 = 0;
  while (true) {
    if (i__10662_10669 < count__10661_10668) {
      var vec__10663_10670 = cljs.core._nth.call(null, chunk__10660_10667, i__10662_10669);
      var k_10671__$1 = cljs.core.nth.call(null, vec__10663_10670, 0, null);
      var v_10672__$1 = cljs.core.nth.call(null, vec__10663_10670, 1, null);
      dommy.attrs.set_attr_BANG_.call(null, elem__$1, k_10671__$1, v_10672__$1);
      var G__10673 = seq__10659_10666;
      var G__10674 = chunk__10660_10667;
      var G__10675 = count__10661_10668;
      var G__10676 = i__10662_10669 + 1;
      seq__10659_10666 = G__10673;
      chunk__10660_10667 = G__10674;
      count__10661_10668 = G__10675;
      i__10662_10669 = G__10676;
      continue;
    } else {
      var temp__4126__auto___10677 = cljs.core.seq.call(null, seq__10659_10666);
      if (temp__4126__auto___10677) {
        var seq__10659_10678__$1 = temp__4126__auto___10677;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10659_10678__$1)) {
          var c__5059__auto___10679 = cljs.core.chunk_first.call(null, seq__10659_10678__$1);
          var G__10680 = cljs.core.chunk_rest.call(null, seq__10659_10678__$1);
          var G__10681 = c__5059__auto___10679;
          var G__10682 = cljs.core.count.call(null, c__5059__auto___10679);
          var G__10683 = 0;
          seq__10659_10666 = G__10680;
          chunk__10660_10667 = G__10681;
          count__10661_10668 = G__10682;
          i__10662_10669 = G__10683;
          continue;
        } else {
          var vec__10664_10684 = cljs.core.first.call(null, seq__10659_10678__$1);
          var k_10685__$1 = cljs.core.nth.call(null, vec__10664_10684, 0, null);
          var v_10686__$1 = cljs.core.nth.call(null, vec__10664_10684, 1, null);
          dommy.attrs.set_attr_BANG_.call(null, elem__$1, k_10685__$1, v_10686__$1);
          var G__10687 = cljs.core.next.call(null, seq__10659_10678__$1);
          var G__10688 = null;
          var G__10689 = 0;
          var G__10690 = 0;
          seq__10659_10666 = G__10687;
          chunk__10660_10667 = G__10688;
          count__10661_10668 = G__10689;
          i__10662_10669 = G__10690;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem__$1;
};
dommy.attrs.set_attr_BANG_.cljs$lang$applyTo = function(seq10651) {
  var G__10652 = cljs.core.first.call(null, seq10651);
  var seq10651__$1 = cljs.core.next.call(null, seq10651);
  var G__10653 = cljs.core.first.call(null, seq10651__$1);
  var seq10651__$2 = cljs.core.next.call(null, seq10651__$1);
  var G__10654 = cljs.core.first.call(null, seq10651__$2);
  var seq10651__$3 = cljs.core.next.call(null, seq10651__$2);
  return dommy.attrs.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10652, G__10653, G__10654, seq10651__$3);
};
dommy.attrs.set_attr_BANG_.cljs$lang$maxFixedArity = 3;
dommy.attrs.remove_attr_BANG_ = function dommy$attrs$remove_attr_BANG_() {
  var G__10695 = arguments.length;
  switch(G__10695) {
    case 2:
      return dommy.attrs.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.attrs.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
dommy.attrs.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", -2030961996), null, new cljs.core.Keyword(null, "classes", "classes", 2037804510), null], null), null)).call(null, k))) {
    elem__$1.className = "";
  } else {
    elem__$1.removeAttribute(cljs.core.name.call(null, k));
  }
  return elem__$1;
};
dommy.attrs.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, k, ks) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var seq__10696_10701 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
  var chunk__10697_10702 = null;
  var count__10698_10703 = 0;
  var i__10699_10704 = 0;
  while (true) {
    if (i__10699_10704 < count__10698_10703) {
      var k_10705__$1 = cljs.core._nth.call(null, chunk__10697_10702, i__10699_10704);
      dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k_10705__$1);
      var G__10706 = seq__10696_10701;
      var G__10707 = chunk__10697_10702;
      var G__10708 = count__10698_10703;
      var G__10709 = i__10699_10704 + 1;
      seq__10696_10701 = G__10706;
      chunk__10697_10702 = G__10707;
      count__10698_10703 = G__10708;
      i__10699_10704 = G__10709;
      continue;
    } else {
      var temp__4126__auto___10710 = cljs.core.seq.call(null, seq__10696_10701);
      if (temp__4126__auto___10710) {
        var seq__10696_10711__$1 = temp__4126__auto___10710;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10696_10711__$1)) {
          var c__5059__auto___10712 = cljs.core.chunk_first.call(null, seq__10696_10711__$1);
          var G__10713 = cljs.core.chunk_rest.call(null, seq__10696_10711__$1);
          var G__10714 = c__5059__auto___10712;
          var G__10715 = cljs.core.count.call(null, c__5059__auto___10712);
          var G__10716 = 0;
          seq__10696_10701 = G__10713;
          chunk__10697_10702 = G__10714;
          count__10698_10703 = G__10715;
          i__10699_10704 = G__10716;
          continue;
        } else {
          var k_10717__$1 = cljs.core.first.call(null, seq__10696_10711__$1);
          dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k_10717__$1);
          var G__10718 = cljs.core.next.call(null, seq__10696_10711__$1);
          var G__10719 = null;
          var G__10720 = 0;
          var G__10721 = 0;
          seq__10696_10701 = G__10718;
          chunk__10697_10702 = G__10719;
          count__10698_10703 = G__10720;
          i__10699_10704 = G__10721;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem__$1;
};
dommy.attrs.remove_attr_BANG_.cljs$lang$applyTo = function(seq10691) {
  var G__10692 = cljs.core.first.call(null, seq10691);
  var seq10691__$1 = cljs.core.next.call(null, seq10691);
  var G__10693 = cljs.core.first.call(null, seq10691__$1);
  var seq10691__$2 = cljs.core.next.call(null, seq10691__$1);
  return dommy.attrs.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10692, G__10693, seq10691__$2);
};
dommy.attrs.remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
dommy.attrs.attr = function dommy$attrs$attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function dommy$attrs$toggle_attr_BANG_() {
  var G__10723 = arguments.length;
  switch(G__10723) {
    case 2:
      return dommy.attrs.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.attrs.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.attrs.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return dommy.attrs.toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
};
dommy.attrs.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, k, add_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (add_QMARK_) {
    return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
  } else {
    return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
  }
};
dommy.attrs.toggle_attr_BANG_.cljs$lang$maxFixedArity = 3;
dommy.attrs.hidden_QMARK_ = function dommy$attrs$hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function dommy$attrs$toggle_BANG_() {
  var G__10726 = arguments.length;
  switch(G__10726) {
    case 2:
      return dommy.attrs.toggle_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return dommy.attrs.toggle_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.attrs.toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, show_QMARK_) {
  var G__10727 = dommy.template.__GT_node_like.call(null, elem);
  G__10727.style.display = show_QMARK_ ? "" : "none";
  return G__10727;
};
dommy.attrs.toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
  return elem__$1;
};
dommy.attrs.toggle_BANG_.cljs$lang$maxFixedArity = 2;
dommy.attrs.hide_BANG_ = function dommy$attrs$hide_BANG_(elem) {
  var G__10730 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__10730, false);
  return G__10730;
};
dommy.attrs.show_BANG_ = function dommy$attrs$show_BANG_(elem) {
  var G__10732 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__10732, true);
  return G__10732;
};
dommy.attrs.bounding_client_rect = function dommy$attrs$bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__10734 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__10734["constructor"] = Object;
    return G__10734;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
};
dommy.attrs.scroll_into_view = function dommy$attrs$scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", -1856271961)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj10738 = {};
  return obj10738;
}();
dommy.template._elem = function dommy$template$_elem(this$) {
  if (function() {
    var and__4262__auto__ = this$;
    if (and__4262__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__4262__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__4910__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4274__auto__ = dommy.template._elem[goog.typeOf(x__4910__auto__)];
      if (or__4274__auto__) {
        return or__4274__auto__;
      } else {
        var or__4274__auto____$1 = dommy.template._elem["_"];
        if (or__4274__auto____$1) {
          return or__4274__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function dommy$template$next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function dommy$template$base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : node_str;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_10741 = node_str.substring(base_idx);
    while (true) {
      var next_idx_10742 = dommy.template.next_css_index.call(null, str_10741, 1);
      var frag_10743 = next_idx_10742 >= 0 ? str_10741.substring(0, next_idx_10742) : str_10741;
      var G__10740_10744 = frag_10743.charAt(0);
      switch(G__10740_10744) {
        case ".":
          dommy.attrs.add_class_BANG_.call(null, node, frag_10743.substring(1));
          break;
        case "#":
          node.setAttribute("id", frag_10743.substring(1));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(frag_10743.charAt(0))].join(""));;
      }
      if (next_idx_10742 >= 0) {
        var G__10746 = str_10741.substring(next_idx_10742);
        str_10741 = G__10746;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function dommy$template$throw_unable_to_make_node(node_data) {
  throw[cljs.core.str("Don't know how to make node from: "), cljs.core.str(cljs.core.pr_str.call(null, node_data))].join("");
};
dommy.template.__GT_document_fragment = function dommy$template$__GT_document_fragment() {
  var G__10748 = arguments.length;
  switch(G__10748) {
    case 1:
      return dommy.template.__GT_document_fragment.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.template.__GT_document_fragment.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.template.__GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = function(data) {
  return dommy.template.__GT_document_fragment.call(null, document.createDocumentFragment(), data);
};
dommy.template.__GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = function(result_frag, data) {
  if (function() {
    var G__10749 = data;
    if (G__10749) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__10749.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__10749.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10749);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10749);
    }
  }()) {
    result_frag.appendChild(dommy.template._elem.call(null, data));
    return result_frag;
  } else {
    if (cljs.core.seq_QMARK_.call(null, data)) {
      var seq__10750_10755 = cljs.core.seq.call(null, data);
      var chunk__10751_10756 = null;
      var count__10752_10757 = 0;
      var i__10753_10758 = 0;
      while (true) {
        if (i__10753_10758 < count__10752_10757) {
          var child_10759 = cljs.core._nth.call(null, chunk__10751_10756, i__10753_10758);
          dommy.template.__GT_document_fragment.call(null, result_frag, child_10759);
          var G__10760 = seq__10750_10755;
          var G__10761 = chunk__10751_10756;
          var G__10762 = count__10752_10757;
          var G__10763 = i__10753_10758 + 1;
          seq__10750_10755 = G__10760;
          chunk__10751_10756 = G__10761;
          count__10752_10757 = G__10762;
          i__10753_10758 = G__10763;
          continue;
        } else {
          var temp__4126__auto___10764 = cljs.core.seq.call(null, seq__10750_10755);
          if (temp__4126__auto___10764) {
            var seq__10750_10765__$1 = temp__4126__auto___10764;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10750_10765__$1)) {
              var c__5059__auto___10766 = cljs.core.chunk_first.call(null, seq__10750_10765__$1);
              var G__10767 = cljs.core.chunk_rest.call(null, seq__10750_10765__$1);
              var G__10768 = c__5059__auto___10766;
              var G__10769 = cljs.core.count.call(null, c__5059__auto___10766);
              var G__10770 = 0;
              seq__10750_10755 = G__10767;
              chunk__10751_10756 = G__10768;
              count__10752_10757 = G__10769;
              i__10753_10758 = G__10770;
              continue;
            } else {
              var child_10771 = cljs.core.first.call(null, seq__10750_10765__$1);
              dommy.template.__GT_document_fragment.call(null, result_frag, child_10771);
              var G__10772 = cljs.core.next.call(null, seq__10750_10765__$1);
              var G__10773 = null;
              var G__10774 = 0;
              var G__10775 = 0;
              seq__10750_10755 = G__10772;
              chunk__10751_10756 = G__10773;
              count__10752_10757 = G__10774;
              i__10753_10758 = G__10775;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return result_frag;
    } else {
      if (data == null) {
        return result_frag;
      } else {
        return dommy.template.throw_unable_to_make_node.call(null, data);
      }
    }
  }
};
dommy.template.__GT_document_fragment.cljs$lang$maxFixedArity = 2;
dommy.template.__GT_node_like = function dommy$template$__GT_node_like(data) {
  if (function() {
    var G__10777 = data;
    if (G__10777) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__10777.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__10777.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10777);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10777);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function dommy$template$compound_element(p__10778) {
  var vec__10798 = p__10778;
  var tag_name = cljs.core.nth.call(null, vec__10798, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__10798, 1, null);
  var children = cljs.core.nthnext.call(null, vec__10798, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__10800 = maybe_attrs;
    if (G__10800) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__10800.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__10800.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10800);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10800);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__10801_10817 = cljs.core.seq.call(null, attrs);
  var chunk__10802_10818 = null;
  var count__10803_10819 = 0;
  var i__10804_10820 = 0;
  while (true) {
    if (i__10804_10820 < count__10803_10819) {
      var vec__10805_10821 = cljs.core._nth.call(null, chunk__10802_10818, i__10804_10820);
      var k_10822 = cljs.core.nth.call(null, vec__10805_10821, 0, null);
      var v_10823 = cljs.core.nth.call(null, vec__10805_10821, 1, null);
      var G__10806_10824 = k_10822 instanceof cljs.core.Keyword ? k_10822.fqn : null;
      switch(G__10806_10824) {
        case "classes":
          var seq__10807_10826 = cljs.core.seq.call(null, v_10823);
          var chunk__10808_10827 = null;
          var count__10809_10828 = 0;
          var i__10810_10829 = 0;
          while (true) {
            if (i__10810_10829 < count__10809_10828) {
              var c_10830 = cljs.core._nth.call(null, chunk__10808_10827, i__10810_10829);
              dommy.attrs.add_class_BANG_.call(null, n, c_10830);
              var G__10831 = seq__10807_10826;
              var G__10832 = chunk__10808_10827;
              var G__10833 = count__10809_10828;
              var G__10834 = i__10810_10829 + 1;
              seq__10807_10826 = G__10831;
              chunk__10808_10827 = G__10832;
              count__10809_10828 = G__10833;
              i__10810_10829 = G__10834;
              continue;
            } else {
              var temp__4126__auto___10835 = cljs.core.seq.call(null, seq__10807_10826);
              if (temp__4126__auto___10835) {
                var seq__10807_10836__$1 = temp__4126__auto___10835;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__10807_10836__$1)) {
                  var c__5059__auto___10837 = cljs.core.chunk_first.call(null, seq__10807_10836__$1);
                  var G__10838 = cljs.core.chunk_rest.call(null, seq__10807_10836__$1);
                  var G__10839 = c__5059__auto___10837;
                  var G__10840 = cljs.core.count.call(null, c__5059__auto___10837);
                  var G__10841 = 0;
                  seq__10807_10826 = G__10838;
                  chunk__10808_10827 = G__10839;
                  count__10809_10828 = G__10840;
                  i__10810_10829 = G__10841;
                  continue;
                } else {
                  var c_10842 = cljs.core.first.call(null, seq__10807_10836__$1);
                  dommy.attrs.add_class_BANG_.call(null, n, c_10842);
                  var G__10843 = cljs.core.next.call(null, seq__10807_10836__$1);
                  var G__10844 = null;
                  var G__10845 = 0;
                  var G__10846 = 0;
                  seq__10807_10826 = G__10843;
                  chunk__10808_10827 = G__10844;
                  count__10809_10828 = G__10845;
                  i__10810_10829 = G__10846;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          break;
        case "class":
          dommy.attrs.add_class_BANG_.call(null, n, v_10823);
          break;
        default:
          dommy.attrs.set_attr_BANG_.call(null, n, k_10822, v_10823);
      }
      var G__10847 = seq__10801_10817;
      var G__10848 = chunk__10802_10818;
      var G__10849 = count__10803_10819;
      var G__10850 = i__10804_10820 + 1;
      seq__10801_10817 = G__10847;
      chunk__10802_10818 = G__10848;
      count__10803_10819 = G__10849;
      i__10804_10820 = G__10850;
      continue;
    } else {
      var temp__4126__auto___10851 = cljs.core.seq.call(null, seq__10801_10817);
      if (temp__4126__auto___10851) {
        var seq__10801_10852__$1 = temp__4126__auto___10851;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10801_10852__$1)) {
          var c__5059__auto___10853 = cljs.core.chunk_first.call(null, seq__10801_10852__$1);
          var G__10854 = cljs.core.chunk_rest.call(null, seq__10801_10852__$1);
          var G__10855 = c__5059__auto___10853;
          var G__10856 = cljs.core.count.call(null, c__5059__auto___10853);
          var G__10857 = 0;
          seq__10801_10817 = G__10854;
          chunk__10802_10818 = G__10855;
          count__10803_10819 = G__10856;
          i__10804_10820 = G__10857;
          continue;
        } else {
          var vec__10811_10858 = cljs.core.first.call(null, seq__10801_10852__$1);
          var k_10859 = cljs.core.nth.call(null, vec__10811_10858, 0, null);
          var v_10860 = cljs.core.nth.call(null, vec__10811_10858, 1, null);
          var G__10812_10861 = k_10859 instanceof cljs.core.Keyword ? k_10859.fqn : null;
          switch(G__10812_10861) {
            case "classes":
              var seq__10813_10863 = cljs.core.seq.call(null, v_10860);
              var chunk__10814_10864 = null;
              var count__10815_10865 = 0;
              var i__10816_10866 = 0;
              while (true) {
                if (i__10816_10866 < count__10815_10865) {
                  var c_10867 = cljs.core._nth.call(null, chunk__10814_10864, i__10816_10866);
                  dommy.attrs.add_class_BANG_.call(null, n, c_10867);
                  var G__10868 = seq__10813_10863;
                  var G__10869 = chunk__10814_10864;
                  var G__10870 = count__10815_10865;
                  var G__10871 = i__10816_10866 + 1;
                  seq__10813_10863 = G__10868;
                  chunk__10814_10864 = G__10869;
                  count__10815_10865 = G__10870;
                  i__10816_10866 = G__10871;
                  continue;
                } else {
                  var temp__4126__auto___10872__$1 = cljs.core.seq.call(null, seq__10813_10863);
                  if (temp__4126__auto___10872__$1) {
                    var seq__10813_10873__$1 = temp__4126__auto___10872__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__10813_10873__$1)) {
                      var c__5059__auto___10874 = cljs.core.chunk_first.call(null, seq__10813_10873__$1);
                      var G__10875 = cljs.core.chunk_rest.call(null, seq__10813_10873__$1);
                      var G__10876 = c__5059__auto___10874;
                      var G__10877 = cljs.core.count.call(null, c__5059__auto___10874);
                      var G__10878 = 0;
                      seq__10813_10863 = G__10875;
                      chunk__10814_10864 = G__10876;
                      count__10815_10865 = G__10877;
                      i__10816_10866 = G__10878;
                      continue;
                    } else {
                      var c_10879 = cljs.core.first.call(null, seq__10813_10873__$1);
                      dommy.attrs.add_class_BANG_.call(null, n, c_10879);
                      var G__10880 = cljs.core.next.call(null, seq__10813_10873__$1);
                      var G__10881 = null;
                      var G__10882 = 0;
                      var G__10883 = 0;
                      seq__10813_10863 = G__10880;
                      chunk__10814_10864 = G__10881;
                      count__10815_10865 = G__10882;
                      i__10816_10866 = G__10883;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              break;
            case "class":
              dommy.attrs.add_class_BANG_.call(null, n, v_10860);
              break;
            default:
              dommy.attrs.set_attr_BANG_.call(null, n, k_10859, v_10860);
          }
          var G__10884 = cljs.core.next.call(null, seq__10801_10852__$1);
          var G__10885 = null;
          var G__10886 = 0;
          var G__10887 = 0;
          seq__10801_10817 = G__10884;
          chunk__10802_10818 = G__10885;
          count__10803_10819 = G__10886;
          i__10804_10820 = G__10887;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode([cljs.core.str(this$)].join(""));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode([cljs.core.str(this$)].join(""));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e10888) {
  if (e10888 instanceof ReferenceError) {
    var __10889 = e10888;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    throw e10888;
  }
}
dommy.template.node = function dommy$template$node(data) {
  if (function() {
    var G__10891 = data;
    if (G__10891) {
      var bit__4948__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4274__auto__ = bit__4948__auto__;
        if (cljs.core.truth_(or__4274__auto__)) {
          return or__4274__auto__;
        } else {
          return G__10891.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__10891.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10891);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10891);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function dommy$template$html__GT_nodes(html) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dommy$utils$dissoc_in(m, p__10459) {
  var vec__10461 = p__10459;
  var k = cljs.core.nth.call(null, vec__10461, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__10461, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__4262__auto__ = ks;
      if (cljs.core.truth_(and__4262__auto__)) {
        return dommy$utils$dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__4262__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function dommy$utils$__GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function dommy$core$set_html_BANG_(elem, html) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html;
  return elem__$1;
};
dommy.core.html = function dommy$core$html(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function dommy$core$set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function dommy$core$text(elem) {
  var or__4274__auto__ = elem.textContent;
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function dommy$core$value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function dommy$core$set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function dommy$core$append_BANG_() {
  var G__10108 = arguments.length;
  switch(G__10108) {
    case 2:
      return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$2 = function(parent, child) {
  var G__10109 = dommy.template.__GT_node_like.call(null, parent);
  G__10109.appendChild(dommy.template.__GT_node_like.call(null, child));
  return G__10109;
};
dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(parent, child, more_children) {
  var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
  var seq__10110_10115 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
  var chunk__10111_10116 = null;
  var count__10112_10117 = 0;
  var i__10113_10118 = 0;
  while (true) {
    if (i__10113_10118 < count__10112_10117) {
      var c_10119 = cljs.core._nth.call(null, chunk__10111_10116, i__10113_10118);
      dommy.core.append_BANG_.call(null, parent__$1, c_10119);
      var G__10120 = seq__10110_10115;
      var G__10121 = chunk__10111_10116;
      var G__10122 = count__10112_10117;
      var G__10123 = i__10113_10118 + 1;
      seq__10110_10115 = G__10120;
      chunk__10111_10116 = G__10121;
      count__10112_10117 = G__10122;
      i__10113_10118 = G__10123;
      continue;
    } else {
      var temp__4126__auto___10124 = cljs.core.seq.call(null, seq__10110_10115);
      if (temp__4126__auto___10124) {
        var seq__10110_10125__$1 = temp__4126__auto___10124;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10110_10125__$1)) {
          var c__5059__auto___10126 = cljs.core.chunk_first.call(null, seq__10110_10125__$1);
          var G__10127 = cljs.core.chunk_rest.call(null, seq__10110_10125__$1);
          var G__10128 = c__5059__auto___10126;
          var G__10129 = cljs.core.count.call(null, c__5059__auto___10126);
          var G__10130 = 0;
          seq__10110_10115 = G__10127;
          chunk__10111_10116 = G__10128;
          count__10112_10117 = G__10129;
          i__10113_10118 = G__10130;
          continue;
        } else {
          var c_10131 = cljs.core.first.call(null, seq__10110_10125__$1);
          dommy.core.append_BANG_.call(null, parent__$1, c_10131);
          var G__10132 = cljs.core.next.call(null, seq__10110_10125__$1);
          var G__10133 = null;
          var G__10134 = 0;
          var G__10135 = 0;
          seq__10110_10115 = G__10132;
          chunk__10111_10116 = G__10133;
          count__10112_10117 = G__10134;
          i__10113_10118 = G__10135;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return parent__$1;
};
dommy.core.append_BANG_.cljs$lang$applyTo = function(seq10104) {
  var G__10105 = cljs.core.first.call(null, seq10104);
  var seq10104__$1 = cljs.core.next.call(null, seq10104);
  var G__10106 = cljs.core.first.call(null, seq10104__$1);
  var seq10104__$2 = cljs.core.next.call(null, seq10104__$1);
  return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10105, G__10106, seq10104__$2);
};
dommy.core.append_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.prepend_BANG_ = function dommy$core$prepend_BANG_() {
  var G__10140 = arguments.length;
  switch(G__10140) {
    case 2:
      return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5326__auto__);
  }
};
dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = function(parent, child) {
  var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
  return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
};
dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(parent, child, more_children) {
  var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
  var seq__10141_10146 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
  var chunk__10142_10147 = null;
  var count__10143_10148 = 0;
  var i__10144_10149 = 0;
  while (true) {
    if (i__10144_10149 < count__10143_10148) {
      var c_10150 = cljs.core._nth.call(null, chunk__10142_10147, i__10144_10149);
      dommy.core.prepend_BANG_.call(null, parent__$1, c_10150);
      var G__10151 = seq__10141_10146;
      var G__10152 = chunk__10142_10147;
      var G__10153 = count__10143_10148;
      var G__10154 = i__10144_10149 + 1;
      seq__10141_10146 = G__10151;
      chunk__10142_10147 = G__10152;
      count__10143_10148 = G__10153;
      i__10144_10149 = G__10154;
      continue;
    } else {
      var temp__4126__auto___10155 = cljs.core.seq.call(null, seq__10141_10146);
      if (temp__4126__auto___10155) {
        var seq__10141_10156__$1 = temp__4126__auto___10155;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10141_10156__$1)) {
          var c__5059__auto___10157 = cljs.core.chunk_first.call(null, seq__10141_10156__$1);
          var G__10158 = cljs.core.chunk_rest.call(null, seq__10141_10156__$1);
          var G__10159 = c__5059__auto___10157;
          var G__10160 = cljs.core.count.call(null, c__5059__auto___10157);
          var G__10161 = 0;
          seq__10141_10146 = G__10158;
          chunk__10142_10147 = G__10159;
          count__10143_10148 = G__10160;
          i__10144_10149 = G__10161;
          continue;
        } else {
          var c_10162 = cljs.core.first.call(null, seq__10141_10156__$1);
          dommy.core.prepend_BANG_.call(null, parent__$1, c_10162);
          var G__10163 = cljs.core.next.call(null, seq__10141_10156__$1);
          var G__10164 = null;
          var G__10165 = 0;
          var G__10166 = 0;
          seq__10141_10146 = G__10163;
          chunk__10142_10147 = G__10164;
          count__10143_10148 = G__10165;
          i__10144_10149 = G__10166;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return parent__$1;
};
dommy.core.prepend_BANG_.cljs$lang$applyTo = function(seq10136) {
  var G__10137 = cljs.core.first.call(null, seq10136);
  var seq10136__$1 = cljs.core.next.call(null, seq10136);
  var G__10138 = cljs.core.first.call(null, seq10136__$1);
  var seq10136__$2 = cljs.core.next.call(null, seq10136__$1);
  return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10137, G__10138, seq10136__$2);
};
dommy.core.prepend_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.insert_before_BANG_ = function dommy$core$insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "other", "other", -1658642225, null))))].join(""));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function dommy$core$insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___10167 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___10167)) {
    var next_10168 = temp__4124__auto___10167;
    parent.insertBefore(actual_node, next_10168);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function dommy$core$replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", -1418255893, null), new cljs.core.Symbol(null, "elem", "elem", -2035804713, null))))].join(""));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function dommy$core$replace_contents_BANG_(parent, node_like) {
  var G__10170 = dommy.template.__GT_node_like.call(null, parent);
  G__10170.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__10170, node_like);
  return G__10170;
};
dommy.core.remove_BANG_ = function dommy$core$remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__10172 = elem__$1.parentNode;
  G__10172.removeChild(elem__$1);
  return G__10172;
};
dommy.core.clear_BANG_ = function dommy$core$clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function dommy$core$selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, dommy$core$selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function dommy$core$selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", -1736937707))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 1212911103, null), new cljs.core.Keyword(null, "container", "container", -1736937707)))))].join(""));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", -1736937707), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__10178) {
      var vec__10179 = p__10178;
      var k = cljs.core.nth.call(null, vec__10179, 0, null);
      var v = cljs.core.nth.call(null, vec__10179, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", -1610148039)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t10180 !== "undefined") {
        } else {
          dommy.core.t10180 = function(v, k, vec__10179, p__10178, container, key_selectors_map, template, selector_map, meta10181) {
            this.v = v;
            this.k = k;
            this.vec__10179 = vec__10179;
            this.p__10178 = p__10178;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta10181 = meta10181;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t10180.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__10179, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__10179, k, v, container);
          dommy.core.t10180.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__10179, k, v, container) {
            return function(_10182) {
              var self__ = this;
              var _10182__$1 = this;
              return self__.meta10181;
            };
          }(vec__10179, k, v, container);
          dommy.core.t10180.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__10179, k, v, container) {
            return function(_10182, meta10181__$1) {
              var self__ = this;
              var _10182__$1 = this;
              return new dommy.core.t10180(self__.v, self__.k, self__.vec__10179, self__.p__10178, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta10181__$1);
            };
          }(vec__10179, k, v, container);
          dommy.core.t10180.cljs$lang$type = true;
          dommy.core.t10180.cljs$lang$ctorStr = "dommy.core/t10180";
          dommy.core.t10180.cljs$lang$ctorPrWriter = function(vec__10179, k, v, container) {
            return function(this__4853__auto__, writer__4854__auto__, opt__4855__auto__) {
              return cljs.core._write.call(null, writer__4854__auto__, "dommy.core/t10180");
            };
          }(vec__10179, k, v, container);
          dommy.core.__GT_t10180 = function(vec__10179, k, v, container) {
            return function dommy$core$selector_map_$___GT_t10180(v__$1, k__$1, vec__10179__$1, p__10178__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta10181) {
              return new dommy.core.t10180(v__$1, k__$1, vec__10179__$1, p__10178__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta10181);
            };
          }(vec__10179, k, v, container);
        }
        return new dommy.core.t10180(v, k, vec__10179, p__10178, container, key_selectors_map, template, dommy$core$selector_map, cljs.core.PersistentArrayMap.EMPTY);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function dommy$core$ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__10183_SHARP_) {
    return p1__10183_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function dommy$core$matches_pred() {
  var G__10185 = arguments.length;
  switch(G__10185) {
    case 2:
      return dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$2 = function(base, selector) {
  var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
  return function(matches) {
    return function(elem) {
      return matches.indexOf(elem) >= 0;
    };
  }(matches);
};
dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$1 = function(selector) {
  return dommy.core.matches_pred.call(null, document, selector);
};
dommy.core.matches_pred.cljs$lang$maxFixedArity = 2;
dommy.core.closest = function dommy$core$closest() {
  var G__10189 = arguments.length;
  switch(G__10189) {
    case 3:
      return dommy.core.closest.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return dommy.core.closest.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.closest.cljs$core$IFn$_invoke$arity$3 = function(base, elem, selector) {
  var base__$1 = dommy.template.__GT_node_like.call(null, base);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
    return function(p1__10187_SHARP_) {
      return!(p1__10187_SHARP_ === base__$1);
    };
  }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
};
dommy.core.closest.cljs$core$IFn$_invoke$arity$2 = function(elem, selector) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
};
dommy.core.closest.cljs$lang$maxFixedArity = 3;
dommy.core.descendant_QMARK_ = function dommy$core$descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__10191) {
  var vec__10192 = p__10191;
  var special_mouse_event = cljs.core.nth.call(null, vec__10192, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__10192, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__10192, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__10192, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__4274__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__4274__auto__)) {
              return or__4274__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__4262__auto__ = related_target;
            if (cljs.core.truth_(and__4262__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__4262__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__10192, special_mouse_event, real_mouse_event);
    };
  }(vec__10192, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890)], null)));
dommy.core.live_listener = function dommy$core$live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__4262__auto__ = selected_target;
      if (cljs.core.truth_(and__4262__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218)));
      } else {
        return and__4262__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function dommy$core$event_listeners(elem) {
  var or__4274__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__4274__auto__)) {
    return or__4274__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function dommy$core$update_event_listeners_BANG_() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, f, args) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
};
dommy.core.update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.update_event_listeners_BANG_.cljs$lang$applyTo = function(seq10193) {
  var G__10194 = cljs.core.first.call(null, seq10193);
  var seq10193__$1 = cljs.core.next.call(null, seq10193);
  var G__10195 = cljs.core.first.call(null, seq10193__$1);
  var seq10193__$2 = cljs.core.next.call(null, seq10193__$1);
  return dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10194, G__10195, seq10193__$2);
};
dommy.core.elem_and_selector = function dommy$core$elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__10196_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__10196_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function dommy$core$listen_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null)))))].join(""));
  }
  var vec__10199_10222 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_10223 = cljs.core.nth.call(null, vec__10199_10222, 0, null);
  var selector_10224 = cljs.core.nth.call(null, vec__10199_10222, 1, null);
  var seq__10200_10225 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__10207_10226 = null;
  var count__10208_10227 = 0;
  var i__10209_10228 = 0;
  while (true) {
    if (i__10209_10228 < count__10208_10227) {
      var vec__10216_10229 = cljs.core._nth.call(null, chunk__10207_10226, i__10209_10228);
      var orig_type_10230 = cljs.core.nth.call(null, vec__10216_10229, 0, null);
      var f_10231 = cljs.core.nth.call(null, vec__10216_10229, 1, null);
      var seq__10210_10232 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10230, new cljs.core.PersistentArrayMap.fromArray([orig_type_10230, cljs.core.identity], true, false)));
      var chunk__10212_10233 = null;
      var count__10213_10234 = 0;
      var i__10214_10235 = 0;
      while (true) {
        if (i__10214_10235 < count__10213_10234) {
          var vec__10217_10236 = cljs.core._nth.call(null, chunk__10212_10233, i__10214_10235);
          var actual_type_10237 = cljs.core.nth.call(null, vec__10217_10236, 0, null);
          var factory_10238 = cljs.core.nth.call(null, vec__10217_10236, 1, null);
          var canonical_f_10239 = (cljs.core.truth_(selector_10224) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10223, selector_10224) : cljs.core.identity).call(null, factory_10238.call(null, f_10231));
          dommy.core.update_event_listeners_BANG_.call(null, elem_10223, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10224, actual_type_10237, f_10231], null), canonical_f_10239);
          if (cljs.core.truth_(elem_10223.addEventListener)) {
            elem_10223.addEventListener(cljs.core.name.call(null, actual_type_10237), canonical_f_10239);
          } else {
            elem_10223.attachEvent(cljs.core.name.call(null, actual_type_10237), canonical_f_10239);
          }
          var G__10240 = seq__10210_10232;
          var G__10241 = chunk__10212_10233;
          var G__10242 = count__10213_10234;
          var G__10243 = i__10214_10235 + 1;
          seq__10210_10232 = G__10240;
          chunk__10212_10233 = G__10241;
          count__10213_10234 = G__10242;
          i__10214_10235 = G__10243;
          continue;
        } else {
          var temp__4126__auto___10244 = cljs.core.seq.call(null, seq__10210_10232);
          if (temp__4126__auto___10244) {
            var seq__10210_10245__$1 = temp__4126__auto___10244;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10210_10245__$1)) {
              var c__5059__auto___10246 = cljs.core.chunk_first.call(null, seq__10210_10245__$1);
              var G__10247 = cljs.core.chunk_rest.call(null, seq__10210_10245__$1);
              var G__10248 = c__5059__auto___10246;
              var G__10249 = cljs.core.count.call(null, c__5059__auto___10246);
              var G__10250 = 0;
              seq__10210_10232 = G__10247;
              chunk__10212_10233 = G__10248;
              count__10213_10234 = G__10249;
              i__10214_10235 = G__10250;
              continue;
            } else {
              var vec__10218_10251 = cljs.core.first.call(null, seq__10210_10245__$1);
              var actual_type_10252 = cljs.core.nth.call(null, vec__10218_10251, 0, null);
              var factory_10253 = cljs.core.nth.call(null, vec__10218_10251, 1, null);
              var canonical_f_10254 = (cljs.core.truth_(selector_10224) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10223, selector_10224) : cljs.core.identity).call(null, factory_10253.call(null, f_10231));
              dommy.core.update_event_listeners_BANG_.call(null, elem_10223, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10224, actual_type_10252, f_10231], null), canonical_f_10254);
              if (cljs.core.truth_(elem_10223.addEventListener)) {
                elem_10223.addEventListener(cljs.core.name.call(null, actual_type_10252), canonical_f_10254);
              } else {
                elem_10223.attachEvent(cljs.core.name.call(null, actual_type_10252), canonical_f_10254);
              }
              var G__10255 = cljs.core.next.call(null, seq__10210_10245__$1);
              var G__10256 = null;
              var G__10257 = 0;
              var G__10258 = 0;
              seq__10210_10232 = G__10255;
              chunk__10212_10233 = G__10256;
              count__10213_10234 = G__10257;
              i__10214_10235 = G__10258;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__10259 = seq__10200_10225;
      var G__10260 = chunk__10207_10226;
      var G__10261 = count__10208_10227;
      var G__10262 = i__10209_10228 + 1;
      seq__10200_10225 = G__10259;
      chunk__10207_10226 = G__10260;
      count__10208_10227 = G__10261;
      i__10209_10228 = G__10262;
      continue;
    } else {
      var temp__4126__auto___10263 = cljs.core.seq.call(null, seq__10200_10225);
      if (temp__4126__auto___10263) {
        var seq__10200_10264__$1 = temp__4126__auto___10263;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10200_10264__$1)) {
          var c__5059__auto___10265 = cljs.core.chunk_first.call(null, seq__10200_10264__$1);
          var G__10266 = cljs.core.chunk_rest.call(null, seq__10200_10264__$1);
          var G__10267 = c__5059__auto___10265;
          var G__10268 = cljs.core.count.call(null, c__5059__auto___10265);
          var G__10269 = 0;
          seq__10200_10225 = G__10266;
          chunk__10207_10226 = G__10267;
          count__10208_10227 = G__10268;
          i__10209_10228 = G__10269;
          continue;
        } else {
          var vec__10219_10270 = cljs.core.first.call(null, seq__10200_10264__$1);
          var orig_type_10271 = cljs.core.nth.call(null, vec__10219_10270, 0, null);
          var f_10272 = cljs.core.nth.call(null, vec__10219_10270, 1, null);
          var seq__10201_10273 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10271, new cljs.core.PersistentArrayMap.fromArray([orig_type_10271, cljs.core.identity], true, false)));
          var chunk__10203_10274 = null;
          var count__10204_10275 = 0;
          var i__10205_10276 = 0;
          while (true) {
            if (i__10205_10276 < count__10204_10275) {
              var vec__10220_10277 = cljs.core._nth.call(null, chunk__10203_10274, i__10205_10276);
              var actual_type_10278 = cljs.core.nth.call(null, vec__10220_10277, 0, null);
              var factory_10279 = cljs.core.nth.call(null, vec__10220_10277, 1, null);
              var canonical_f_10280 = (cljs.core.truth_(selector_10224) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10223, selector_10224) : cljs.core.identity).call(null, factory_10279.call(null, f_10272));
              dommy.core.update_event_listeners_BANG_.call(null, elem_10223, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10224, actual_type_10278, f_10272], null), canonical_f_10280);
              if (cljs.core.truth_(elem_10223.addEventListener)) {
                elem_10223.addEventListener(cljs.core.name.call(null, actual_type_10278), canonical_f_10280);
              } else {
                elem_10223.attachEvent(cljs.core.name.call(null, actual_type_10278), canonical_f_10280);
              }
              var G__10281 = seq__10201_10273;
              var G__10282 = chunk__10203_10274;
              var G__10283 = count__10204_10275;
              var G__10284 = i__10205_10276 + 1;
              seq__10201_10273 = G__10281;
              chunk__10203_10274 = G__10282;
              count__10204_10275 = G__10283;
              i__10205_10276 = G__10284;
              continue;
            } else {
              var temp__4126__auto___10285__$1 = cljs.core.seq.call(null, seq__10201_10273);
              if (temp__4126__auto___10285__$1) {
                var seq__10201_10286__$1 = temp__4126__auto___10285__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__10201_10286__$1)) {
                  var c__5059__auto___10287 = cljs.core.chunk_first.call(null, seq__10201_10286__$1);
                  var G__10288 = cljs.core.chunk_rest.call(null, seq__10201_10286__$1);
                  var G__10289 = c__5059__auto___10287;
                  var G__10290 = cljs.core.count.call(null, c__5059__auto___10287);
                  var G__10291 = 0;
                  seq__10201_10273 = G__10288;
                  chunk__10203_10274 = G__10289;
                  count__10204_10275 = G__10290;
                  i__10205_10276 = G__10291;
                  continue;
                } else {
                  var vec__10221_10292 = cljs.core.first.call(null, seq__10201_10286__$1);
                  var actual_type_10293 = cljs.core.nth.call(null, vec__10221_10292, 0, null);
                  var factory_10294 = cljs.core.nth.call(null, vec__10221_10292, 1, null);
                  var canonical_f_10295 = (cljs.core.truth_(selector_10224) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10223, selector_10224) : cljs.core.identity).call(null, factory_10294.call(null, f_10272));
                  dommy.core.update_event_listeners_BANG_.call(null, elem_10223, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10224, actual_type_10293, f_10272], null), canonical_f_10295);
                  if (cljs.core.truth_(elem_10223.addEventListener)) {
                    elem_10223.addEventListener(cljs.core.name.call(null, actual_type_10293), canonical_f_10295);
                  } else {
                    elem_10223.attachEvent(cljs.core.name.call(null, actual_type_10293), canonical_f_10295);
                  }
                  var G__10296 = cljs.core.next.call(null, seq__10201_10286__$1);
                  var G__10297 = null;
                  var G__10298 = 0;
                  var G__10299 = 0;
                  seq__10201_10273 = G__10296;
                  chunk__10203_10274 = G__10297;
                  count__10204_10275 = G__10298;
                  i__10205_10276 = G__10299;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__10300 = cljs.core.next.call(null, seq__10200_10264__$1);
          var G__10301 = null;
          var G__10302 = 0;
          var G__10303 = 0;
          seq__10200_10225 = G__10300;
          chunk__10207_10226 = G__10301;
          count__10208_10227 = G__10302;
          i__10209_10228 = G__10303;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.listen_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.listen_BANG_.cljs$lang$applyTo = function(seq10197) {
  var G__10198 = cljs.core.first.call(null, seq10197);
  var seq10197__$1 = cljs.core.next.call(null, seq10197);
  return dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10198, seq10197__$1);
};
dommy.core.unlisten_BANG_ = function dommy$core$unlisten_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null)))))].join(""));
  }
  var vec__10306_10329 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_10330 = cljs.core.nth.call(null, vec__10306_10329, 0, null);
  var selector_10331 = cljs.core.nth.call(null, vec__10306_10329, 1, null);
  var seq__10307_10332 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__10314_10333 = null;
  var count__10315_10334 = 0;
  var i__10316_10335 = 0;
  while (true) {
    if (i__10316_10335 < count__10315_10334) {
      var vec__10323_10336 = cljs.core._nth.call(null, chunk__10314_10333, i__10316_10335);
      var orig_type_10337 = cljs.core.nth.call(null, vec__10323_10336, 0, null);
      var f_10338 = cljs.core.nth.call(null, vec__10323_10336, 1, null);
      var seq__10317_10339 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10337, new cljs.core.PersistentArrayMap.fromArray([orig_type_10337, cljs.core.identity], true, false)));
      var chunk__10319_10340 = null;
      var count__10320_10341 = 0;
      var i__10321_10342 = 0;
      while (true) {
        if (i__10321_10342 < count__10320_10341) {
          var vec__10324_10343 = cljs.core._nth.call(null, chunk__10319_10340, i__10321_10342);
          var actual_type_10344 = cljs.core.nth.call(null, vec__10324_10343, 0, null);
          var __10345 = cljs.core.nth.call(null, vec__10324_10343, 1, null);
          var keys_10346 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10331, actual_type_10344, f_10338], null);
          var canonical_f_10347 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10330), keys_10346);
          dommy.core.update_event_listeners_BANG_.call(null, elem_10330, dommy.utils.dissoc_in, keys_10346);
          if (cljs.core.truth_(elem_10330.removeEventListener)) {
            elem_10330.removeEventListener(cljs.core.name.call(null, actual_type_10344), canonical_f_10347);
          } else {
            elem_10330.detachEvent(cljs.core.name.call(null, actual_type_10344), canonical_f_10347);
          }
          var G__10348 = seq__10317_10339;
          var G__10349 = chunk__10319_10340;
          var G__10350 = count__10320_10341;
          var G__10351 = i__10321_10342 + 1;
          seq__10317_10339 = G__10348;
          chunk__10319_10340 = G__10349;
          count__10320_10341 = G__10350;
          i__10321_10342 = G__10351;
          continue;
        } else {
          var temp__4126__auto___10352 = cljs.core.seq.call(null, seq__10317_10339);
          if (temp__4126__auto___10352) {
            var seq__10317_10353__$1 = temp__4126__auto___10352;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10317_10353__$1)) {
              var c__5059__auto___10354 = cljs.core.chunk_first.call(null, seq__10317_10353__$1);
              var G__10355 = cljs.core.chunk_rest.call(null, seq__10317_10353__$1);
              var G__10356 = c__5059__auto___10354;
              var G__10357 = cljs.core.count.call(null, c__5059__auto___10354);
              var G__10358 = 0;
              seq__10317_10339 = G__10355;
              chunk__10319_10340 = G__10356;
              count__10320_10341 = G__10357;
              i__10321_10342 = G__10358;
              continue;
            } else {
              var vec__10325_10359 = cljs.core.first.call(null, seq__10317_10353__$1);
              var actual_type_10360 = cljs.core.nth.call(null, vec__10325_10359, 0, null);
              var __10361 = cljs.core.nth.call(null, vec__10325_10359, 1, null);
              var keys_10362 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10331, actual_type_10360, f_10338], null);
              var canonical_f_10363 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10330), keys_10362);
              dommy.core.update_event_listeners_BANG_.call(null, elem_10330, dommy.utils.dissoc_in, keys_10362);
              if (cljs.core.truth_(elem_10330.removeEventListener)) {
                elem_10330.removeEventListener(cljs.core.name.call(null, actual_type_10360), canonical_f_10363);
              } else {
                elem_10330.detachEvent(cljs.core.name.call(null, actual_type_10360), canonical_f_10363);
              }
              var G__10364 = cljs.core.next.call(null, seq__10317_10353__$1);
              var G__10365 = null;
              var G__10366 = 0;
              var G__10367 = 0;
              seq__10317_10339 = G__10364;
              chunk__10319_10340 = G__10365;
              count__10320_10341 = G__10366;
              i__10321_10342 = G__10367;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__10368 = seq__10307_10332;
      var G__10369 = chunk__10314_10333;
      var G__10370 = count__10315_10334;
      var G__10371 = i__10316_10335 + 1;
      seq__10307_10332 = G__10368;
      chunk__10314_10333 = G__10369;
      count__10315_10334 = G__10370;
      i__10316_10335 = G__10371;
      continue;
    } else {
      var temp__4126__auto___10372 = cljs.core.seq.call(null, seq__10307_10332);
      if (temp__4126__auto___10372) {
        var seq__10307_10373__$1 = temp__4126__auto___10372;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10307_10373__$1)) {
          var c__5059__auto___10374 = cljs.core.chunk_first.call(null, seq__10307_10373__$1);
          var G__10375 = cljs.core.chunk_rest.call(null, seq__10307_10373__$1);
          var G__10376 = c__5059__auto___10374;
          var G__10377 = cljs.core.count.call(null, c__5059__auto___10374);
          var G__10378 = 0;
          seq__10307_10332 = G__10375;
          chunk__10314_10333 = G__10376;
          count__10315_10334 = G__10377;
          i__10316_10335 = G__10378;
          continue;
        } else {
          var vec__10326_10379 = cljs.core.first.call(null, seq__10307_10373__$1);
          var orig_type_10380 = cljs.core.nth.call(null, vec__10326_10379, 0, null);
          var f_10381 = cljs.core.nth.call(null, vec__10326_10379, 1, null);
          var seq__10308_10382 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10380, new cljs.core.PersistentArrayMap.fromArray([orig_type_10380, cljs.core.identity], true, false)));
          var chunk__10310_10383 = null;
          var count__10311_10384 = 0;
          var i__10312_10385 = 0;
          while (true) {
            if (i__10312_10385 < count__10311_10384) {
              var vec__10327_10386 = cljs.core._nth.call(null, chunk__10310_10383, i__10312_10385);
              var actual_type_10387 = cljs.core.nth.call(null, vec__10327_10386, 0, null);
              var __10388 = cljs.core.nth.call(null, vec__10327_10386, 1, null);
              var keys_10389 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10331, actual_type_10387, f_10381], null);
              var canonical_f_10390 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10330), keys_10389);
              dommy.core.update_event_listeners_BANG_.call(null, elem_10330, dommy.utils.dissoc_in, keys_10389);
              if (cljs.core.truth_(elem_10330.removeEventListener)) {
                elem_10330.removeEventListener(cljs.core.name.call(null, actual_type_10387), canonical_f_10390);
              } else {
                elem_10330.detachEvent(cljs.core.name.call(null, actual_type_10387), canonical_f_10390);
              }
              var G__10391 = seq__10308_10382;
              var G__10392 = chunk__10310_10383;
              var G__10393 = count__10311_10384;
              var G__10394 = i__10312_10385 + 1;
              seq__10308_10382 = G__10391;
              chunk__10310_10383 = G__10392;
              count__10311_10384 = G__10393;
              i__10312_10385 = G__10394;
              continue;
            } else {
              var temp__4126__auto___10395__$1 = cljs.core.seq.call(null, seq__10308_10382);
              if (temp__4126__auto___10395__$1) {
                var seq__10308_10396__$1 = temp__4126__auto___10395__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__10308_10396__$1)) {
                  var c__5059__auto___10397 = cljs.core.chunk_first.call(null, seq__10308_10396__$1);
                  var G__10398 = cljs.core.chunk_rest.call(null, seq__10308_10396__$1);
                  var G__10399 = c__5059__auto___10397;
                  var G__10400 = cljs.core.count.call(null, c__5059__auto___10397);
                  var G__10401 = 0;
                  seq__10308_10382 = G__10398;
                  chunk__10310_10383 = G__10399;
                  count__10311_10384 = G__10400;
                  i__10312_10385 = G__10401;
                  continue;
                } else {
                  var vec__10328_10402 = cljs.core.first.call(null, seq__10308_10396__$1);
                  var actual_type_10403 = cljs.core.nth.call(null, vec__10328_10402, 0, null);
                  var __10404 = cljs.core.nth.call(null, vec__10328_10402, 1, null);
                  var keys_10405 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10331, actual_type_10403, f_10381], null);
                  var canonical_f_10406 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10330), keys_10405);
                  dommy.core.update_event_listeners_BANG_.call(null, elem_10330, dommy.utils.dissoc_in, keys_10405);
                  if (cljs.core.truth_(elem_10330.removeEventListener)) {
                    elem_10330.removeEventListener(cljs.core.name.call(null, actual_type_10403), canonical_f_10406);
                  } else {
                    elem_10330.detachEvent(cljs.core.name.call(null, actual_type_10403), canonical_f_10406);
                  }
                  var G__10407 = cljs.core.next.call(null, seq__10308_10396__$1);
                  var G__10408 = null;
                  var G__10409 = 0;
                  var G__10410 = 0;
                  seq__10308_10382 = G__10407;
                  chunk__10310_10383 = G__10408;
                  count__10311_10384 = G__10409;
                  i__10312_10385 = G__10410;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__10411 = cljs.core.next.call(null, seq__10307_10373__$1);
          var G__10412 = null;
          var G__10413 = 0;
          var G__10414 = 0;
          seq__10307_10332 = G__10411;
          chunk__10314_10333 = G__10412;
          count__10315_10334 = G__10413;
          i__10316_10335 = G__10414;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.unlisten_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.unlisten_BANG_.cljs$lang$applyTo = function(seq10304) {
  var G__10305 = cljs.core.first.call(null, seq10304);
  var seq10304__$1 = cljs.core.next.call(null, seq10304);
  return dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10305, seq10304__$1);
};
dommy.core.listen_once_BANG_ = function dommy$core$listen_once_BANG_() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null)))))].join(""));
  }
  var vec__10417_10424 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_10425 = cljs.core.nth.call(null, vec__10417_10424, 0, null);
  var selector_10426 = cljs.core.nth.call(null, vec__10417_10424, 1, null);
  var seq__10418_10427 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__10419_10428 = null;
  var count__10420_10429 = 0;
  var i__10421_10430 = 0;
  while (true) {
    if (i__10421_10430 < count__10420_10429) {
      var vec__10422_10431 = cljs.core._nth.call(null, chunk__10419_10428, i__10421_10430);
      var type_10432 = cljs.core.nth.call(null, vec__10422_10431, 0, null);
      var f_10433 = cljs.core.nth.call(null, vec__10422_10431, 1, null);
      dommy.core.listen_BANG_.call(null, elem_sel, type_10432, function(seq__10418_10427, chunk__10419_10428, count__10420_10429, i__10421_10430, vec__10422_10431, type_10432, f_10433, vec__10417_10424, elem_10425, selector_10426) {
        return function dommy$core$this_fn(e) {
          dommy.core.unlisten_BANG_.call(null, elem_sel, type_10432, dommy$core$this_fn);
          return f_10433.call(null, e);
        };
      }(seq__10418_10427, chunk__10419_10428, count__10420_10429, i__10421_10430, vec__10422_10431, type_10432, f_10433, vec__10417_10424, elem_10425, selector_10426));
      var G__10434 = seq__10418_10427;
      var G__10435 = chunk__10419_10428;
      var G__10436 = count__10420_10429;
      var G__10437 = i__10421_10430 + 1;
      seq__10418_10427 = G__10434;
      chunk__10419_10428 = G__10435;
      count__10420_10429 = G__10436;
      i__10421_10430 = G__10437;
      continue;
    } else {
      var temp__4126__auto___10438 = cljs.core.seq.call(null, seq__10418_10427);
      if (temp__4126__auto___10438) {
        var seq__10418_10439__$1 = temp__4126__auto___10438;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10418_10439__$1)) {
          var c__5059__auto___10440 = cljs.core.chunk_first.call(null, seq__10418_10439__$1);
          var G__10441 = cljs.core.chunk_rest.call(null, seq__10418_10439__$1);
          var G__10442 = c__5059__auto___10440;
          var G__10443 = cljs.core.count.call(null, c__5059__auto___10440);
          var G__10444 = 0;
          seq__10418_10427 = G__10441;
          chunk__10419_10428 = G__10442;
          count__10420_10429 = G__10443;
          i__10421_10430 = G__10444;
          continue;
        } else {
          var vec__10423_10445 = cljs.core.first.call(null, seq__10418_10439__$1);
          var type_10446 = cljs.core.nth.call(null, vec__10423_10445, 0, null);
          var f_10447 = cljs.core.nth.call(null, vec__10423_10445, 1, null);
          dommy.core.listen_BANG_.call(null, elem_sel, type_10446, function(seq__10418_10427, chunk__10419_10428, count__10420_10429, i__10421_10430, vec__10423_10445, type_10446, f_10447, seq__10418_10439__$1, temp__4126__auto___10438, vec__10417_10424, elem_10425, selector_10426) {
            return function dommy$core$this_fn(e) {
              dommy.core.unlisten_BANG_.call(null, elem_sel, type_10446, dommy$core$this_fn);
              return f_10447.call(null, e);
            };
          }(seq__10418_10427, chunk__10419_10428, count__10420_10429, i__10421_10430, vec__10423_10445, type_10446, f_10447, seq__10418_10439__$1, temp__4126__auto___10438, vec__10417_10424, elem_10425, selector_10426));
          var G__10448 = cljs.core.next.call(null, seq__10418_10439__$1);
          var G__10449 = null;
          var G__10450 = 0;
          var G__10451 = 0;
          seq__10418_10427 = G__10448;
          chunk__10419_10428 = G__10449;
          count__10420_10429 = G__10450;
          i__10421_10430 = G__10451;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.listen_once_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.listen_once_BANG_.cljs$lang$applyTo = function(seq10415) {
  var G__10416 = cljs.core.first.call(null, seq10415);
  var seq10415__$1 = cljs.core.next.call(null, seq10415);
  return dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10416, seq10415__$1);
};
dommy.core.fire_BANG_ = function dommy$core$fire_BANG_() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return dommy.core.fire_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
dommy.core.fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(node, event_type, p__10455) {
  var vec__10456 = p__10455;
  var update_event_BANG_ = cljs.core.nth.call(null, vec__10456, 0, null);
  if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1027057938, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", 1597931428, null))))].join(""));
  }
  var update_event_BANG___$1 = function() {
    var or__4274__auto__ = update_event_BANG_;
    if (cljs.core.truth_(or__4274__auto__)) {
      return or__4274__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  if (cljs.core.truth_(document.createEvent)) {
    var event = document.createEvent("Event");
    event.initEvent(cljs.core.name.call(null, event_type), true, true);
    return node.dispatchEvent(update_event_BANG___$1.call(null, event));
  } else {
    return node.fireEvent([cljs.core.str("on"), cljs.core.str(cljs.core.name.call(null, event_type))].join(""), update_event_BANG___$1.call(null, document.createEventObject()));
  }
};
dommy.core.fire_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.fire_BANG_.cljs$lang$applyTo = function(seq10452) {
  var G__10453 = cljs.core.first.call(null, seq10452);
  var seq10452__$1 = cljs.core.next.call(null, seq10452);
  var G__10454 = cljs.core.first.call(null, seq10452__$1);
  var seq10452__$2 = cljs.core.next.call(null, seq10452__$1);
  return dommy.core.fire_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10453, G__10454, seq10452__$2);
};
goog.provide("milia.api.io");
goog.require("cljs.core");
goog.require("cljs_http.core");
goog.require("goog.net.cookies");
goog.require("goog.events");
goog.require("milia.utils.remote");
goog.require("dommy.core");
goog.require("goog.net.IframeIo");
goog.require("cljs_http.client");
goog.require("cljs_hash.md5");
goog.require("cljs.core.async");
goog.require("clojure.string");
milia.api.io.make_url = milia.utils.remote.make_url;
milia.api.io.make_json_url = function milia$api$io$make_json_url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return milia.api.io.make_json_url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
milia.api.io.make_json_url.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  var bare_url = cljs.core.apply.call(null, milia.api.io.make_url, args);
  return[cljs.core.str(bare_url), cljs.core.str(".json")].join("");
};
milia.api.io.make_json_url.cljs$lang$maxFixedArity = 0;
milia.api.io.make_json_url.cljs$lang$applyTo = function(seq9848) {
  return milia.api.io.make_json_url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9848));
};
milia.api.io.refresh_token_url = function milia$api$io$refresh_token_url(username) {
  return[cljs.core.str("/"), cljs.core.str(username), cljs.core.str("/temp-token")].join("");
};
milia.api.io.validate_token_url = function milia$api$io$validate_token_url(username) {
  return[cljs.core.str("/"), cljs.core.str(username), cljs.core.str("/validate-token")].join("");
};
milia.api.io.make_zebra_url = function milia$api$io$make_zebra_url() {
  var argseq__5314__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return milia.api.io.make_zebra_url.cljs$core$IFn$_invoke$arity$variadic(argseq__5314__auto__);
};
milia.api.io.make_zebra_url.cljs$core$IFn$_invoke$arity$variadic = function(postfix) {
  var zebra_host = window["location"]["origin"];
  return milia.utils.remote.url_join.call(null, zebra_host, postfix);
};
milia.api.io.make_zebra_url.cljs$lang$maxFixedArity = 0;
milia.api.io.make_zebra_url.cljs$lang$applyTo = function(seq9849) {
  return milia.api.io.make_zebra_url.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9849));
};
milia.api.io.raw_request = cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_android_cors_bugfix.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, 
cljs_http.core.request)))))))))));
milia.api.io.raw_get = function milia$api$io$raw_get() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return milia.api.io.raw_get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
milia.api.io.raw_get.cljs$core$IFn$_invoke$arity$variadic = function(url, p__9852) {
  var vec__9853 = p__9852;
  var req = cljs.core.nth.call(null, vec__9853, 0, null);
  return milia.api.io.raw_request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
milia.api.io.raw_get.cljs$lang$maxFixedArity = 1;
milia.api.io.raw_get.cljs$lang$applyTo = function(seq9850) {
  var G__9851 = cljs.core.first.call(null, seq9850);
  var seq9850__$1 = cljs.core.next.call(null, seq9850);
  return milia.api.io.raw_get.cljs$core$IFn$_invoke$arity$variadic(G__9851, seq9850__$1);
};
milia.api.io.raw_post = function milia$api$io$raw_post() {
  var argseq__5314__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return milia.api.io.raw_post.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5314__auto__);
};
milia.api.io.raw_post.cljs$core$IFn$_invoke$arity$variadic = function(url, p__9856) {
  var vec__9857 = p__9856;
  var req = cljs.core.nth.call(null, vec__9857, 0, null);
  return milia.api.io.raw_request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
milia.api.io.raw_post.cljs$lang$maxFixedArity = 1;
milia.api.io.raw_post.cljs$lang$applyTo = function(seq9854) {
  var G__9855 = cljs.core.first.call(null, seq9854);
  var seq9854__$1 = cljs.core.next.call(null, seq9854);
  return milia.api.io.raw_post.cljs$core$IFn$_invoke$arity$variadic(G__9855, seq9854__$1);
};
milia.api.io.token__GT_headers = function milia$api$io$token__GT_headers() {
  var G__9859 = arguments.length;
  switch(G__9859) {
    case 1:
      return milia.api.io.token__GT_headers.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return milia.api.io.token__GT_headers.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
milia.api.io.token__GT_headers.cljs$core$IFn$_invoke$arity$1 = function(token) {
  return milia.api.io.token__GT_headers.call(null, token, false);
};
milia.api.io.token__GT_headers.cljs$core$IFn$_invoke$arity$2 = function(token, get_crsftoken_QMARK_) {
  var headers = cljs.core.truth_(function() {
    var and__4262__auto__ = token;
    if (cljs.core.truth_(and__4262__auto__)) {
      return cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, token));
    } else {
      return and__4262__auto__;
    }
  }()) ? new cljs.core.PersistentArrayMap(null, 1, ["Authorization", [cljs.core.str("TempToken "), cljs.core.str(token)].join("")], null) : null;
  var temp__4124__auto__ = function() {
    var and__4262__auto__ = get_crsftoken_QMARK_;
    if (cljs.core.truth_(and__4262__auto__)) {
      return goog.net.cookies.get("csrftoken");
    } else {
      return and__4262__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4124__auto__)) {
    var crsf_token = temp__4124__auto__;
    return cljs.core.assoc.call(null, headers, "X-CSRFToken", crsf_token);
  } else {
    return headers;
  }
};
milia.api.io.token__GT_headers.cljs$lang$maxFixedArity = 2;
milia.api.io.query_helper = function milia$api$io$query_helper(method) {
  return function() {
    var G__9865 = null;
    var G__9865__1 = function(url) {
      return milia$api$io$query_helper.call(null, method).call(null, url, null, null);
    };
    var G__9865__2 = function(url, query_params) {
      return milia$api$io$query_helper.call(null, method).call(null, url, query_params, null);
    };
    var G__9865__4 = function() {
      var G__9866__delegate = function(url, query_params, token, p__9863) {
        var map__9864 = p__9863;
        var map__9864__$1 = cljs.core.seq_QMARK_.call(null, map__9864) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9864) : map__9864;
        var no_cache_QMARK_ = cljs.core.get.call(null, map__9864__$1, new cljs.core.Keyword(null, "no-cache?", "no-cache?", -1868220981));
        var http_method = (new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "get", "get", 1683182755), cljs_http.client.get, new cljs.core.Keyword(null, "raw-get", "raw-get", 524046152), milia.api.io.raw_get, new cljs.core.Keyword(null, "post", "post", 269697687), cljs_http.client.post, new cljs.core.Keyword(null, "raw-post", "raw-post", -555212647), milia.api.io.raw_post, new cljs.core.Keyword(null, "delete", "delete", -1768633620), cljs_http.client.delete$, new cljs.core.Keyword(null, 
        "put", "put", 1299772570), cljs_http.client.put, new cljs.core.Keyword(null, "patch", "patch", 380775109), cljs_http.client.patch], null)).call(null, method);
        var param_key = cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null), method) ? new cljs.core.Keyword(null, "form-params", "form-params", 1884296467) : new cljs.core.Keyword(null, "query-params", "query-params", 900640534);
        var headers = milia.api.io.token__GT_headers.call(null, cljs.core.apply.call(null, cljs.core.str, token), cljs.core._EQ_.call(null, http_method, cljs_http.client.delete$));
        var time_params = cljs.core.truth_(no_cache_QMARK_) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "t", "t", -1397832519), cljs_hash.md5.md5.call(null, Date.now().toString())], null) : null;
        var query_params__$1 = cljs.core.merge.call(null, query_params, time_params, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "xhr", "xhr", -177710851), true], null));
        return http_method.call(null, url, new cljs.core.PersistentArrayMap.fromArray([new cljs.core.Keyword(null, "headers", "headers", -835030129), headers, param_key, query_params__$1], true, false));
      };
      var G__9866 = function(url, query_params, token, var_args) {
        var p__9863 = null;
        if (arguments.length > 3) {
          var G__9867__i = 0, G__9867__a = new Array(arguments.length - 3);
          while (G__9867__i < G__9867__a.length) {
            G__9867__a[G__9867__i] = arguments[G__9867__i + 3];
            ++G__9867__i;
          }
          p__9863 = new cljs.core.IndexedSeq(G__9867__a, 0);
        }
        return G__9866__delegate.call(this, url, query_params, token, p__9863);
      };
      G__9866.cljs$lang$maxFixedArity = 3;
      G__9866.cljs$lang$applyTo = function(arglist__9868) {
        var url = cljs.core.first(arglist__9868);
        arglist__9868 = cljs.core.next(arglist__9868);
        var query_params = cljs.core.first(arglist__9868);
        arglist__9868 = cljs.core.next(arglist__9868);
        var token = cljs.core.first(arglist__9868);
        var p__9863 = cljs.core.rest(arglist__9868);
        return G__9866__delegate(url, query_params, token, p__9863);
      };
      G__9866.cljs$core$IFn$_invoke$arity$variadic = G__9866__delegate;
      return G__9866;
    }();
    G__9865 = function(url, query_params, token, var_args) {
      var p__9863 = var_args;
      switch(arguments.length) {
        case 1:
          return G__9865__1.call(this, url);
        case 2:
          return G__9865__2.call(this, url, query_params);
        default:
          var G__9869 = null;
          if (arguments.length > 3) {
            var G__9870__i = 0, G__9870__a = new Array(arguments.length - 3);
            while (G__9870__i < G__9870__a.length) {
              G__9870__a[G__9870__i] = arguments[G__9870__i + 3];
              ++G__9870__i;
            }
            G__9869 = new cljs.core.IndexedSeq(G__9870__a, 0);
          }
          return G__9865__4.cljs$core$IFn$_invoke$arity$variadic(url, query_params, token, G__9869);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9865.cljs$lang$maxFixedArity = 3;
    G__9865.cljs$lang$applyTo = G__9865__4.cljs$lang$applyTo;
    G__9865.cljs$core$IFn$_invoke$arity$1 = G__9865__1;
    G__9865.cljs$core$IFn$_invoke$arity$2 = G__9865__2;
    G__9865.cljs$core$IFn$_invoke$arity$variadic = G__9865__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9865;
  }();
};
milia.api.io.raw_get_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "raw-get", "raw-get", 524046152));
milia.api.io.get_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755));
milia.api.io.delete_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "delete", "delete", -1768633620));
milia.api.io.patch_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "patch", "patch", 380775109));
milia.api.io.raw_post_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "raw-post", "raw-post", -555212647));
milia.api.io.post_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "post", "post", 269697687));
milia.api.io.put_url = milia.api.io.query_helper.call(null, new cljs.core.Keyword(null, "put", "put", 1299772570));
milia.api.io.query_helper_BANG_ = function milia$api$io$query_helper_BANG_() {
  var G__9878 = arguments.length;
  switch(G__9878) {
    case 2:
      return milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5326__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5326__auto__);
  }
};
milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$2 = function(method, url) {
  return milia.api.io.query_helper_BANG_.call(null, url, method, null);
};
milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$3 = function(method, url, callback) {
  return milia.api.io.query_helper_BANG_.call(null, method, url, callback, null);
};
milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$4 = function(method, url, callback, query_params) {
  return milia.api.io.query_helper_BANG_.call(null, method, url, callback, query_params, null);
};
milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(method, url, callback, query_params, token, opts) {
  var c__6569__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto__) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto__) {
          return function(state_9889) {
            var state_val_9890 = state_9889[1];
            if (state_val_9890 === 5) {
              var inst_9887 = state_9889[2];
              var state_9889__$1 = state_9889;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9889__$1, inst_9887);
            } else {
              if (state_val_9890 === 4) {
                var state_9889__$1 = state_9889;
                var statearr_9891_9904 = state_9889__$1;
                statearr_9891_9904[2] = null;
                statearr_9891_9904[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9890 === 3) {
                  var inst_9882 = state_9889[7];
                  var inst_9884 = callback.call(null, inst_9882);
                  var state_9889__$1 = state_9889;
                  var statearr_9892_9905 = state_9889__$1;
                  statearr_9892_9905[2] = inst_9884;
                  statearr_9892_9905[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9890 === 2) {
                    var inst_9882 = state_9889[2];
                    var state_9889__$1 = function() {
                      var statearr_9893 = state_9889;
                      statearr_9893[7] = inst_9882;
                      return statearr_9893;
                    }();
                    if (cljs.core.truth_(callback)) {
                      var statearr_9894_9906 = state_9889__$1;
                      statearr_9894_9906[1] = 3;
                    } else {
                      var statearr_9895_9907 = state_9889__$1;
                      statearr_9895_9907[1] = 4;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9890 === 1) {
                      var inst_9879 = milia.api.io.query_helper.call(null, method);
                      var inst_9880 = inst_9879.call(null, url, query_params, token, opts);
                      var state_9889__$1 = state_9889;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9889__$1, 2, inst_9880);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto__);
        return function(switch__6548__auto__, c__6569__auto__) {
          return function() {
            var milia$api$io$state_machine__6549__auto__ = null;
            var milia$api$io$state_machine__6549__auto____0 = function() {
              var statearr_9899 = [null, null, null, null, null, null, null, null];
              statearr_9899[0] = milia$api$io$state_machine__6549__auto__;
              statearr_9899[1] = 1;
              return statearr_9899;
            };
            var milia$api$io$state_machine__6549__auto____1 = function(state_9889) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_9889);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e9900) {
                    if (e9900 instanceof Object) {
                      var ex__6552__auto__ = e9900;
                      var statearr_9901_9908 = state_9889;
                      statearr_9901_9908[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_9889);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e9900;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__9909 = state_9889;
                  state_9889 = G__9909;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            milia$api$io$state_machine__6549__auto__ = function(state_9889) {
              switch(arguments.length) {
                case 0:
                  return milia$api$io$state_machine__6549__auto____0.call(this);
                case 1:
                  return milia$api$io$state_machine__6549__auto____1.call(this, state_9889);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            milia$api$io$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = milia$api$io$state_machine__6549__auto____0;
            milia$api$io$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = milia$api$io$state_machine__6549__auto____1;
            return milia$api$io$state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto__);
      }();
      var state__6571__auto__ = function() {
        var statearr_9902 = f__6570__auto__.call(null);
        statearr_9902[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto__;
        return statearr_9902;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto__));
  return c__6569__auto__;
};
milia.api.io.query_helper_BANG_.cljs$lang$applyTo = function(seq9871) {
  var G__9872 = cljs.core.first.call(null, seq9871);
  var seq9871__$1 = cljs.core.next.call(null, seq9871);
  var G__9873 = cljs.core.first.call(null, seq9871__$1);
  var seq9871__$2 = cljs.core.next.call(null, seq9871__$1);
  var G__9874 = cljs.core.first.call(null, seq9871__$2);
  var seq9871__$3 = cljs.core.next.call(null, seq9871__$2);
  var G__9875 = cljs.core.first.call(null, seq9871__$3);
  var seq9871__$4 = cljs.core.next.call(null, seq9871__$3);
  var G__9876 = cljs.core.first.call(null, seq9871__$4);
  var seq9871__$5 = cljs.core.next.call(null, seq9871__$4);
  return milia.api.io.query_helper_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9872, G__9873, G__9874, G__9875, G__9876, seq9871__$5);
};
milia.api.io.query_helper_BANG_.cljs$lang$maxFixedArity = 4;
milia.api.io.get_event = function milia$api$io$get_event() {
  var G__9911 = arguments.length;
  switch(G__9911) {
    case 1:
      return milia.api.io.get_event.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return milia.api.io.get_event.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return milia.api.io.get_event.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
milia.api.io.get_event.cljs$core$IFn$_invoke$arity$1 = function(event) {
  return milia.api.io.get_event.call(null, event, null);
};
milia.api.io.get_event.cljs$core$IFn$_invoke$arity$2 = function(event, callback) {
  var url = dommy.core.attr.call(null, event.target, new cljs.core.Keyword(null, "href", "href", -793805698));
  return milia.api.io.query_helper_BANG_.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, callback, cljs.core.PersistentArrayMap.EMPTY);
};
milia.api.io.get_event.cljs$core$IFn$_invoke$arity$3 = function(event, callback, params) {
  var url = dommy.core.attr.call(null, event.target.form, new cljs.core.Keyword(null, "action", "action", -811238024));
  return milia.api.io.query_helper_BANG_.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, callback, params);
};
milia.api.io.get_event.cljs$lang$maxFixedArity = 3;
milia.api.io.post_event = function milia$api$io$post_event() {
  var G__9914 = arguments.length;
  switch(G__9914) {
    case 1:
      return milia.api.io.post_event.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return milia.api.io.post_event.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
milia.api.io.post_event.cljs$core$IFn$_invoke$arity$1 = function(event) {
  return milia.api.io.post_event.call(null, event, null);
};
milia.api.io.post_event.cljs$core$IFn$_invoke$arity$2 = function(event, callback) {
  var url = dommy.core.attr.call(null, event.target, new cljs.core.Keyword(null, "href", "href", -793805698));
  return milia.api.io.query_helper_BANG_.call(null, new cljs.core.Keyword(null, "post", "post", 269697687), url, callback);
};
milia.api.io.post_event.cljs$lang$maxFixedArity = 2;
milia.api.io.invalid_token_QMARK_ = function milia$api$io$invalid_token_QMARK_(response) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response), 403) && (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(response), "Invalid token") || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(response), "Token expired"))) {
    return true;
  } else {
    return null;
  }
};
milia.api.io.validate_token = function milia$api$io$validate_token(auth_token, username) {
  var c__6569__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto__) {
    return function() {
      var f__6570__auto__ = function() {
        var switch__6548__auto__ = function(c__6569__auto__) {
          return function(state_10039) {
            var state_val_10040 = state_10039[1];
            if (state_val_10040 === 7) {
              var inst_10004 = state_10039[2];
              var state_10039__$1 = state_10039;
              var statearr_10041_10076 = state_10039__$1;
              statearr_10041_10076[2] = inst_10004;
              statearr_10041_10076[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10040 === 20) {
                var state_10039__$1 = state_10039;
                var statearr_10042_10077 = state_10039__$1;
                statearr_10042_10077[2] = null;
                statearr_10042_10077[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10040 === 1) {
                  var inst_9996 = state_10039[7];
                  var inst_9996__$1 = auth_token == null;
                  var state_10039__$1 = function() {
                    var statearr_10043 = state_10039;
                    statearr_10043[7] = inst_9996__$1;
                    return statearr_10043;
                  }();
                  if (cljs.core.truth_(inst_9996__$1)) {
                    var statearr_10044_10078 = state_10039__$1;
                    statearr_10044_10078[1] = 2;
                  } else {
                    var statearr_10045_10079 = state_10039__$1;
                    statearr_10045_10079[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10040 === 4) {
                    var inst_10006 = state_10039[2];
                    var state_10039__$1 = state_10039;
                    if (cljs.core.truth_(inst_10006)) {
                      var statearr_10046_10080 = state_10039__$1;
                      statearr_10046_10080[1] = 8;
                    } else {
                      var statearr_10047_10081 = state_10039__$1;
                      statearr_10047_10081[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10040 === 15) {
                      var inst_10019 = state_10039[8];
                      var inst_10019__$1 = state_10039[2];
                      var inst_10020 = cljs.core.seq_QMARK_.call(null, inst_10019__$1);
                      var state_10039__$1 = function() {
                        var statearr_10048 = state_10039;
                        statearr_10048[8] = inst_10019__$1;
                        return statearr_10048;
                      }();
                      if (inst_10020) {
                        var statearr_10049_10082 = state_10039__$1;
                        statearr_10049_10082[1] = 16;
                      } else {
                        var statearr_10050_10083 = state_10039__$1;
                        statearr_10050_10083[1] = 17;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10040 === 21) {
                        var inst_10032 = state_10039[2];
                        var state_10039__$1 = state_10039;
                        var statearr_10051_10084 = state_10039__$1;
                        statearr_10051_10084[2] = inst_10032;
                        statearr_10051_10084[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10040 === 13) {
                          var state_10039__$1 = state_10039;
                          var statearr_10052_10085 = state_10039__$1;
                          statearr_10052_10085[2] = auth_token;
                          statearr_10052_10085[1] = 14;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10040 === 6) {
                            var inst_10002 = cljs.core._EQ_.call(null, "null", auth_token);
                            var state_10039__$1 = state_10039;
                            var statearr_10053_10086 = state_10039__$1;
                            statearr_10053_10086[2] = inst_10002;
                            statearr_10053_10086[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10040 === 17) {
                              var inst_10019 = state_10039[8];
                              var state_10039__$1 = state_10039;
                              var statearr_10054_10087 = state_10039__$1;
                              statearr_10054_10087[2] = inst_10019;
                              statearr_10054_10087[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10040 === 3) {
                                var inst_9999 = state_10039[9];
                                var inst_9999__$1 = clojure.string.blank_QMARK_.call(null, auth_token);
                                var state_10039__$1 = function() {
                                  var statearr_10055 = state_10039;
                                  statearr_10055[9] = inst_9999__$1;
                                  return statearr_10055;
                                }();
                                if (cljs.core.truth_(inst_9999__$1)) {
                                  var statearr_10056_10088 = state_10039__$1;
                                  statearr_10056_10088[1] = 5;
                                } else {
                                  var statearr_10057_10089 = state_10039__$1;
                                  statearr_10057_10089[1] = 6;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10040 === 12) {
                                  var inst_10016 = milia.api.io.refresh_token_url.call(null, username);
                                  var inst_10017 = milia.api.io.get_url.call(null, inst_10016, null, null, new cljs.core.Keyword(null, "no-cache?", "no-cache?", -1868220981), true);
                                  var state_10039__$1 = state_10039;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10039__$1, 15, inst_10017);
                                } else {
                                  if (state_val_10040 === 2) {
                                    var inst_9996 = state_10039[7];
                                    var state_10039__$1 = state_10039;
                                    var statearr_10058_10090 = state_10039__$1;
                                    statearr_10058_10090[2] = inst_9996;
                                    statearr_10058_10090[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10040 === 19) {
                                      var inst_10026 = state_10039[10];
                                      var state_10039__$1 = state_10039;
                                      var statearr_10059_10091 = state_10039__$1;
                                      statearr_10059_10091[2] = inst_10026;
                                      statearr_10059_10091[1] = 21;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10040 === 11) {
                                        var inst_10012 = state_10039[2];
                                        var inst_10013 = milia.api.io.invalid_token_QMARK_.call(null, inst_10012);
                                        var state_10039__$1 = state_10039;
                                        if (cljs.core.truth_(inst_10013)) {
                                          var statearr_10060_10092 = state_10039__$1;
                                          statearr_10060_10092[1] = 12;
                                        } else {
                                          var statearr_10061_10093 = state_10039__$1;
                                          statearr_10061_10093[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10040 === 9) {
                                          var inst_10009 = milia.api.io.validate_token_url.call(null, username);
                                          var inst_10010 = milia.api.io.get_url.call(null, inst_10009, null, null, new cljs.core.Keyword(null, "no-cache?", "no-cache?", -1868220981), true);
                                          var state_10039__$1 = state_10039;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10039__$1, 11, inst_10010);
                                        } else {
                                          if (state_val_10040 === 5) {
                                            var inst_9999 = state_10039[9];
                                            var state_10039__$1 = state_10039;
                                            var statearr_10062_10094 = state_10039__$1;
                                            statearr_10062_10094[2] = inst_9999;
                                            statearr_10062_10094[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10040 === 14) {
                                              var inst_10035 = state_10039[2];
                                              var state_10039__$1 = state_10039;
                                              var statearr_10063_10095 = state_10039__$1;
                                              statearr_10063_10095[2] = inst_10035;
                                              statearr_10063_10095[1] = 10;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10040 === 16) {
                                                var inst_10019 = state_10039[8];
                                                var inst_10022 = cljs.core.apply.call(null, cljs.core.hash_map, inst_10019);
                                                var state_10039__$1 = state_10039;
                                                var statearr_10064_10096 = state_10039__$1;
                                                statearr_10064_10096[2] = inst_10022;
                                                statearr_10064_10096[1] = 18;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10040 === 10) {
                                                  var inst_10037 = state_10039[2];
                                                  var state_10039__$1 = state_10039;
                                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10039__$1, inst_10037);
                                                } else {
                                                  if (state_val_10040 === 18) {
                                                    var inst_10025 = state_10039[2];
                                                    var inst_10026 = cljs.core.get.call(null, inst_10025, new cljs.core.Keyword(null, "body", "body", -2049205669));
                                                    var inst_10027 = cljs.core.get.call(null, inst_10025, new cljs.core.Keyword(null, "status", "status", -1997798413));
                                                    var inst_10028 = cljs.core._EQ_.call(null, inst_10027, 200);
                                                    var state_10039__$1 = function() {
                                                      var statearr_10065 = state_10039;
                                                      statearr_10065[10] = inst_10026;
                                                      return statearr_10065;
                                                    }();
                                                    if (inst_10028) {
                                                      var statearr_10066_10097 = state_10039__$1;
                                                      statearr_10066_10097[1] = 19;
                                                    } else {
                                                      var statearr_10067_10098 = state_10039__$1;
                                                      statearr_10067_10098[1] = 20;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10040 === 8) {
                                                      var state_10039__$1 = state_10039;
                                                      var statearr_10068_10099 = state_10039__$1;
                                                      statearr_10068_10099[2] = null;
                                                      statearr_10068_10099[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6569__auto__);
        return function(switch__6548__auto__, c__6569__auto__) {
          return function() {
            var milia$api$io$validate_token_$_state_machine__6549__auto__ = null;
            var milia$api$io$validate_token_$_state_machine__6549__auto____0 = function() {
              var statearr_10072 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_10072[0] = milia$api$io$validate_token_$_state_machine__6549__auto__;
              statearr_10072[1] = 1;
              return statearr_10072;
            };
            var milia$api$io$validate_token_$_state_machine__6549__auto____1 = function(state_10039) {
              while (true) {
                var ret_value__6550__auto__ = function() {
                  try {
                    while (true) {
                      var result__6551__auto__ = switch__6548__auto__.call(null, state_10039);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6551__auto__;
                      }
                      break;
                    }
                  } catch (e10073) {
                    if (e10073 instanceof Object) {
                      var ex__6552__auto__ = e10073;
                      var statearr_10074_10100 = state_10039;
                      statearr_10074_10100[5] = ex__6552__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10039);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10073;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10101 = state_10039;
                  state_10039 = G__10101;
                  continue;
                } else {
                  return ret_value__6550__auto__;
                }
                break;
              }
            };
            milia$api$io$validate_token_$_state_machine__6549__auto__ = function(state_10039) {
              switch(arguments.length) {
                case 0:
                  return milia$api$io$validate_token_$_state_machine__6549__auto____0.call(this);
                case 1:
                  return milia$api$io$validate_token_$_state_machine__6549__auto____1.call(this, state_10039);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            milia$api$io$validate_token_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = milia$api$io$validate_token_$_state_machine__6549__auto____0;
            milia$api$io$validate_token_$_state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = milia$api$io$validate_token_$_state_machine__6549__auto____1;
            return milia$api$io$validate_token_$_state_machine__6549__auto__;
          }();
        }(switch__6548__auto__, c__6569__auto__);
      }();
      var state__6571__auto__ = function() {
        var statearr_10075 = f__6570__auto__.call(null);
        statearr_10075[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto__;
        return statearr_10075;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
    };
  }(c__6569__auto__));
  return c__6569__auto__;
};
milia.api.io.upload_file = function milia$api$io$upload_file(form, chan) {
  var io_obj = new goog.net.IframeIo;
  var url = form.action;
  goog.events.listen(io_obj, goog.net.EventType.SUCCESS, function(io_obj, url) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, chan, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "success?", "success?", -122854052), true, new cljs.core.Keyword(null, "io-obj", "io-obj", 2062337291), io_obj], null));
    };
  }(io_obj, url));
  goog.events.listen(io_obj, goog.net.EventType.ERROR, function(io_obj, url) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, chan, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "success?", "success?", -122854052), false, new cljs.core.Keyword(null, "io-obj", "io-obj", 2062337291), io_obj], null));
    };
  }(io_obj, url));
  return io_obj.sendFromForm(form, url);
};
goog.provide("milia.api.http");
goog.require("cljs.core");
goog.require("cljs_http.client");
goog.require("cljs_hash.md5");
goog.require("milia.api.io");
milia.api.http.parse_http = function milia$api$http$parse_http() {
  var G__10953 = arguments.length;
  switch(G__10953) {
    case 3:
      return milia.api.http.parse_http.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return milia.api.http.parse_http.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return milia.api.http.parse_http.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
milia.api.http.parse_http.cljs$core$IFn$_invoke$arity$3 = function(method, url, account) {
  return milia.api.http.parse_http.call(null, method, url, account, cljs.core.PersistentArrayMap.EMPTY);
};
milia.api.http.parse_http.cljs$core$IFn$_invoke$arity$4 = function(method, url, account, options) {
  return milia.api.http.parse_http.call(null, method, url, account, options, null);
};
milia.api.http.parse_http.cljs$core$IFn$_invoke$arity$5 = function(method, url, account, options, filename) {
  var map__10954 = options;
  var map__10954__$1 = cljs.core.seq_QMARK_.call(null, map__10954) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10954) : map__10954;
  var no_cache_QMARK_ = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "no-cache?", "no-cache?", -1868220981));
  var as_map_QMARK_ = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "as-map?", "as-map?", 1213586270));
  var raw_response_QMARK_ = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "raw-response?", "raw-response?", 557978228));
  var suppress_40x_exceptions_QMARK_ = cljs.core.get.call(null, map__10954__$1, new cljs.core.Keyword(null, "suppress-40x-exceptions?", "suppress-40x-exceptions?", 1052218929));
  var auth_token = account;
  var http_request = cljs.core.truth_(raw_response_QMARK_) ? milia.api.io.raw_request : cljs_http.client.request;
  var options__$1 = cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null), method) ? null : cljs.core.assoc.call(null, options, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), (new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)).cljs$core$IFn$_invoke$arity$1(options));
  var headers = milia.api.io.token__GT_headers.call(null, auth_token, cljs.core._EQ_.call(null, method, new cljs.core.Keyword(null, "delete", "delete", -1768633620)));
  var time_params = cljs.core.truth_(no_cache_QMARK_) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "t", "t", -1397832519), cljs_hash.md5.md5.call(null, Date.now().toString())], null) : null;
  var all_params = cljs.core.merge.call(null, options__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "xhr", "xhr", -177710851), true, new cljs.core.Keyword(null, "headers", "headers", -835030129), headers, new cljs.core.Keyword(null, "method", "method", 55703592), method, new cljs.core.Keyword(null, "url", "url", 276297046), url], null));
  if (cljs.core.truth_(filename)) {
    throw new Error("File downloads auth not supported via js");
  } else {
  }
  return http_request.call(null, all_params);
};
milia.api.http.parse_http.cljs$lang$maxFixedArity = 5;
goog.provide("milia.utils.seq");
goog.require("cljs.core");
goog.require("clojure.set");
milia.utils.seq.has_keys_QMARK_ = function milia$utils$seq$has_keys_QMARK_(m, keys) {
  return cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core.contains_QMARK_, m), keys);
};
milia.utils.seq.in_QMARK_ = function milia$utils$seq$in_QMARK_(list, elem) {
  return cljs.core.boolean$.call(null, cljs.core.some.call(null, function(p1__10896_SHARP_) {
    return cljs.core._EQ_.call(null, elem, p1__10896_SHARP_);
  }, list));
};
goog.provide("milia.api.dataset");
goog.require("cljs.core");
goog.require("milia.utils.remote");
goog.require("milia.utils.seq");
goog.require("milia.api.http");
goog.require("milia.api.io");
milia.api.dataset.all = function milia$api$dataset$all(account) {
  var url = milia.api.io.make_url.call(null, [cljs.core.str("forms?owner\x3d"), cljs.core.str((new cljs.core.Keyword(null, "username", "username", 1605666410)).cljs$core$IFn$_invoke$arity$1(account))].join(""));
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account);
};
milia.api.dataset.public$ = function milia$api$dataset$public(account, username) {
  var url = milia.api.io.make_url.call(null, "forms", username);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account);
};
milia.api.dataset.update = function milia$api$dataset$update(account, dataset_id, params) {
  if (cljs.core.truth_(milia.utils.seq.has_keys_QMARK_.call(null, params, new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "created_by", "created_by", 562491388), new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "downloadable", "downloadable", 933081130), new cljs.core.Keyword(null, "owner", "owner", -392611939), new cljs.core.Keyword(null, "project", "project", 1124394579), new cljs.core.Keyword(null, 
  "public", "public", 1566243851), new cljs.core.Keyword(null, "public_data", "public_data", 2053501804), new cljs.core.Keyword(null, "title", "title", 636505583), new cljs.core.Keyword(null, "uuid", "uuid", -2145095719)], null)))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "has-keys?", "has-keys?", -2012545374, null), new cljs.core.Symbol(null, "params", "params", -1943919534, null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "created_by", "created_by", 562491388), new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, 
    "downloadable", "downloadable", 933081130), new cljs.core.Keyword(null, "owner", "owner", -392611939), new cljs.core.Keyword(null, "project", "project", 1124394579), new cljs.core.Keyword(null, "public", "public", 1566243851), new cljs.core.Keyword(null, "public_data", "public_data", 2053501804), new cljs.core.Keyword(null, "title", "title", 636505583), new cljs.core.Keyword(null, "uuid", "uuid", -2145095719)], null))))].join(""));
  }
  var url = milia.api.io.make_url.call(null, "forms", dataset_id);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "put", "put", 1299772570), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467), params], null));
};
milia.api.dataset.update_form_name = function milia$api$dataset$update_form_name(account, dataset_id, params) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "put", "put", 1299772570), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467), params], null));
};
milia.api.dataset.data = function milia$api$dataset$data() {
  var argseq__5314__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return milia.api.dataset.data.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5314__auto__);
};
milia.api.dataset.data.cljs$core$IFn$_invoke$arity$variadic = function(account, dataset_id, p__9838) {
  var map__9839 = p__9838;
  var map__9839__$1 = cljs.core.seq_QMARK_.call(null, map__9839) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9839) : map__9839;
  var raw_QMARK_ = cljs.core.get.call(null, map__9839__$1, new cljs.core.Keyword(null, "raw?", "raw?", 394379982));
  var format = cljs.core.get.call(null, map__9839__$1, new cljs.core.Keyword(null, "format", "format", -1306924766), "json");
  var dataset_suffix = cljs.core.truth_(format) ? [cljs.core.str(dataset_id), cljs.core.str("."), cljs.core.str(format)].join("") : dataset_id;
  var url = milia.api.io.make_url.call(null, "data", dataset_suffix);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "raw-response?", "raw-response?", 557978228), raw_QMARK_], null));
};
milia.api.dataset.data.cljs$lang$maxFixedArity = 2;
milia.api.dataset.data.cljs$lang$applyTo = function(seq9835) {
  var G__9836 = cljs.core.first.call(null, seq9835);
  var seq9835__$1 = cljs.core.next.call(null, seq9835);
  var G__9837 = cljs.core.first.call(null, seq9835__$1);
  var seq9835__$2 = cljs.core.next.call(null, seq9835__$1);
  return milia.api.dataset.data.cljs$core$IFn$_invoke$arity$variadic(G__9836, G__9837, seq9835__$2);
};
milia.api.dataset.record = function milia$api$dataset$record(account, dataset_id, record_id) {
  var url = milia.api.io.make_url.call(null, "data", dataset_id, record_id);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account);
};
milia.api.dataset.tags = function milia$api$dataset$tags(account, dataset_id) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id, "labels");
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account);
};
milia.api.dataset.add_tags = function milia$api$dataset$add_tags(account, dataset_id, tags) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id, "labels");
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "post", "post", 269697687), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467), tags], null));
};
milia.api.dataset.filename_for_format = function milia$api$dataset$filename_for_format(dataset_id, format) {
  return[cljs.core.str(dataset_id), cljs.core.str("."), cljs.core.str(cljs.core._EQ_.call(null, format, "csvzip") ? "zip" : format)].join("");
};
milia.api.dataset.options_for_format = function milia$api$dataset$options_for_format(format) {
  if (cljs.core.truth_(milia.utils.seq.in_QMARK_.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["csvzip", "sav", "xls", "xlsx"], null), format))) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "as", "as", 1148689641), new cljs.core.Keyword(null, "byte-array", "byte-array", 369158537)], null);
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
milia.api.dataset.form = function milia$api$dataset$form() {
  var G__9841 = arguments.length;
  switch(G__9841) {
    case 2:
      return milia.api.dataset.form.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return milia.api.dataset.form.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
milia.api.dataset.form.cljs$core$IFn$_invoke$arity$2 = function(account, dataset_id) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id, "form.json");
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account);
};
milia.api.dataset.form.cljs$core$IFn$_invoke$arity$3 = function(account, dataset_id, format) {
  var suffix = [cljs.core.str("form."), cljs.core.str(format)].join("");
  var options = milia.api.dataset.options_for_format.call(null, format);
  var url = milia.api.io.make_url.call(null, "forms", dataset_id, suffix);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account, options, [cljs.core.str(dataset_id), cljs.core.str("_"), cljs.core.str(suffix)].join(""));
};
milia.api.dataset.form.cljs$lang$maxFixedArity = 3;
milia.api.dataset.metadata = function milia$api$dataset$metadata(account, dataset_id) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account);
};
milia.api.dataset.edit_link = function milia$api$dataset$edit_link(account, dataset_id, instance_id) {
  var return_url = milia.utils.remote.make_zebra_url.call(null, "/submission-editing-complete");
  var url = milia.api.io.make_url.call(null, "data", dataset_id, instance_id, [cljs.core.str("enketo?return_url\x3d"), cljs.core.str(return_url)].join(""));
  return(new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account));
};
milia.api.dataset.delete$ = function milia$api$dataset$delete(account, dataset_id) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id, "delete_async");
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), url, account);
};
milia.api.dataset.move_to_project = function milia$api$dataset$move_to_project(account, dataset_id, project_id) {
  var url = milia.api.io.make_url.call(null, "projects", project_id, "forms");
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "post", "post", 269697687), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "formid", "formid", -2121398991), dataset_id], null)], null));
};
milia.api.dataset.update_sharing = function milia$api$dataset$update_sharing(account, dataset_id, username, role) {
  var url = milia.api.io.make_url.call(null, "forms", dataset_id, "share");
  var data = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "username", "username", 1605666410), username, new cljs.core.Keyword(null, "role", "role", -736691072), role], null);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "post", "post", 269697687), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467), data], null));
};
milia.api.dataset.add_xls_report = function milia$api$dataset$add_xls_report(account, dataset_id, uuid, filename) {
  var xls_url = milia.utils.remote.make_j2x_url.call(null, "xls", uuid);
  var url = milia.api.io.make_url.call(null, "metadata");
  var data = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "xform", "xform", -1725711008), dataset_id, new cljs.core.Keyword(null, "data_type", "data_type", 1391137078), "external_export", new cljs.core.Keyword(null, "data_value", "data_value", -683590351), [cljs.core.str(filename), cljs.core.str("|"), cljs.core.str(xls_url)].join("")], null);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "post", "post", 269697687), url, account, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467), data], null));
};
milia.api.dataset.download_xls_report = function milia$api$dataset$download_xls_report() {
  var G__9844 = arguments.length;
  switch(G__9844) {
    case 4:
      return milia.api.dataset.download_xls_report.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return milia.api.dataset.download_xls_report.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
milia.api.dataset.download_xls_report.cljs$core$IFn$_invoke$arity$4 = function(account, dataset_id, meta_id, filename) {
  return milia.api.dataset.download_xls_report.call(null, account, dataset_id, meta_id, filename, null);
};
milia.api.dataset.download_xls_report.cljs$core$IFn$_invoke$arity$5 = function(account, dataset_id, meta_id, filename, data_id) {
  var suffix = cljs.core.truth_(data_id) ? [cljs.core.str(dataset_id), cljs.core.str(".xls?meta\x3d"), cljs.core.str(meta_id), cljs.core.str("\x26data_id\x3d"), cljs.core.str(data_id)].join("") : [cljs.core.str(dataset_id), cljs.core.str(".xls?meta\x3d"), cljs.core.str(meta_id)].join("");
  var url = milia.api.io.make_url.call(null, "forms", suffix);
  return milia.api.http.parse_http.call(null, new cljs.core.Keyword(null, "get", "get", 1683182755), url, account, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "as", "as", 1148689641), new cljs.core.Keyword(null, "byte-array", "byte-array", 369158537), new cljs.core.Keyword(null, "as-map?", "as-map?", 1213586270), true], null), filename);
};
milia.api.dataset.download_xls_report.cljs$lang$maxFixedArity = 5;
goog.provide("examples.stolen.core");
goog.require("cljs.core");
goog.require("hatti.ona.post_process");
goog.require("hatti.views");
goog.require("milia.api.io");
goog.require("milia.api.dataset");
goog.require("cljs.core.async");
goog.require("milia.utils.remote");
goog.require("hatti.shared");
goog.require("hatti.ona.forms");
goog.require("om.core");
goog.require("hatti.utils");
cljs.core.enable_console_print_BANG_.call(null);
cljs.core.swap_BANG_.call(null, milia.utils.remote.hosts, cljs.core.merge, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "ui", "ui", -469653645), "localhost:8000", new cljs.core.Keyword(null, "data", "data", -232669377), "ona.io", new cljs.core.Keyword(null, "ona-api-server-protocol", "ona-api-server-protocol", 1305279248), "https "], null));
examples.stolen.core.dataset_id = "33597";
examples.stolen.core.mapbox_tiles = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "url", "url", 276297046), "http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png", new cljs.core.Keyword(null, "name", "name", 1843675177), "Humanitarian OpenStreetMap Team", new cljs.core.Keyword(null, "attribution", "attribution", 1937239286), '\x26copy;  \x3ca href\x3d"http://osm.org/copyright"\x3e\n                  OpenStreetMap Contributors.\x3c/a\x3e\n                  Tiles courtesy of\n                  \x3ca href\x3d"http://hot.openstreetmap.org/"\x3e\n                  Humanitarian OpenStreetMap Team\x3c/a\x3e.'], 
null)], null);
examples.stolen.core.auth_token = "1";
examples.stolen.core.chart_getter = function examples$stolen$core$chart_getter(field_name) {
  var suffix = [cljs.core.str(examples.stolen.core.dataset_id), cljs.core.str(".json?field_name\x3d"), cljs.core.str(field_name)].join("");
  var chart_url = milia.api.io.make_url.call(null, "charts", suffix);
  return milia.api.io.get_url.call(null, chart_url.call(null, field_name), cljs.core.PersistentArrayMap.EMPTY, examples.stolen.core.auth_token);
};
var c__6569__auto___20432 = cljs.core.async.chan.call(null, 1);
cljs.core.async.impl.dispatch.run.call(null, function(c__6569__auto___20432) {
  return function() {
    var f__6570__auto__ = function() {
      var switch__6548__auto__ = function(c__6569__auto___20432) {
        return function(state_20419) {
          var state_val_20420 = state_20419[1];
          if (state_val_20420 === 4) {
            var inst_20393 = state_20419[7];
            var inst_20385 = state_20419[8];
            var inst_20389 = state_20419[9];
            var inst_20383 = state_20419[10];
            var inst_20384 = state_20419[11];
            var inst_20395 = state_20419[2];
            var inst_20396 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_20395);
            var inst_20397 = hatti.shared.update_app_data_BANG_.call(null, hatti.shared.app_state, inst_20389, new cljs.core.Keyword(null, "rerank?", "rerank?", -177233089), true);
            var inst_20398 = cljs.core.PersistentVector.EMPTY_NODE;
            var inst_20399 = [new cljs.core.Keyword(null, "dataset-info", "dataset-info", -1196999563)];
            var inst_20400 = new cljs.core.PersistentVector(null, 1, 5, inst_20398, inst_20399, null);
            var inst_20401 = function() {
              var info = inst_20396;
              var form = inst_20393;
              var data = inst_20389;
              var info_chan = inst_20385;
              var form_chan = inst_20384;
              var data_chan = inst_20383;
              return function(info, form, data, info_chan, form_chan, data_chan, inst_20393, inst_20385, inst_20389, inst_20383, inst_20384, inst_20395, inst_20396, inst_20397, inst_20398, inst_20399, inst_20400, state_val_20420, c__6569__auto___20432) {
                return function(_) {
                  return info;
                };
              }(info, form, data, info_chan, form_chan, data_chan, inst_20393, inst_20385, inst_20389, inst_20383, inst_20384, inst_20395, inst_20396, inst_20397, inst_20398, inst_20399, inst_20400, state_val_20420, c__6569__auto___20432);
            }();
            var inst_20402 = hatti.shared.transact_app_state_BANG_.call(null, hatti.shared.app_state, inst_20400, inst_20401);
            var inst_20403 = hatti.ona.post_process.integrate_attachments_BANG_.call(null, hatti.shared.app_state, inst_20393);
            var inst_20404 = [new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "shared", "shared", -384145993), new cljs.core.Keyword(null, "opts", "opts", 155075701)];
            var inst_20405 = document.getElementById("map");
            var inst_20406 = [new cljs.core.Keyword(null, "flat-form", "flat-form", -468858211), new cljs.core.Keyword(null, "map-config", "map-config", 267109639)];
            var inst_20407 = [new cljs.core.Keyword(null, "mapbox-tiles", "mapbox-tiles", 69952469)];
            var inst_20408 = [examples.stolen.core.mapbox_tiles];
            var inst_20409 = cljs.core.PersistentHashMap.fromArrays(inst_20407, inst_20408);
            var inst_20410 = [inst_20393, inst_20409];
            var inst_20411 = cljs.core.PersistentHashMap.fromArrays(inst_20406, inst_20410);
            var inst_20412 = [new cljs.core.Keyword(null, "chart-get", "chart-get", 1496837990)];
            var inst_20413 = [examples.stolen.core.chart_getter];
            var inst_20414 = cljs.core.PersistentHashMap.fromArrays(inst_20412, inst_20413);
            var inst_20415 = [inst_20405, inst_20411, inst_20414];
            var inst_20416 = cljs.core.PersistentHashMap.fromArrays(inst_20404, inst_20415);
            var inst_20417 = om.core.root.call(null, hatti.views.tabbed_dataview, hatti.shared.app_state, inst_20416);
            var state_20419__$1 = function() {
              var statearr_20421 = state_20419;
              statearr_20421[12] = inst_20402;
              statearr_20421[13] = inst_20403;
              statearr_20421[14] = inst_20397;
              return statearr_20421;
            }();
            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20419__$1, inst_20417);
          } else {
            if (state_val_20420 === 3) {
              var inst_20385 = state_20419[8];
              var inst_20391 = state_20419[2];
              var inst_20392 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_20391);
              var inst_20393 = hatti.ona.forms.flatten_form.call(null, inst_20392);
              var state_20419__$1 = function() {
                var statearr_20422 = state_20419;
                statearr_20422[7] = inst_20393;
                return statearr_20422;
              }();
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20419__$1, 4, inst_20385);
            } else {
              if (state_val_20420 === 2) {
                var inst_20384 = state_20419[11];
                var inst_20387 = state_20419[2];
                var inst_20388 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_20387);
                var inst_20389 = hatti.utils.json__GT_cljs.call(null, inst_20388);
                var state_20419__$1 = function() {
                  var statearr_20423 = state_20419;
                  statearr_20423[9] = inst_20389;
                  return statearr_20423;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20419__$1, 3, inst_20384);
              } else {
                if (state_val_20420 === 1) {
                  var inst_20383 = state_20419[10];
                  var inst_20383__$1 = milia.api.dataset.data.call(null, examples.stolen.core.auth_token, examples.stolen.core.dataset_id, new cljs.core.Keyword(null, "raw?", "raw?", 394379982), true);
                  var inst_20384 = milia.api.dataset.form.call(null, examples.stolen.core.auth_token, examples.stolen.core.dataset_id);
                  var inst_20385 = milia.api.dataset.metadata.call(null, examples.stolen.core.auth_token, examples.stolen.core.dataset_id);
                  var state_20419__$1 = function() {
                    var statearr_20424 = state_20419;
                    statearr_20424[8] = inst_20385;
                    statearr_20424[10] = inst_20383__$1;
                    statearr_20424[11] = inst_20384;
                    return statearr_20424;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20419__$1, 2, inst_20383__$1);
                } else {
                  return null;
                }
              }
            }
          }
        };
      }(c__6569__auto___20432);
      return function(switch__6548__auto__, c__6569__auto___20432) {
        return function() {
          var examples$stolen$core$state_machine__6549__auto__ = null;
          var examples$stolen$core$state_machine__6549__auto____0 = function() {
            var statearr_20428 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_20428[0] = examples$stolen$core$state_machine__6549__auto__;
            statearr_20428[1] = 1;
            return statearr_20428;
          };
          var examples$stolen$core$state_machine__6549__auto____1 = function(state_20419) {
            while (true) {
              var ret_value__6550__auto__ = function() {
                try {
                  while (true) {
                    var result__6551__auto__ = switch__6548__auto__.call(null, state_20419);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6551__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      continue;
                    } else {
                      return result__6551__auto__;
                    }
                    break;
                  }
                } catch (e20429) {
                  if (e20429 instanceof Object) {
                    var ex__6552__auto__ = e20429;
                    var statearr_20430_20433 = state_20419;
                    statearr_20430_20433[5] = ex__6552__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20419);
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    throw e20429;
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6550__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                var G__20434 = state_20419;
                state_20419 = G__20434;
                continue;
              } else {
                return ret_value__6550__auto__;
              }
              break;
            }
          };
          examples$stolen$core$state_machine__6549__auto__ = function(state_20419) {
            switch(arguments.length) {
              case 0:
                return examples$stolen$core$state_machine__6549__auto____0.call(this);
              case 1:
                return examples$stolen$core$state_machine__6549__auto____1.call(this, state_20419);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          examples$stolen$core$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$0 = examples$stolen$core$state_machine__6549__auto____0;
          examples$stolen$core$state_machine__6549__auto__.cljs$core$IFn$_invoke$arity$1 = examples$stolen$core$state_machine__6549__auto____1;
          return examples$stolen$core$state_machine__6549__auto__;
        }();
      }(switch__6548__auto__, c__6569__auto___20432);
    }();
    var state__6571__auto__ = function() {
      var statearr_20431 = f__6570__auto__.call(null);
      statearr_20431[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6569__auto___20432;
      return statearr_20431;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6571__auto__);
  };
}(c__6569__auto___20432));

//# sourceMappingURL=main.js.map